{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/project.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"ng2-charts\";\nfunction MonthlyStatusComponent_option_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const project_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", project_r2.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(project_r2.name);\n  }\n}\nfunction MonthlyStatusComponent_option_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const month_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", month_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(month_r3);\n  }\n}\nexport class MonthlyStatusComponent {\n  constructor(projectService) {\n    this.projectService = projectService;\n    this.projects = [];\n    this.months = ['2024-01', '2024-02', '2024-03', '2024-04', '2024-04']; // Example months, adjust as needed\n    this.selectedProjectId = null;\n    this.selectedMonth = null;\n    this.lineChartData = [];\n    this.lineChartLabels = [];\n    this.lineChartOptions = {\n      responsive: true\n    };\n    this.lineChartLegend = true;\n    this.lineChartType = 'line';\n    this.lineChartPlugins = [];\n  }\n  ngOnInit() {\n    this.projectService.getAllProjects().subscribe(projects => {\n      this.projects = projects;\n    });\n  }\n  onProjectSelect(event) {\n    this.selectedProjectId = event.target.value;\n    this.fetchStatusHistory();\n  }\n  onMonthSelect(event) {\n    this.selectedMonth = event.target.value;\n    this.fetchStatusHistory();\n  }\n  fetchStatusHistory() {\n    if (this.selectedProjectId && this.selectedMonth) {\n      this.projectService.getStatusHistory(this.selectedProjectId, this.selectedMonth).subscribe(statusHistory => {\n        this.updateChartData(statusHistory);\n      });\n    }\n  }\n  updateChartData(statusHistory) {\n    this.lineChartLabels = statusHistory.map(status => status.date); // Assuming 'date' is a field in your status data\n    this.lineChartData = [{\n      data: statusHistory.map(status => status.value),\n      label: 'Status'\n    } // Assuming 'value' is the field for status value\n    ];\n  }\n  static #_ = this.ɵfac = function MonthlyStatusComponent_Factory(t) {\n    return new (t || MonthlyStatusComponent)(i0.ɵɵdirectiveInject(i1.ProjectService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MonthlyStatusComponent,\n    selectors: [[\"app-monthly-status\"]],\n    decls: 7,\n    vars: 8,\n    consts: [[1, \"dashboard-container\"], [1, \"chart-container\"], [2, \"width\", \"200px\", 3, \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"baseChart\", \"\", 3, \"datasets\", \"labels\", \"options\", \"legend\", \"chartType\", \"plugins\"], [3, \"value\"]],\n    template: function MonthlyStatusComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"select\", 2);\n        i0.ɵɵlistener(\"change\", function MonthlyStatusComponent_Template_select_change_2_listener($event) {\n          return ctx.onProjectSelect($event);\n        });\n        i0.ɵɵtemplate(3, MonthlyStatusComponent_option_3_Template, 2, 2, \"option\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"select\", 2);\n        i0.ɵɵlistener(\"change\", function MonthlyStatusComponent_Template_select_change_4_listener($event) {\n          return ctx.onMonthSelect($event);\n        });\n        i0.ɵɵtemplate(5, MonthlyStatusComponent_option_5_Template, 2, 2, \"option\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"canvas\", 4);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.projects);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.months);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"datasets\", ctx.lineChartData)(\"labels\", ctx.lineChartLabels)(\"options\", ctx.lineChartOptions)(\"legend\", ctx.lineChartLegend)(\"chartType\", ctx.lineChartType)(\"plugins\", ctx.lineChartPlugins);\n      }\n    },\n    dependencies: [i2.NgForOf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i4.BaseChartDirective],\n    styles: [\"div[_ngcontent-%COMP%] {\\n    margin: 20px;\\n  }\\n  \\n  canvas[_ngcontent-%COMP%] {\\n    max-width: 100%;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbW9udGhseS1zdGF0dXMvbW9udGhseS1zdGF0dXMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQ0FBaUM7QUFDakM7SUFDSSxZQUFZO0VBQ2Q7O0VBRUE7SUFDRSxlQUFlO0VBQ2pCIiwic291cmNlc0NvbnRlbnQiOlsiLyogbW9udGhseS1zdGF0dXMuY29tcG9uZW50LmNzcyAqL1xuZGl2IHtcbiAgICBtYXJnaW46IDIwcHg7XG4gIH1cbiAgXG4gIGNhbnZhcyB7XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICB9XG4gICJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":";;;;;;;IAGQA,iCAA8D;IAAAA,YAAkB;IAAAA,iBAAS;;;;IAAhDA,qCAAoB;IAACA,eAAkB;IAAlBA,qCAAkB;;;;;IAGhFA,iCAAqD;IAAAA,YAAW;IAAAA,iBAAS;;;;IAApCA,gCAAe;IAACA,eAAW;IAAXA,8BAAW;;;ACIxE,OAAM,MAAOC,sBAAsB;EAejCC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;IAdlC,aAAQ,GAAU,EAAE;IACpB,WAAM,GAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;IAC5E,sBAAiB,GAAkB,IAAI;IACvC,kBAAa,GAAkB,IAAI;IAEnC,kBAAa,GAAoB,EAAE;IACnC,oBAAe,GAAY,EAAE;IAC7B,qBAAgB,GAAiB;MAC/BC,UAAU,EAAE;KACb;IACD,oBAAe,GAAG,IAAI;IACtB,kBAAa,GAAc,MAAM;IACjC,qBAAgB,GAAG,EAAE;EAEgC;EAErDC,QAAQ;IACN,IAAI,CAACF,cAAc,CAACG,cAAc,EAAE,CAACC,SAAS,CAACC,QAAQ,IAAG;MACxD,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IAC1B,CAAC,CAAC;EACJ;EAEAC,eAAe,CAACC,KAAU;IACxB,IAAI,CAACC,iBAAiB,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK;IAC3C,IAAI,CAACC,kBAAkB,EAAE;EAC3B;EAEAC,aAAa,CAACL,KAAU;IACtB,IAAI,CAACM,aAAa,GAAGN,KAAK,CAACE,MAAM,CAACC,KAAK;IACvC,IAAI,CAACC,kBAAkB,EAAE;EAC3B;EAEAA,kBAAkB;IAChB,IAAI,IAAI,CAACH,iBAAiB,IAAI,IAAI,CAACK,aAAa,EAAE;MAChD,IAAI,CAACb,cAAc,CAACc,gBAAgB,CAAC,IAAI,CAACN,iBAAiB,EAAE,IAAI,CAACK,aAAa,CAAC,CAACT,SAAS,CAACW,aAAa,IAAG;QACzG,IAAI,CAACC,eAAe,CAACD,aAAa,CAAC;MACrC,CAAC,CAAC;;EAEN;EAEAC,eAAe,CAACD,aAAoB;IAClC,IAAI,CAACE,eAAe,GAAGF,aAAa,CAACG,GAAG,CAACC,MAAM,IAAIA,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC;IACjE,IAAI,CAACC,aAAa,GAAG,CACnB;MAAEC,IAAI,EAAEP,aAAa,CAACG,GAAG,CAACC,MAAM,IAAIA,MAAM,CAACT,KAAK,CAAC;MAAEa,KAAK,EAAE;IAAQ,CAAE,CAAC;IAAA,CACtE;EACH;EAAC;qBA9CUzB,sBAAsB;EAAA;EAAA;UAAtBA,sBAAsB;IAAA0B;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QDVnC/B,8BAAiC;QAEnBA;UAAA,OAAUgC,2BAAuB;QAAA,EAAC;QACxChC,6EAAyF;QAC3FA,iBAAS;QACTA,iCAA+D;QAAvDA;UAAA,OAAUgC,yBAAqB;QAAA,EAAC;QACtChC,6EAAyE;QAC3EA,iBAAS;QACTA,4BAOS;QACXA,iBAAM;;;QAb0BA,eAAW;QAAXA,sCAAW;QAGbA,eAAS;QAATA,oCAAS;QAG7BA,eAA0B;QAA1BA,4CAA0B","names":["i0","MonthlyStatusComponent","constructor","projectService","responsive","ngOnInit","getAllProjects","subscribe","projects","onProjectSelect","event","selectedProjectId","target","value","fetchStatusHistory","onMonthSelect","selectedMonth","getStatusHistory","statusHistory","updateChartData","lineChartLabels","map","status","date","lineChartData","data","label","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/monthly-status/monthly-status.component.html","/home/decodersmdu/pocone/src/app/monthly-status/monthly-status.component.ts"],"sourcesContent":["<div class=\"dashboard-container\">\n    <div class=\"chart-container\">\n      <select (change)=\"onProjectSelect($event)\" style=\"width: 200px;\">\n        <option *ngFor=\"let project of projects\" [value]=\"project.id\">{{ project.name }}</option>\n      </select>\n      <select (change)=\"onMonthSelect($event)\" style=\"width: 200px;\">\n        <option *ngFor=\"let month of months\" [value]=\"month\">{{ month }}</option>\n      </select>\n      <canvas baseChart\n              [datasets]=\"lineChartData\"\n              [labels]=\"lineChartLabels\"\n              [options]=\"lineChartOptions\"\n              [legend]=\"lineChartLegend\"\n              [chartType]=\"lineChartType\"\n              [plugins]=\"lineChartPlugins\">\n      </canvas>\n    </div>\n  </div>\n  ","import { Component, OnInit } from '@angular/core';\nimport { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\nimport { Color, Label } from 'ng2-charts';\nimport { ProjectService } from '../Services/project.service';// Adjust the import path as needed\n\n@Component({\n  selector: 'app-monthly-status',\n  templateUrl: './monthly-status.component.html',\n  styleUrls: ['./monthly-status.component.css']\n})\nexport class MonthlyStatusComponent implements OnInit {\n  projects: any[] = [];\n  months: string[] = ['2024-01', '2024-02', '2024-03', '2024-04', '2024-04']; // Example months, adjust as needed\n  selectedProjectId: number | null = null;\n  selectedMonth: string | null = null;\n\n  lineChartData: ChartDataSets[] = [];\n  lineChartLabels: Label[] = [];\n  lineChartOptions: ChartOptions = {\n    responsive: true,\n  };\n  lineChartLegend = true;\n  lineChartType: ChartType = 'line';\n  lineChartPlugins = [];\n\n  constructor(private projectService: ProjectService) {}\n\n  ngOnInit() {\n    this.projectService.getAllProjects().subscribe(projects => {\n      this.projects = projects;\n    });\n  }\n\n  onProjectSelect(event: any) {\n    this.selectedProjectId = event.target.value;\n    this.fetchStatusHistory();\n  }\n\n  onMonthSelect(event: any) {\n    this.selectedMonth = event.target.value;\n    this.fetchStatusHistory();\n  }\n\n  fetchStatusHistory() {\n    if (this.selectedProjectId && this.selectedMonth) {\n      this.projectService.getStatusHistory(this.selectedProjectId, this.selectedMonth).subscribe(statusHistory => {\n        this.updateChartData(statusHistory);\n      });\n    }\n  }\n\n  updateChartData(statusHistory: any[]) {\n    this.lineChartLabels = statusHistory.map(status => status.date); // Assuming 'date' is a field in your status data\n    this.lineChartData = [\n      { data: statusHistory.map(status => status.value), label: 'Status' } // Assuming 'value' is the field for status value\n    ];\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}