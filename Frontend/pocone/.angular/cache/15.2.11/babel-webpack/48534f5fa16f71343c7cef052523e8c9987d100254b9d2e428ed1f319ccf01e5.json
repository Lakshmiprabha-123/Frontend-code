{"ast":null,"code":"import { Chart } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/project.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction MonthlyStatusComponent_option_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const project_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", project_r2.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(project_r2.name);\n  }\n}\nfunction MonthlyStatusComponent_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const month_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", month_r3.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(month_r3.label);\n  }\n}\n// Importing configuration for Chart.js\nexport class MonthlyStatusComponent {\n  constructor(projectService) {\n    this.projectService = projectService;\n    this.projects = [];\n    this.months = [{\n      value: '2024-01',\n      label: 'January 2024'\n    }, {\n      value: '2024-02',\n      label: 'February 2024'\n    }, {\n      value: '2024-03',\n      label: 'March 2024'\n    }, {\n      value: '2024-04',\n      label: 'April 2024'\n    }, {\n      value: '2024-05',\n      label: 'May 2024'\n    }, {\n      value: '2024-06',\n      label: 'June 2024'\n    }, {\n      value: '2024-07',\n      label: 'July 2024'\n    }, {\n      value: '2024-08',\n      label: 'August 2024'\n    }, {\n      value: '2024-09',\n      label: 'September 2024'\n    }, {\n      value: '2024-10',\n      label: 'October 2024'\n    }, {\n      value: '2024-11',\n      label: 'November 2024'\n    }, {\n      value: '2024-12',\n      label: 'December 2024'\n    }];\n    this.selectedProject = null; // Option 2: Initialized with null\n    this.selectedMonth = null;\n  }\n  ngOnInit() {\n    this.loadProjects();\n  }\n  loadProjects() {\n    this.projectService.getAllProjects().subscribe(projects => {\n      this.projects = projects;\n    });\n  }\n  onProjectSelect(event) {\n    this.selectedProject = +event.target.value;\n    this.loadStatusHistory();\n  }\n  onMonthChange(event) {\n    this.selectedMonth = event.target.value;\n    this.loadStatusHistory();\n  }\n  loadStatusHistory() {\n    if (this.selectedProject && this.selectedMonth) {\n      this.projectService.getStatusHistory(this.selectedProject, this.selectedMonth).subscribe(data => {\n        console.log(data); // Log the received data\n        this.updateChart(data);\n      });\n    }\n  }\n  updateChart(data) {\n    const labels = data.map((entry, index) => `Day ${index + 1}`);\n    const statusData = data.map(entry => entry[0]);\n    if (this.chart) {\n      this.chart.destroy();\n    }\n    this.chart = new Chart('lineChart', {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Current Status',\n          data: statusData,\n          fill: false,\n          borderColor: 'blue',\n          borderWidth: 2,\n          cubicInterpolationMode: 'monotone'\n        }]\n      },\n      options: {\n        responsive: true,\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Days'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Status'\n            },\n            min: 0,\n            max: 5 // Adjust this based on your status values\n          }\n        }\n      }\n    });\n  }\n  static #_ = this.ɵfac = function MonthlyStatusComponent_Factory(t) {\n    return new (t || MonthlyStatusComponent)(i0.ɵɵdirectiveInject(i1.ProjectService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MonthlyStatusComponent,\n    selectors: [[\"app-monthly-status\"]],\n    decls: 12,\n    vars: 2,\n    consts: [[1, \"dashboard-container\"], [1, \"controls\"], [\"for\", \"project-select\"], [\"id\", \"project-select\", 3, \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"month-select\"], [\"id\", \"month-select\", 2, \"width\", \"200px\", 3, \"change\"], [1, \"chart-container\"], [\"id\", \"lineChart\"], [3, \"value\"]],\n    template: function MonthlyStatusComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"label\", 2);\n        i0.ɵɵtext(3, \"Select Project:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"select\", 3);\n        i0.ɵɵlistener(\"change\", function MonthlyStatusComponent_Template_select_change_4_listener($event) {\n          return ctx.onProjectSelect($event);\n        });\n        i0.ɵɵtemplate(5, MonthlyStatusComponent_option_5_Template, 2, 2, \"option\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"label\", 5);\n        i0.ɵɵtext(7, \"Select Month:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"select\", 6);\n        i0.ɵɵlistener(\"change\", function MonthlyStatusComponent_Template_select_change_8_listener($event) {\n          return ctx.onMonthChange($event);\n        });\n        i0.ɵɵtemplate(9, MonthlyStatusComponent_option_9_Template, 2, 2, \"option\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 7);\n        i0.ɵɵelement(11, \"canvas\", 8);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.projects);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.months);\n      }\n    },\n    dependencies: [i2.NgForOf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption],\n    styles: [\".dashboard-container[_ngcontent-%COMP%] {\\n  padding: 20px;\\n}\\n\\n.controls[_ngcontent-%COMP%] {\\n  margin-bottom: 20px;\\n  display: flex;\\n  gap: 20px;\\n}\\n\\n.chart-container[_ngcontent-%COMP%] {\\n  width: 100%;\\n  max-width: 800px;\\n  margin: 0 auto;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbW9udGhseS1zdGF0dXMvbW9udGhseS1zdGF0dXMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLG1CQUFtQjtFQUNuQixhQUFhO0VBQ2IsU0FBUztBQUNYOztBQUVBO0VBQ0UsV0FBVztFQUNYLGdCQUFnQjtFQUNoQixjQUFjO0FBQ2hCIiwic291cmNlc0NvbnRlbnQiOlsiLmRhc2hib2FyZC1jb250YWluZXIge1xuICBwYWRkaW5nOiAyMHB4O1xufVxuXG4uY29udHJvbHMge1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDIwcHg7XG59XG5cbi5jaGFydC1jb250YWluZXIge1xuICB3aWR0aDogMTAwJTtcbiAgbWF4LXdpZHRoOiA4MDBweDtcbiAgbWFyZ2luOiAwIGF1dG87XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["Chart","i0","MonthlyStatusComponent","constructor","projectService","value","label","ngOnInit","loadProjects","getAllProjects","subscribe","projects","onProjectSelect","event","selectedProject","target","loadStatusHistory","onMonthChange","selectedMonth","getStatusHistory","data","console","log","updateChart","labels","map","entry","index","statusData","chart","destroy","type","datasets","fill","borderColor","borderWidth","cubicInterpolationMode","options","responsive","scales","x","title","display","text","y","min","max","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/monthly-status/monthly-status.component.ts","/home/decodersmdu/pocone/src/app/monthly-status/monthly-status.component.html"],"sourcesContent":["// // import { Component, OnInit } from '@angular/core';\n// // import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n// // import { Color, Label } from 'ng2-charts';\n// // import { ProjectService } from '../Services/project.service';// Adjust the import path as needed\n\n// // @Component({\n// //   selector: 'app-monthly-status',\n// //   templateUrl: './monthly-status.component.html',\n// //   styleUrls: ['./monthly-status.component.css']\n// // })\n// // export class MonthlyStatusComponent implements OnInit {\n// //   projects: any[] = [];\n// //   months: string[] = ['2024-01', '2024-02', '2024-03', '2024-04', '2024-05','2024-06','2024-07','2024-08']; // Example months, adjust as needed\n// //   selectedProjectId: number | null = null;\n// //   selectedMonth: string | null = null;\n\n// //   lineChartData: ChartDataSets[] = [];\n// //   lineChartLabels: Label[] = [];\n// //   lineChartOptions: ChartOptions = {\n// //     responsive: true,\n// //   };\n// //   lineChartLegend = true;\n// //   lineChartType: ChartType = 'line';\n// //   lineChartPlugins = [];\n\n// //   constructor(private projectService: ProjectService) {}\n\n// //   ngOnInit() {\n// //     this.projectService.getAllProjects().subscribe(projects => {\n// //       this.projects = projects;\n// //     });\n// //   }\n\n// //   onProjectSelect(event: any) {\n// //     this.selectedProjectId = event.target.value;\n// //     this.fetchStatusHistory();\n// //   }\n\n// //   onMonthSelect(event: any) {\n// //     this.selectedMonth = event.target.value;\n// //     this.fetchStatusHistory();\n// //   }\n\n// //   fetchStatusHistory() {\n// //     if (this.selectedProjectId && this.selectedMonth) {\n// //       this.projectService.getStatusHistory(this.selectedProjectId, this.selectedMonth).subscribe(statusHistory => {\n// //         this.updateChartData(statusHistory);\n// //       });\n// //     }\n// //   }\n\n// //   updateChartData(statusHistory: any[]) {\n// //     this.lineChartLabels = statusHistory.map(status => status.date); // Assuming 'date' is a field in your status data\n// //     this.lineChartData = [\n// //       { data: statusHistory.map(status => status.value), label: 'Status' } // Assuming 'value' is the field for status value\n// //     ];\n// //   }\n// // }\n// import { Component, OnInit } from '@angular/core';\n// import { ProjectService } from '../Services/project.service'; // Update the path if necessary\n// import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n// import { Color, Label } from 'ng2-charts';\n\n// @Component({\n//   selector: 'app-monthly-status',\n//   templateUrl: './monthly-status.component.html',\n//   styleUrls: ['./monthly-status.component.css']\n// })\n// export class MonthlyStatusComponent implements OnInit {\n//   projects: any[] = [];\n//   selectedProjectId: number | null = null;\n//   selectedMonth: string = '';\n//   months: string[] = [\n//     '2024-01', '2024-02', '2024-03', '2024-04', '2024-05', \n//     '2024-06', '2024-07', '2024-08', '2024-09', '2024-10', \n//     '2024-11', '2024-12'\n//   ];\n  \n//   lineChartData: ChartDataSets[] = [];\n//   lineChartLabels: Label[] = [];\n//   lineChartOptions: ChartOptions = {\n//     responsive: true,\n//     scales: {\n//       xAxes: [{ \n//         scaleLabel: { display: true, labelString: 'Date' },\n//         ticks: { autoSkip: true, maxRotation: 45 }\n//       }],\n//       yAxes: [{ \n//         scaleLabel: { display: true, labelString: 'Status' }\n//       }]\n//     }\n//   };\n//   lineChartLegend = true;\n//   lineChartType: ChartType = 'line';\n//   lineChartColors: Color[] = [\n//     { borderColor: '#42A5F5', backgroundColor: 'rgba(66, 165, 245, 0.3)' }\n//   ];\n\n//   constructor(private projectService: ProjectService) { }\n\n//   ngOnInit() {\n//         this.projectService.getAllProjects().subscribe(projects => {\n//           this.projects = projects;\n//        });\n//       }\n\n//   onProjectSelect(event: any): void {\n//     this.selectedProjectId = event.target.value;\n//     this.fetchStatusHistory();\n//   }\n\n//   onMonthSelect(event: any): void {\n//     this.selectedMonth = event.target.value;\n//     this.fetchStatusHistory();\n//   }\n\n//   fetchStatusHistory(): void {\n//     if (this.selectedProjectId && this.selectedMonth) {\n//       this.projectService.getStatusHistory(this.selectedProjectId, this.selectedMonth).subscribe(statusHistory => {\n//         this.updateChart(statusHistory);\n//       });\n//     }\n//   }\n\n//   updateChart(statusHistory: any[]): void {\n//     this.lineChartLabels = statusHistory.map(status => status.date);\n//     this.lineChartData = [\n//       {\n//         data: statusHistory.map(status => status.currentStatus),\n//         label: 'Current Status'\n//       }\n//     ];\n//   }\n// }\nimport { Component, OnInit } from '@angular/core';\nimport { ProjectService } from '../Services/project.service';  // Update the path if necessary\nimport { Chart, ChartOptions, ChartType } from 'chart.js';\nimport { Color, Label } from 'ng2-charts';\n  // Importing configuration for Chart.js\n\n@Component({\n  selector: 'app-monthly-status',\n  templateUrl: './monthly-status.component.html',\n  styleUrls: ['./monthly-status.component.css']\n})\nexport class MonthlyStatusComponent implements OnInit {\n  projects: any[] = [];\n  months = [\n    { value: '2024-01', label: 'January 2024' },\n    { value: '2024-02', label: 'February 2024' },\n    { value: '2024-03', label: 'March 2024' },\n    { value: '2024-04', label: 'April 2024' },\n    { value: '2024-05', label: 'May 2024' },\n    { value: '2024-06', label: 'June 2024' },\n    { value: '2024-07', label: 'July 2024' },\n    { value: '2024-08', label: 'August 2024' },\n    { value: '2024-09', label: 'September 2024' },\n    { value: '2024-10', label: 'October 2024' },\n    { value: '2024-11', label: 'November 2024' },\n    { value: '2024-12', label: 'December 2024' }\n  ];\n  selectedProject: number | null = null;  // Option 2: Initialized with null\n  selectedMonth: string | null = null;\n  chart: Chart | undefined;\n\n  constructor(private projectService: ProjectService) { }\n\n  ngOnInit(): void {\n    this.loadProjects();\n  }\n\n  loadProjects(): void {\n    this.projectService.getAllProjects().subscribe((projects: any[]) => {\n      this.projects = projects;\n    });\n  }\n  onProjectSelect(event: Event): void {\n    this.selectedProject = +(event.target as HTMLSelectElement).value;\n    this.loadStatusHistory();\n  }\n\n  onMonthChange(event: Event): void {\n    this.selectedMonth = (event.target as HTMLInputElement).value;\n    this.loadStatusHistory();\n  }\n\n  loadStatusHistory(): void {\n    if (this.selectedProject && this.selectedMonth) {\n      this.projectService.getStatusHistory(this.selectedProject, this.selectedMonth).subscribe(data => {\n        console.log(data);  // Log the received data\n        this.updateChart(data);\n      });\n    }\n  }\n\n  updateChart(data: any[]): void {\n    const labels = data.map((entry, index) => `Day ${index + 1}`);\n    const statusData = data.map(entry => entry[0]);\n\n    if (this.chart) {\n      this.chart.destroy();\n    }\n\n    this.chart = new Chart('lineChart', {\n      type: 'line' as ChartType,\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: 'Current Status',\n            data: statusData,\n            fill: false,\n            borderColor: 'blue',\n            borderWidth: 2,\n            cubicInterpolationMode: 'monotone',\n          }\n        ]\n      },\n      options: {\n        responsive: true,\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Days'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Status'\n            },\n            min: 0,\n            max: 5  // Adjust this based on your status values\n          }\n        }\n      } as ChartOptions\n    });\n  }\n}\n","<div class=\"dashboard-container\">\n  <div class=\"controls\">\n    <label for=\"project-select\">Select Project:</label>\n    <select id=\"project-select\" (change)=\"onProjectSelect($event)\">\n      <option *ngFor=\"let project of projects\" [value]=\"project.id\">{{ project.name }}</option>\n    </select>\n\n    <label for=\"month-select\">Select Month:</label>\n    <select id=\"month-select\" (change)=\"onMonthChange($event)\" style=\"width: 200px;\">\n      <option *ngFor=\"let month of months\" [value]=\"month.value\">{{ month.label }}</option>\n    </select>\n\n  <div class=\"chart-container\">\n    <canvas id=\"lineChart\"></canvas>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}