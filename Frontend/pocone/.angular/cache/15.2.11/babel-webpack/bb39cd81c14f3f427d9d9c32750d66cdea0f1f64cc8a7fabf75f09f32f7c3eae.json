{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet DashboardComponent = class DashboardComponent {\n  constructor(http) {\n    this.http = http;\n    // Bar chart configuration\n    this.barChartOptions = {\n      responsive: true\n    };\n    this.barChartLabels = [];\n    this.barChartData = [];\n    this.barChartType = 'bar';\n    this.barChartLegend = true;\n    // Pie chart configuration\n    this.pieChartOptions = {\n      responsive: true\n    };\n    this.pieChartLabels = [];\n    this.pieChartData = [];\n    this.pieChartType = 'pie';\n    this.pieChartLegend = true;\n  }\n  ngOnInit() {\n    this.fetchProjectData();\n  }\n  fetchProjectData() {\n    // Replace with your API endpoint\n    this.http.get('http://localhost:8080/projects').subscribe(data => {\n      this.updateCharts(data);\n    });\n  }\n  updateCharts(data) {\n    this.barChartLabels = data.map(project => project.name);\n    this.pieChartLabels = this.barChartLabels;\n    const statuses = ['On Track', 'Slow', 'Risk', 'Deep Risk'];\n    const statusColors = {\n      'On Track': 'green',\n      'Slow': 'yellow',\n      'Risk': 'brown',\n      'Deep Risk': 'red'\n    };\n    const barData = statuses.map(status => ({\n      data: data.filter(project => project.status === status).map(project => project.name),\n      label: status,\n      backgroundColor: statusColors[status]\n    }));\n    const pieData = statuses.map(status => ({\n      data: data.filter(project => project.status === status).length,\n      label: status,\n      backgroundColor: statusColors[status]\n    }));\n    this.barChartData = [{\n      data: data.map(project => statuses.indexOf(project.status)),\n      label: 'Project Status'\n    }];\n    this.pieChartData = pieData;\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);\nexport { DashboardComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAS1C,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAmB7BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAlBxB;IACA,oBAAe,GAAG;MAChBC,UAAU,EAAE;KACb;IACD,mBAAc,GAAa,EAAE;IAC7B,iBAAY,GAAU,EAAE;IACxB,iBAAY,GAAG,KAAK;IACpB,mBAAc,GAAG,IAAI;IAErB;IACA,oBAAe,GAAG;MAChBA,UAAU,EAAE;KACb;IACD,mBAAc,GAAa,EAAE;IAC7B,iBAAY,GAAU,EAAE;IACxB,iBAAY,GAAG,KAAK;IACpB,mBAAc,GAAG,IAAI;EAEkB;EAEvCC,QAAQ;IACN,IAAI,CAACC,gBAAgB,EAAE;EACzB;EAEAA,gBAAgB;IACd;IACA,IAAI,CAACH,IAAI,CAACI,GAAG,CAAQ,gCAAgC,CAAC,CAACC,SAAS,CAACC,IAAI,IAAG;MACtE,IAAI,CAACC,YAAY,CAACD,IAAI,CAAC;IACzB,CAAC,CAAC;EACJ;EAEAC,YAAY,CAACD,IAAW;IACtB,IAAI,CAACE,cAAc,GAAGF,IAAI,CAACG,GAAG,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,CAAC;IACvD,IAAI,CAACC,cAAc,GAAG,IAAI,CAACJ,cAAc;IAEzC,MAAMK,QAAQ,GAAG,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC;IAC1D,MAAMC,YAAY,GAAG;MACnB,UAAU,EAAE,OAAO;MACnB,MAAM,EAAE,QAAQ;MAChB,MAAM,EAAE,OAAO;MACf,WAAW,EAAE;KACd;IAED,MAAMC,OAAO,GAAGF,QAAQ,CAACJ,GAAG,CAACO,MAAM,KAAK;MACtCV,IAAI,EAAEA,IAAI,CAACW,MAAM,CAACP,OAAO,IAAIA,OAAO,CAACM,MAAM,KAAKA,MAAM,CAAC,CAACP,GAAG,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,CAAC;MACpFO,KAAK,EAAEF,MAAM;MACbG,eAAe,EAAEL,YAAY,CAACE,MAAM;KACrC,CAAC,CAAC;IAEH,MAAMI,OAAO,GAAGP,QAAQ,CAACJ,GAAG,CAACO,MAAM,KAAK;MACtCV,IAAI,EAAEA,IAAI,CAACW,MAAM,CAACP,OAAO,IAAIA,OAAO,CAACM,MAAM,KAAKA,MAAM,CAAC,CAACK,MAAM;MAC9DH,KAAK,EAAEF,MAAM;MACbG,eAAe,EAAEL,YAAY,CAACE,MAAM;KACrC,CAAC,CAAC;IAEH,IAAI,CAACM,YAAY,GAAG,CAAC;MAAEhB,IAAI,EAAEA,IAAI,CAACG,GAAG,CAACC,OAAO,IAAIG,QAAQ,CAACU,OAAO,CAACb,OAAO,CAACM,MAAM,CAAC,CAAC;MAAEE,KAAK,EAAE;IAAgB,CAAE,CAAC;IAC9G,IAAI,CAACM,YAAY,GAAGJ,OAAO;EAC7B;CACD;AA3DYtB,kBAAkB,eAL9BD,SAAS,CAAC;EACT4B,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,GACW7B,kBAAkB,CA2D9B;SA3DYA,kBAAkB","names":["Component","DashboardComponent","constructor","http","responsive","ngOnInit","fetchProjectData","get","subscribe","data","updateCharts","barChartLabels","map","project","name","pieChartLabels","statuses","statusColors","barData","status","filter","label","backgroundColor","pieData","length","barChartData","indexOf","pieChartData","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/dashboard/dashboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ChartOptions, ChartType } from 'chart.js';\nimport { Label } from 'ng2-charts';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n  // Bar chart configuration\n  barChartOptions = {\n    responsive: true,\n  };\n  barChartLabels: string[] = [];\n  barChartData: any[] = [];\n  barChartType = 'bar';\n  barChartLegend = true;\n\n  // Pie chart configuration\n  pieChartOptions = {\n    responsive: true,\n  };\n  pieChartLabels: string[] = [];\n  pieChartData: any[] = [];\n  pieChartType = 'pie';\n  pieChartLegend = true;\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit(): void {\n    this.fetchProjectData();\n  }\n\n  fetchProjectData(): void {\n    // Replace with your API endpoint\n    this.http.get<any[]>('http://localhost:8080/projects').subscribe(data => {\n      this.updateCharts(data);\n    });\n  }\n\n  updateCharts(data: any[]): void {\n    this.barChartLabels = data.map(project => project.name);\n    this.pieChartLabels = this.barChartLabels;\n\n    const statuses = ['On Track', 'Slow', 'Risk', 'Deep Risk'];\n    const statusColors = {\n      'On Track': 'green',\n      'Slow': 'yellow',\n      'Risk': 'brown',\n      'Deep Risk': 'red'\n    };\n\n    const barData = statuses.map(status => ({\n      data: data.filter(project => project.status === status).map(project => project.name),\n      label: status,\n      backgroundColor: statusColors[status]\n    }));\n\n    const pieData = statuses.map(status => ({\n      data: data.filter(project => project.status === status).length,\n      label: status,\n      backgroundColor: statusColors[status]\n    }));\n\n    this.barChartData = [{ data: data.map(project => statuses.indexOf(project.status)), label: 'Project Status' }];\n    this.pieChartData = pieData;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}