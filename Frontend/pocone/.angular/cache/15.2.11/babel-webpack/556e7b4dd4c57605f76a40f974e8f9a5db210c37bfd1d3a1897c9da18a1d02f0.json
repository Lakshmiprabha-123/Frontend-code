{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet StatusLineChartComponent = class StatusLineChartComponent {\n  constructor(projectService) {\n    this.projectService = projectService;\n    this.projects = [];\n    this.lineChartData = [];\n    this.lineChartLabels = [];\n    this.selectedProjectId = 0;\n    this.selectedYear = new Date().getFullYear();\n    this.years = [];\n    this.months = [{\n      value: 1,\n      name: 'January'\n    }, {\n      value: 2,\n      name: 'February'\n    }, {\n      value: 3,\n      name: 'March'\n    }, {\n      value: 4,\n      name: 'April'\n    }, {\n      value: 5,\n      name: 'May'\n    }, {\n      value: 6,\n      name: 'June'\n    }, {\n      value: 7,\n      name: 'July'\n    }, {\n      value: 8,\n      name: 'August'\n    }, {\n      value: 9,\n      name: 'September'\n    }, {\n      value: 10,\n      name: 'October'\n    }, {\n      value: 11,\n      name: 'November'\n    }, {\n      value: 12,\n      name: 'December'\n    }];\n    this.lineChartOptions = {\n      responsive: true,\n      scales: {\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Month'\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            min: 0,\n            max: 5,\n            stepSize: 1,\n            callback: value => {\n              const statuses = ['Undefined', 'Not Yet Started', 'Deep Risk', 'Risk', 'Slow', 'On Track'];\n              return statuses[value];\n            }\n          },\n          scaleLabel: {\n            display: true,\n            labelString: 'Status'\n          }\n        }]\n      },\n      legend: {\n        display: true,\n        position: 'bottom',\n        labels: {\n          fontColor: 'black'\n        }\n      },\n      tooltips: {\n        callbacks: {\n          label: tooltipItem => {\n            const statuses = ['Undefined', 'Not Yet Started', 'Deep Risk', 'Risk', 'Slow', 'On Track'];\n            return statuses[tooltipItem.yLabel] || 'Unknown';\n          }\n        }\n      }\n    };\n    this.lineChartType = 'line';\n  }\n  ngOnInit() {\n    const currentYear = new Date().getFullYear();\n    this.years = Array.from({\n      length: 10\n    }, (_, i) => currentYear - i);\n    this.projectService.getAllProjects().subscribe(projects => {\n      this.projects = projects;\n      if (projects.length > 0 && projects[0].id !== undefined) {\n        this.selectedProjectId = projects[0].id;\n        this.fetchStatusHistory();\n      }\n    });\n  }\n  fetchStatusHistory() {\n    if (this.selectedProjectId && this.selectedYear) {\n      this.projectService.getStatusHistoryByYear(this.selectedProjectId, this.selectedYear).subscribe(statusData => {\n        const statusMap = new Array(12).fill(0);\n        statusData.forEach(item => {\n          const monthIndex = item.month - 1;\n          statusMap[monthIndex] = this.mapStatusToValue(item.currentStatus);\n        });\n        this.lineChartLabels = this.months.map(m => m.name);\n        this.lineChartData = [{\n          data: statusMap,\n          label: `Project ${this.selectedProjectId} Status History (${this.selectedYear})`,\n          fill: false,\n          borderColor: 'blue',\n          backgroundColor: 'rgba(0, 0, 255, 0.2)'\n        }];\n      });\n    }\n  }\n  createLabelsForStatusHistory(dataLength) {\n    return Array.from({\n      length: dataLength\n    }, (_, i) => `Month ${i + 1}`);\n  }\n  mapStatusToValue(status) {\n    switch (status) {\n      case 'On Track':\n        return 5;\n      case 'Slow':\n        return 4;\n      case 'Risk':\n        return 3;\n      case 'Deep Risk':\n        return 2;\n      case 'Not Yet Started':\n        return 1;\n      default:\n        return 0;\n    }\n  }\n};\nStatusLineChartComponent = __decorate([Component({\n  selector: 'app-status-line-chart',\n  templateUrl: './status-line-chart.component.html',\n  styleUrls: ['./status-line-chart.component.css']\n})], StatusLineChartComponent);\nexport { StatusLineChartComponent };","map":{"version":3,"mappings":"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","names":["Component","StatusLineChartComponent","constructor","projectService","Date","getFullYear","value","name","responsive","scales","xAxes","scaleLabel","display","labelString","yAxes","ticks","min","max","stepSize","callback","statuses","legend","position","labels","fontColor","tooltips","callbacks","label","tooltipItem","yLabel","ngOnInit","currentYear","years","Array","from","length","_","i","getAllProjects","subscribe","projects","id","undefined","selectedProjectId","fetchStatusHistory","selectedYear","getStatusHistoryByYear","statusData","statusMap","fill","forEach","item","monthIndex","month","mapStatusToValue","currentStatus","lineChartLabels","months","map","m","lineChartData","data","borderColor","backgroundColor","createLabelsForStatusHistory","dataLength","status","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/status-line-chart/status-line-chart.component.ts"],"sourcesContent":["\nimport { Component, OnInit } from '@angular/core';\nimport { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { ProjectService } from '../Services/project.service';\nimport { Project } from '../Models/project.model';\n\n@Component({\n  selector: 'app-status-line-chart',\n  templateUrl: './status-line-chart.component.html',\n  styleUrls: ['./status-line-chart.component.css']\n})\nexport class StatusLineChartComponent implements OnInit {\n  public projects: any[] = [];\n  public lineChartData: ChartDataSets[] = [];\n  public lineChartLabels: Label[] = [];\n  public selectedProjectId: number = 0;\n  public selectedYear: number = new Date().getFullYear();\n  public years: number[] = [];\n  public months = [\n    { value: 1, name: 'January' },\n    { value: 2, name: 'February' },\n    { value: 3, name: 'March' },\n    { value: 4, name: 'April' },\n    { value: 5, name: 'May' },\n    { value: 6, name: 'June' },\n    { value: 7, name: 'July' },\n    { value: 8, name: 'August' },\n    { value: 9, name: 'September' },\n    { value: 10, name: 'October' },\n    { value: 11, name: 'November' },\n    { value: 12, name: 'December' }\n  ];\n  public lineChartOptions: ChartOptions = {\n    responsive: true,\n    scales: {\n      xAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Month'\n        }\n      }],\n      yAxes: [{\n        ticks: {\n          min: 0,\n          max: 5,\n          stepSize: 1,\n          callback: (value: number) => {\n            const statuses = ['Undefined','Not Yet Started', 'Deep Risk', 'Risk', 'Slow', 'On Track'];\n            return statuses[value];\n          }\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Status'\n        }\n      }]\n    },\n    legend: {\n      display: true,\n      position: 'bottom',\n      labels: {\n        fontColor: 'black'\n      }\n    },\n    tooltips: {\n      callbacks: {\n        label: (tooltipItem) => {\n          const statuses = ['Undefined','Not Yet Started', 'Deep Risk', 'Risk', 'Slow', 'On Track'];\n          return statuses[tooltipItem.yLabel as number] || 'Unknown';\n        }\n      }\n    }\n  };\n  public lineChartType: ChartType = 'line';\n\n  constructor(private projectService: ProjectService) { }\n\n  ngOnInit(): void {\n    const currentYear = new Date().getFullYear();\n    this.years = Array.from({ length: 10 }, (_, i) => currentYear - i);\n\n    this.projectService.getAllProjects().subscribe((projects: any[]) => {\n      this.projects = projects;\n      if (projects.length > 0 && projects[0].id !== undefined) {\n        this.selectedProjectId = projects[0].id!;\n        this.fetchStatusHistory();\n      }\n    });\n  }\n\n  fetchStatusHistory(): void {\n    if (this.selectedProjectId && this.selectedYear) {\n      this.projectService.getStatusHistoryByYear(this.selectedProjectId, this.selectedYear).subscribe((statusData: { month: number, currentStatus: string }[]) => {\n        \n        const statusMap = new Array(12).fill(0);\n\n        statusData.forEach(item => {\n          \n          const monthIndex = item.month - 1;\n          statusMap[monthIndex] = this.mapStatusToValue(item.currentStatus);\n        });\n\n        this.lineChartLabels = this.months.map(m => m.name);\n        this.lineChartData = [{\n          data: statusMap,\n          label: `Project ${this.selectedProjectId} Status History (${this.selectedYear})`,\n          fill: false,\n          borderColor: 'blue',\n          backgroundColor: 'rgba(0, 0, 255, 0.2)',\n        }];\n      });\n    }\n  }\n\n  private createLabelsForStatusHistory(dataLength: number): Label[] {\n    return Array.from({ length: dataLength }, (_, i) => `Month ${i + 1}`);\n  }\n\n  private mapStatusToValue(status: string): number {\n    switch (status) {\n      case 'On Track': return 5;\n      case 'Slow': return 4;\n      case 'Risk': return 3;\n      case 'Deep Risk': return 2;\n      case 'Not Yet Started': return 1;\n      default: return 0;\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}