{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/project.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"ng2-charts\";\nfunction StatusLineChartComponent_option_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const project_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", project_r2.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(project_r2.name);\n  }\n}\nfunction StatusLineChartComponent_option_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const year_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", year_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(year_r3);\n  }\n}\nexport class StatusLineChartComponent {\n  constructor(projectService) {\n    this.projectService = projectService;\n    this.projects = [];\n    this.lineChartData = [];\n    this.lineChartLabels = [];\n    this.selectedProjectId = 0;\n    this.selectedYear = new Date().getFullYear();\n    this.years = [];\n    this.months = [{\n      value: 1,\n      name: 'January'\n    }, {\n      value: 2,\n      name: 'February'\n    }, {\n      value: 3,\n      name: 'March'\n    }, {\n      value: 4,\n      name: 'April'\n    }, {\n      value: 5,\n      name: 'May'\n    }, {\n      value: 6,\n      name: 'June'\n    }, {\n      value: 7,\n      name: 'July'\n    }, {\n      value: 8,\n      name: 'August'\n    }, {\n      value: 9,\n      name: 'September'\n    }, {\n      value: 10,\n      name: 'October'\n    }, {\n      value: 11,\n      name: 'November'\n    }, {\n      value: 12,\n      name: 'December'\n    }];\n    this.lineChartOptions = {\n      responsive: true,\n      scales: {\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Month'\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            min: 0,\n            max: 5,\n            stepSize: 1,\n            callback: value => {\n              const statuses = ['Undefined', 'Not Yet Started', 'Deep Risk', 'Risk', 'Slow', 'On Track'];\n              return statuses[value];\n            }\n          }\n        }]\n      },\n      legend: {\n        display: true,\n        position: 'bottom',\n        labels: {\n          fontColor: 'black'\n        }\n      },\n      tooltips: {\n        callbacks: {\n          label: tooltipItem => {\n            const statuses = ['Undefined', 'Not Yet Started', 'Deep Risk', 'Risk', 'Slow', 'On Track'];\n            return statuses[tooltipItem.yLabel] || 'Unknown';\n          }\n        }\n      }\n    };\n    this.lineChartType = 'line';\n  }\n  ngOnInit() {\n    const currentYear = new Date().getFullYear();\n    this.years = Array.from({\n      length: 10\n    }, (_, i) => currentYear - i);\n    this.projectService.getAllProjects().subscribe(projects => {\n      this.projects = projects;\n      if (projects.length > 0 && projects[0].id !== undefined) {\n        this.selectedProjectId = projects[0].id;\n        this.fetchStatusHistory();\n      }\n    });\n  }\n  fetchStatusHistory() {\n    if (this.selectedProjectId && this.selectedYear) {\n      this.projectService.getStatusHistoryByYear(this.selectedProjectId, this.selectedYear).subscribe(statusData => {\n        const flattenedData = Array(12).fill(0); // Initialize data array for 12 months\n        statusData.forEach(item => {\n          const monthIndex = item.month - 1; // Adjust month to be zero-indexed\n          flattenedData[monthIndex] = this.mapStatusToValue(item.status);\n        });\n        this.lineChartLabels = this.createLabelsForStatusHistory();\n        this.lineChartData = [{\n          data: flattenedData,\n          label: `Project ${this.selectedProjectId} Status History (${this.selectedYear})`,\n          fill: false,\n          borderColor: 'blue',\n          backgroundColor: 'rgba(0, 0, 255, 0.2)'\n        }];\n      });\n    }\n  }\n  createLabelsForStatusHistory(dataLength) {\n    return Array.from({\n      length: dataLength\n    }, (_, i) => `Month ${i + 1}`);\n  }\n  mapStatusToValue(status) {\n    switch (status) {\n      case 'On Track':\n        return 5;\n      case 'Slow':\n        return 4;\n      case 'Risk':\n        return 3;\n      case 'Deep Risk':\n        return 2;\n      case 'Not Yet Started':\n        return 1;\n      default:\n        return 0;\n    }\n  }\n  static #_ = this.ɵfac = function StatusLineChartComponent_Factory(t) {\n    return new (t || StatusLineChartComponent)(i0.ɵɵdirectiveInject(i1.ProjectService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: StatusLineChartComponent,\n    selectors: [[\"app-status-line-chart\"]],\n    decls: 13,\n    vars: 9,\n    consts: [[1, \"dashboard-container\"], [1, \"chart-container\"], [3, \"ngModel\", \"ngModelChange\", \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [2, \"display\", \"block\"], [\"baseChart\", \"\", 3, \"datasets\", \"labels\", \"options\", \"legend\", \"chartType\"], [3, \"value\"]],\n    template: function StatusLineChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"label\");\n        i0.ɵɵtext(3, \"Select Project:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"select\", 2);\n        i0.ɵɵlistener(\"ngModelChange\", function StatusLineChartComponent_Template_select_ngModelChange_4_listener($event) {\n          return ctx.selectedProjectId = $event;\n        })(\"change\", function StatusLineChartComponent_Template_select_change_4_listener() {\n          return ctx.fetchStatusHistory();\n        });\n        i0.ɵɵtemplate(5, StatusLineChartComponent_option_5_Template, 2, 2, \"option\", 3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"div\")(7, \"label\");\n        i0.ɵɵtext(8, \"Select Year:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"select\", 2);\n        i0.ɵɵlistener(\"ngModelChange\", function StatusLineChartComponent_Template_select_ngModelChange_9_listener($event) {\n          return ctx.selectedYear = $event;\n        })(\"change\", function StatusLineChartComponent_Template_select_change_9_listener() {\n          return ctx.fetchStatusHistory();\n        });\n        i0.ɵɵtemplate(10, StatusLineChartComponent_option_10_Template, 2, 2, \"option\", 3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"div\", 4);\n        i0.ɵɵelement(12, \"canvas\", 5);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.selectedProjectId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.projects);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.selectedYear);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.years);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"datasets\", ctx.lineChartData)(\"labels\", ctx.lineChartLabels)(\"options\", ctx.lineChartOptions)(\"legend\", true)(\"chartType\", ctx.lineChartType);\n      }\n    },\n    dependencies: [i2.NgForOf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgModel, i4.BaseChartDirective],\n    styles: [\".dashboard-container[_ngcontent-%COMP%] {\\n    padding: 20px;\\n  }\\n  \\n  .controls[_ngcontent-%COMP%] {\\n    margin-bottom: 20px;\\n    display: flex;\\n    gap: 20px;\\n  }\\n  \\n  .chart-container[_ngcontent-%COMP%] {\\n    width: 100%;\\n    max-width: 800px;\\n    margin: 0 auto;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc3RhdHVzLWxpbmUtY2hhcnQvc3RhdHVzLWxpbmUtY2hhcnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGFBQWE7RUFDZjs7RUFFQTtJQUNFLG1CQUFtQjtJQUNuQixhQUFhO0lBQ2IsU0FBUztFQUNYOztFQUVBO0lBQ0UsV0FBVztJQUNYLGdCQUFnQjtJQUNoQixjQUFjO0VBQ2hCIiwic291cmNlc0NvbnRlbnQiOlsiLmRhc2hib2FyZC1jb250YWluZXIge1xuICAgIHBhZGRpbmc6IDIwcHg7XG4gIH1cbiAgXG4gIC5jb250cm9scyB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGdhcDogMjBweDtcbiAgfVxuICBcbiAgLmNoYXJ0LWNvbnRhaW5lciB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWF4LXdpZHRoOiA4MDBweDtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgfVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["i0","StatusLineChartComponent","constructor","projectService","Date","getFullYear","value","name","responsive","scales","xAxes","scaleLabel","display","labelString","yAxes","ticks","min","max","stepSize","callback","statuses","legend","position","labels","fontColor","tooltips","callbacks","label","tooltipItem","yLabel","ngOnInit","currentYear","years","Array","from","length","_","i","getAllProjects","subscribe","projects","id","undefined","selectedProjectId","fetchStatusHistory","selectedYear","getStatusHistoryByYear","statusData","flattenedData","fill","forEach","item","monthIndex","month","mapStatusToValue","status","lineChartLabels","createLabelsForStatusHistory","lineChartData","data","borderColor","backgroundColor","dataLength","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/status-line-chart/status-line-chart.component.html","/home/decodersmdu/pocone/src/app/status-line-chart/status-line-chart.component.ts"],"sourcesContent":["<div class=\"dashboard-container\">\n    <div class=\"chart-container\">\n        \n    <label>Select Project:</label>\n    <select [(ngModel)]=\"selectedProjectId\" (change)=\"fetchStatusHistory()\">\n      <option *ngFor=\"let project of projects\" [value]=\"project.id\">{{ project.name }}</option>\n    </select>\n  </div>\n  \n  <div>\n    <label>Select Year:</label>\n    <select [(ngModel)]=\"selectedYear\" (change)=\"fetchStatusHistory()\">\n      <option *ngFor=\"let year of years\" [value]=\"year\">{{ year }}</option>\n    </select>\n  </div>\n  \n  <div style=\"display: block;\">\n    <canvas baseChart\n            [datasets]=\"lineChartData\"\n            [labels]=\"lineChartLabels\"\n            [options]=\"lineChartOptions\"\n            [legend]=\"true\"\n            [chartType]=\"lineChartType\">\n    </canvas>\n  </div>\n  </div>\n  \n  ","\nimport { Component, OnInit } from '@angular/core';\nimport { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { ProjectService } from '../Services/project.service';\nimport { Project } from '../Models/project.model';\n\n@Component({\n  selector: 'app-status-line-chart',\n  templateUrl: './status-line-chart.component.html',\n  styleUrls: ['./status-line-chart.component.css']\n})\nexport class StatusLineChartComponent implements OnInit {\n  public projects: any[] = [];\n  public lineChartData: ChartDataSets[] = [];\n  public lineChartLabels: Label[] = [];\n  public selectedProjectId: number = 0;\n  public selectedYear: number = new Date().getFullYear();\n  public years: number[] = [];\n  public months = [\n    { value: 1, name: 'January' },\n    { value: 2, name: 'February' },\n    { value: 3, name: 'March' },\n    { value: 4, name: 'April' },\n    { value: 5, name: 'May' },\n    { value: 6, name: 'June' },\n    { value: 7, name: 'July' },\n    { value: 8, name: 'August' },\n    { value: 9, name: 'September' },\n    { value: 10, name: 'October' },\n    { value: 11, name: 'November' },\n    { value: 12, name: 'December' }\n  ];\n  public lineChartOptions: ChartOptions = {\n    responsive: true,\n    scales: {\n      xAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Month'\n        }\n      }],\n      yAxes: [{\n        ticks: {\n          min: 0,\n          max: 5,\n          stepSize: 1,\n          callback: (value: number) => {\n            const statuses = ['Undefined','Not Yet Started', 'Deep Risk', 'Risk', 'Slow', 'On Track'];\n            return statuses[value];\n          }\n        }\n      }]\n    },\n    legend: {\n      display: true,\n      position: 'bottom',\n      labels: {\n        fontColor: 'black'\n      }\n    },\n    tooltips: {\n      callbacks: {\n        label: (tooltipItem) => {\n          const statuses = ['Undefined','Not Yet Started', 'Deep Risk', 'Risk', 'Slow', 'On Track'];\n          return statuses[tooltipItem.yLabel as number] || 'Unknown';\n        }\n      }\n    }\n  };\n  public lineChartType: ChartType = 'line';\n\n  constructor(private projectService: ProjectService) { }\n\n  ngOnInit(): void {\n    const currentYear = new Date().getFullYear();\n    this.years = Array.from({ length: 10 }, (_, i) => currentYear - i);\n\n    this.projectService.getAllProjects().subscribe((projects: any[]) => {\n      this.projects = projects;\n      if (projects.length > 0 && projects[0].id !== undefined) {\n        this.selectedProjectId = projects[0].id!;\n        this.fetchStatusHistory();\n      }\n    });\n  }\n\n  fetchStatusHistory(): void {\n    if (this.selectedProjectId && this.selectedYear) {\n      this.projectService.getStatusHistoryByYear(this.selectedProjectId, this.selectedYear).subscribe((statusData: { month: number, status: string }[]) => {\n        const flattenedData = Array(12).fill(0); // Initialize data array for 12 months\n\n        statusData.forEach(item => {\n          const monthIndex = item.month - 1; // Adjust month to be zero-indexed\n          flattenedData[monthIndex] = this.mapStatusToValue(item.status);\n        });\n\n        this.lineChartLabels = this.createLabelsForStatusHistory();\n        this.lineChartData = [{\n          data: flattenedData,\n          label: `Project ${this.selectedProjectId} Status History (${this.selectedYear})`,\n          fill: false,\n          borderColor: 'blue',\n          backgroundColor: 'rgba(0, 0, 255, 0.2)',\n        }];\n      });\n    }\n  }\n\n  private createLabelsForStatusHistory(dataLength: number): Label[] {\n    return Array.from({ length: dataLength }, (_, i) => `Month ${i + 1}`);\n  }\n\n  private mapStatusToValue(status: string): number {\n    switch (status) {\n      case 'On Track': return 5;\n      case 'Slow': return 4;\n      case 'Risk': return 3;\n      case 'Deep Risk': return 2;\n      case 'Not Yet Started': return 1;\n      default: return 0;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}