{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet WeeklyStatusComponent = class WeeklyStatusComponent {\n  constructor(http) {\n    this.http = http;\n  }\n  fetchWeeklyStatus() {\n    const projectId = this.getProjectIdByName(this.projectName); // Add your logic to get projectId by name\n    if (projectId) {\n      const url = `http://localhost:8080/projects/${projectId}/weekly-status-by-month?month=${this.month}&year=${this.year}`;\n      this.http.get(url).subscribe(data => {\n        this.chartData = data;\n        this.renderBarChart();\n      });\n    }\n  }\n  renderBarChart() {\n    const weekNumbers = this.chartData.map(d => d.weekNumber);\n    const statuses = this.chartData.map(d => d.currentStatus);\n    new Chart('barChart', {\n      type: 'bar',\n      data: {\n        labels: weekNumbers,\n        datasets: [{\n          label: 'Current Status',\n          data: statuses.map(status => this.getStatusValue(status)),\n          backgroundColor: statuses.map(status => this.getStatusColor(status))\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true,\n            ticks: {\n              callback: value => this.getStatusLabel(value)\n            }\n          }\n        },\n        plugins: {\n          tooltip: {\n            callbacks: {\n              label: context => this.getStatusLabel(context.raw)\n            }\n          }\n        }\n      }\n    });\n  }\n  getStatusValue(status) {\n    const statusMap = {\n      'On Track': 1,\n      'Slow': 2,\n      'Risk': 3,\n      'Deep Risk': 4\n    };\n    return statusMap[status] || 0;\n  }\n  getStatusLabel(value) {\n    const labelMap = {\n      1: 'On Track',\n      2: 'Slow',\n      3: 'Risk',\n      4: 'Deep Risk'\n    };\n    return labelMap[value] || 'Unknown';\n  }\n  getStatusColor(status) {\n    const colorMap = {\n      'On Track': 'green',\n      'Slow': 'orange',\n      'Risk': 'yellow',\n      'Deep Risk': 'red'\n    };\n    return colorMap[status] || 'gray';\n  }\n  getProjectIdByName(name) {\n    // Implement the logic to get project ID by name\n    // This could be an API call or a local lookup\n    return 15; // example\n  }\n};\n\nWeeklyStatusComponent = __decorate([Component({\n  selector: 'app-weekly-status',\n  templateUrl: './weekly-status.component.html',\n  styleUrls: ['./weekly-status.component.css']\n})], WeeklyStatusComponent);\nexport { WeeklyStatusComponent };","map":{"version":3,"mappings":"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","names":["Component","WeeklyStatusComponent","constructor","http","fetchWeeklyStatus","projectId","getProjectIdByName","projectName","url","month","year","get","subscribe","data","chartData","renderBarChart","weekNumbers","map","d","weekNumber","statuses","currentStatus","Chart","type","labels","datasets","label","status","getStatusValue","backgroundColor","getStatusColor","options","scales","y","beginAtZero","ticks","callback","value","getStatusLabel","plugins","tooltip","callbacks","context","raw","statusMap","labelMap","colorMap","name","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/weekly-status/weekly-status.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { ProjectService } from '../Services/project.service';\nimport { Project } from '../Models/project.model';\n\n@Component({\n  selector: 'app-weekly-status',\n  templateUrl: './weekly-status.component.html',\n  styleUrls: ['./weekly-status.component.css']\n})\nexport class WeeklyStatusComponent {\n  projectName: string;\n  month: number;\n  year: number;\n  chartData: any;\n\n  constructor(private http: HttpClient) {}\n\n  fetchWeeklyStatus() {\n    const projectId = this.getProjectIdByName(this.projectName); // Add your logic to get projectId by name\n\n    if (projectId) {\n      const url = `http://localhost:8080/projects/${projectId}/weekly-status-by-month?month=${this.month}&year=${this.year}`;\n\n      this.http.get<any[]>(url).subscribe(data => {\n        this.chartData = data;\n        this.renderBarChart();\n      });\n    }\n  }\n\n  renderBarChart() {\n    const weekNumbers = this.chartData.map(d => d.weekNumber);\n    const statuses = this.chartData.map(d => d.currentStatus);\n\n    new Chart('barChart', {\n      type: 'bar',\n      data: {\n        labels: weekNumbers,\n        datasets: [{\n          label: 'Current Status',\n          data: statuses.map(status => this.getStatusValue(status)),\n          backgroundColor: statuses.map(status => this.getStatusColor(status)),\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true,\n            ticks: {\n              callback: (value) => this.getStatusLabel(value),\n            }\n          }\n        },\n        plugins: {\n          tooltip: {\n            callbacks: {\n              label: (context) => this.getStatusLabel(context.raw),\n            }\n          }\n        }\n      }\n    });\n  }\n\n  getStatusValue(status: string): number {\n    const statusMap = { 'On Track': 1, 'Slow': 2, 'Risk': 3, 'Deep Risk': 4 };\n    return statusMap[status] || 0;\n  }\n\n  getStatusLabel(value: number): string {\n    const labelMap = { 1: 'On Track', 2: 'Slow', 3: 'Risk', 4: 'Deep Risk' };\n    return labelMap[value] || 'Unknown';\n  }\n\n  getStatusColor(status: string): string {\n    const colorMap = { 'On Track': 'green', 'Slow': 'orange', 'Risk': 'yellow', 'Deep Risk': 'red' };\n    return colorMap[status] || 'gray';\n  }\n\n  getProjectIdByName(name: string): number {\n    // Implement the logic to get project ID by name\n    // This could be an API call or a local lookup\n    return 15; // example\n  }\n}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}