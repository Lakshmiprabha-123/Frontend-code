{"ast":null,"code":"\"use strict\";\n\n// import { Component, OnInit } from '@angular/core';\n// import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n// import { Label } from 'ng2-charts';\n// import { ProjectService } from '../Services/project.service';\n// import { Project } from '../Models/project.model';\n// @Component({\n//   selector: 'app-project-status-chart',\n//   templateUrl: './project-status-chart.component.html',\n//   styleUrls: ['./project-status-chart.component.css']\n// })\n// export class ProjectStatusChartComponent implements OnInit {\n//   projects: Project[] = [];\n//   public barChartOptions: ChartOptions = {\n//     responsive: true,\n//   };\n//   public barChartLabels: Label[] = [];\n//   public barChartType: ChartType = 'bar';\n//   public barChartLegend = true;\n//   public barChartPlugins = [];\n//   public barChartData: ChartDataSets[] = [\n//     { data: [], label: 'Project Status' }\n//   ];\n//   constructor(private projectService: ProjectService) { }\n//   ngOnInit(): void {\n//     this.projectService.getAllProjects().subscribe((projects: Project[]) => {\n//       this.projects = projects;\n//       this.fetchProjectStatuses();\n//     });\n//   }\n//   fetchProjectStatuses() {\n//     // Ensure that project.id is defined and is a number\n//     const statusRequests = this.projects\n//       .filter(project => project.id !== undefined) // Filter out projects with undefined ids\n//       .map(project =>\n//         this.projectService.getCurrentStatus(project.id!)\n//           .toPromise()\n//           .then(status => status?.status || 'Unknown') // Handle undefined status\n//       );\n//     Promise.all(statusRequests).then(statusResponses => {\n//       // Filter out 'Unknown' values if needed\n//       this.updateChart(statusResponses);\n//     }).catch(error => {\n//       console.error('Error fetching project statuses:', error);\n//     });\n//   }\n//   updateChart(statusResponses: string[]) {\n//     const projectNames = this.projects.map(project => project.name);\n//     const projectStatuses = statusResponses.map(status => {\n//       switch (status) {\n//         case 'On Track':\n//           return 5;\n//         case 'Slow':\n//           return 4;\n//         case 'Risk':\n//           return 3;\n//         case 'Deep Risk':\n//           return 2;\n//         case 'Not Yet Started':\n//           return 1;\n//         default:\n//           return 0;\n//       }\n//     });\n//      // Define colors for each status\n//   const backgroundColors = statusResponses.map(status => {\n//     switch (status) {\n//       case 'On Track':\n//         return 'green';\n//       case 'Slow':\n//         return 'orange';\n//       case 'Risk':\n//         return 'yellow';\n//       case 'Deep Risk':\n//         return 'red';\n//       default:\n//         return 'gray';\n//     }\n//   });\n//     this.barChartLabels = projectNames;\n//     this.barChartData = [\n//       { data: projectStatuses, label: 'Project Status', backgroundColor: backgroundColors }\n//     ];\n//   }\n// }","map":{"version":3,"mappings":";;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","names":[],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/project-status-chart/project-status-chart.component.ts"],"sourcesContent":["// import { Component, OnInit } from '@angular/core';\n// import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n// import { Label } from 'ng2-charts';\n// import { ProjectService } from '../Services/project.service';\n// import { Project } from '../Models/project.model';\n\n// @Component({\n//   selector: 'app-project-status-chart',\n//   templateUrl: './project-status-chart.component.html',\n//   styleUrls: ['./project-status-chart.component.css']\n// })\n// export class ProjectStatusChartComponent implements OnInit {\n//   projects: Project[] = [];\n//   public barChartOptions: ChartOptions = {\n//     responsive: true,\n//   };\n//   public barChartLabels: Label[] = [];\n//   public barChartType: ChartType = 'bar';\n//   public barChartLegend = true;\n//   public barChartPlugins = [];\n\n//   public barChartData: ChartDataSets[] = [\n//     { data: [], label: 'Project Status' }\n//   ];\n\n//   constructor(private projectService: ProjectService) { }\n\n//   ngOnInit(): void {\n//     this.projectService.getAllProjects().subscribe((projects: Project[]) => {\n//       this.projects = projects;\n//       this.fetchProjectStatuses();\n//     });\n//   }\n\n//   fetchProjectStatuses() {\n//     // Ensure that project.id is defined and is a number\n//     const statusRequests = this.projects\n//       .filter(project => project.id !== undefined) // Filter out projects with undefined ids\n//       .map(project =>\n//         this.projectService.getCurrentStatus(project.id!)\n//           .toPromise()\n//           .then(status => status?.status || 'Unknown') // Handle undefined status\n//       );\n\n//     Promise.all(statusRequests).then(statusResponses => {\n//       // Filter out 'Unknown' values if needed\n//       this.updateChart(statusResponses);\n//     }).catch(error => {\n//       console.error('Error fetching project statuses:', error);\n//     });\n//   }\n\n//   updateChart(statusResponses: string[]) {\n//     const projectNames = this.projects.map(project => project.name);\n//     const projectStatuses = statusResponses.map(status => {\n//       switch (status) {\n//         case 'On Track':\n//           return 5;\n//         case 'Slow':\n//           return 4;\n//         case 'Risk':\n//           return 3;\n//         case 'Deep Risk':\n//           return 2;\n//         case 'Not Yet Started':\n//           return 1;\n//         default:\n//           return 0;\n//       }\n//     });\n\n//      // Define colors for each status\n//   const backgroundColors = statusResponses.map(status => {\n//     switch (status) {\n//       case 'On Track':\n//         return 'green';\n//       case 'Slow':\n//         return 'orange';\n//       case 'Risk':\n//         return 'yellow';\n//       case 'Deep Risk':\n//         return 'red';\n//       default:\n//         return 'gray';\n//     }\n//   });\n\n//     this.barChartLabels = projectNames;\n//     this.barChartData = [\n//       { data: projectStatuses, label: 'Project Status', backgroundColor: backgroundColors }\n//     ];\n//   }\n// }\n\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}