{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/project.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"ng2-charts\";\nfunction MonthlyStatusComponent_option_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const project_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", project_r4.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(project_r4.name);\n  }\n}\nfunction MonthlyStatusComponent_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const month_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", month_r5.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(month_r5.name);\n  }\n}\nfunction MonthlyStatusComponent_option_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const year_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", year_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(year_r6);\n  }\n}\nfunction MonthlyStatusComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Selected Project: \", ctx_r3.selectedProjectName, \"\");\n  }\n}\nexport class MonthlyStatusComponent {\n  constructor(projectService) {\n    this.projectService = projectService;\n    this.projects = [];\n    this.lineChartData = [];\n    this.lineChartLabels = [];\n    this.selectedProjectId = 0;\n    this.selectedYear = new Date().getFullYear();\n    this.selectedMonth = new Date().getMonth() + 1;\n    this.years = [];\n    this.months = [{\n      value: 1,\n      name: 'January'\n    }, {\n      value: 2,\n      name: 'February'\n    }, {\n      value: 3,\n      name: 'March'\n    }, {\n      value: 4,\n      name: 'April'\n    }, {\n      value: 5,\n      name: 'May'\n    }, {\n      value: 6,\n      name: 'June'\n    }, {\n      value: 7,\n      name: 'July'\n    }, {\n      value: 8,\n      name: 'August'\n    }, {\n      value: 9,\n      name: 'September'\n    }, {\n      value: 10,\n      name: 'October'\n    }, {\n      value: 11,\n      name: 'November'\n    }, {\n      value: 12,\n      name: 'December'\n    }];\n    this.lineChartOptions = {\n      responsive: true,\n      scales: {\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Events'\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            min: 0,\n            max: 5,\n            stepSize: 1,\n            callback: value => {\n              const statuses = ['Undefined', 'Not Yet Started', 'Deep Risk', 'Risk', 'Slow', 'On Track'];\n              return statuses[value];\n            }\n          },\n          scaleLabel: {\n            display: true,\n            labelString: 'Status'\n          }\n        }]\n      },\n      legend: {\n        display: true,\n        position: 'bottom',\n        labels: {\n          fontColor: 'black'\n        }\n      },\n      tooltips: {\n        callbacks: {\n          label: tooltipItem => {\n            const statuses = ['Undefined', 'Not Yet Started', 'Deep Risk', 'Risk', 'Slow', 'On Track'];\n            return statuses[tooltipItem.yLabel] || 'Unknown';\n          }\n        }\n      }\n    };\n    this.lineChartType = 'line';\n    this.selectedProjectName = '';\n  }\n  ngOnInit() {\n    const currentYear = new Date().getFullYear();\n    this.years = Array.from({\n      length: 10\n    }, (_, i) => currentYear - i);\n    this.selectedYear = currentYear;\n    this.selectedMonth = new Date().getMonth() + 1;\n    this.projectService.getAllProjects().subscribe(projects => {\n      this.projects = projects;\n      if (projects.length > 0 && projects[0].id !== undefined) {\n        this.selectedProjectId = projects[0].id;\n        this.onProjectSelect();\n      }\n    });\n  }\n  onProjectSelect() {\n    if (this.selectedProjectId && this.selectedYear && this.selectedMonth) {\n      // Retrieve the selected project each time the method is called\n      const selectedProject = this.projects.find(project => project.id === this.selectedProjectId);\n      if (selectedProject) {\n        // Ensure the project is found\n        this.projectService.getMonthlyStatus(this.selectedProjectId, this.selectedYear, this.selectedMonth).subscribe(statusData => {\n          const flattenedData = statusData.map(status => this.mapStatusToValue(status));\n          this.lineChartLabels = this.createLabelsForStatusHistory(flattenedData.length);\n          this.lineChartData = [{\n            data: flattenedData,\n            // Dynamically update the label with the selected project's name\n            label: `${selectedProject.name} Status History (${this.selectedMonth}/${this.selectedYear})`,\n            fill: false,\n            borderColor: 'blue',\n            backgroundColor: 'rgba(0, 0, 255, 0.2)'\n          }];\n        });\n      } else {\n        console.error('Selected project not found');\n      }\n    }\n  }\n  createLabelsForStatusHistory(dataLength) {\n    return Array.from({\n      length: dataLength\n    }, (_, i) => `Event ${i + 1}`);\n  }\n  onYearChange(year) {\n    this.selectedYear = year;\n    this.onProjectSelect();\n  }\n  onMonthChange(month) {\n    this.selectedMonth = month;\n    this.onProjectSelect();\n  }\n  onProjectChange(projectId) {\n    this.selectedProjectId = projectId;\n    this.onProjectSelect();\n  }\n  mapStatusToValue(status) {\n    switch (status) {\n      case 'On Track':\n        return 5;\n      case 'Slow':\n        return 4;\n      case 'Risk':\n        return 3;\n      case 'Deep Risk':\n        return 2;\n      case 'Not Yet Started':\n        return 1;\n      default:\n        return 0;\n    }\n  }\n  static #_ = this.ɵfac = function MonthlyStatusComponent_Factory(t) {\n    return new (t || MonthlyStatusComponent)(i0.ɵɵdirectiveInject(i1.ProjectService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MonthlyStatusComponent,\n    selectors: [[\"app-monthly-status\"]],\n    decls: 20,\n    vars: 12,\n    consts: [[1, \"dashboard-container\"], [1, \"chart-container\"], [1, \"select-container\"], [3, \"ngModel\", \"ngModelChange\", \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [2, \"display\", \"block\"], [\"baseChart\", \"\", 3, \"datasets\", \"labels\", \"options\", \"legend\", \"chartType\"], [3, \"value\"]],\n    template: function MonthlyStatusComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\")(4, \"label\");\n        i0.ɵɵtext(5, \"Select Project:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"select\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function MonthlyStatusComponent_Template_select_ngModelChange_6_listener($event) {\n          return ctx.selectedProjectId = $event;\n        })(\"change\", function MonthlyStatusComponent_Template_select_change_6_listener() {\n          return ctx.onProjectSelect();\n        });\n        i0.ɵɵtemplate(7, MonthlyStatusComponent_option_7_Template, 2, 2, \"option\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"label\");\n        i0.ɵɵtext(9, \"Select Month:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"select\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function MonthlyStatusComponent_Template_select_ngModelChange_10_listener($event) {\n          return ctx.selectedMonth = $event;\n        })(\"change\", function MonthlyStatusComponent_Template_select_change_10_listener() {\n          return ctx.onProjectSelect();\n        });\n        i0.ɵɵtemplate(11, MonthlyStatusComponent_option_11_Template, 2, 2, \"option\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"label\");\n        i0.ɵɵtext(13, \"Select Year:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"select\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function MonthlyStatusComponent_Template_select_ngModelChange_14_listener($event) {\n          return ctx.selectedYear = $event;\n        })(\"change\", function MonthlyStatusComponent_Template_select_change_14_listener() {\n          return ctx.onProjectSelect();\n        });\n        i0.ɵɵtemplate(15, MonthlyStatusComponent_option_15_Template, 2, 2, \"option\", 4);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelement(16, \"br\");\n        i0.ɵɵtemplate(17, MonthlyStatusComponent_div_17_Template, 3, 1, \"div\", 5);\n        i0.ɵɵelementStart(18, \"div\", 6);\n        i0.ɵɵelement(19, \"canvas\", 7);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.selectedProjectId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.projects);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.selectedMonth);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.months);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.selectedYear);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.years);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectedProjectName);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"datasets\", ctx.lineChartData)(\"labels\", ctx.lineChartLabels)(\"options\", ctx.lineChartOptions)(\"legend\", true)(\"chartType\", ctx.lineChartType);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgModel, i4.BaseChartDirective],\n    styles: [\".dashboard-container[_ngcontent-%COMP%] {\\n  padding: 20px;\\n}\\n\\n.controls[_ngcontent-%COMP%] {\\n  margin-bottom: 20px;\\n  display: flex;\\n  gap: 20px;\\n}\\n\\n.chart-container[_ngcontent-%COMP%] {\\n  width: 100%;\\n  max-width: 800px;\\n  margin: 0 auto;\\n}\\n.select-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-between; \\n  align-items: center;\\n  gap: 0px; \\n}\\n.select-item[_ngcontent-%COMP%] {\\n  display: flex; \\n  align-items: center; \\n  margin-right: 20px; \\n}\\n\\n.select-container[_ngcontent-%COMP%]    > div[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.select-container[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\n  margin-right: 10px; \\n}\\n\\n.select-container[_ngcontent-%COMP%]   select[_ngcontent-%COMP%] {\\n  padding: 5px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbW9udGhseS1zdGF0dXMvbW9udGhseS1zdGF0dXMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLG1CQUFtQjtFQUNuQixhQUFhO0VBQ2IsU0FBUztBQUNYOztBQUVBO0VBQ0UsV0FBVztFQUNYLGdCQUFnQjtFQUNoQixjQUFjO0FBQ2hCO0FBQ0E7RUFDRSxhQUFhO0VBQ2IsOEJBQThCLEVBQUUsb0NBQW9DO0VBQ3BFLG1CQUFtQjtFQUNuQixRQUFRLEVBQUUsc0NBQXNDO0FBQ2xEO0FBQ0E7RUFDRSxhQUFhLEVBQUUsb0NBQW9DO0VBQ25ELG1CQUFtQixFQUFFLDJDQUEyQztFQUNoRSxrQkFBa0IsRUFBRSw0QkFBNEI7QUFDbEQ7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0Usa0JBQWtCLEVBQUUsNkNBQTZDO0FBQ25FOztBQUVBO0VBQ0UsWUFBWTtBQUNkIiwic291cmNlc0NvbnRlbnQiOlsiLmRhc2hib2FyZC1jb250YWluZXIge1xuICBwYWRkaW5nOiAyMHB4O1xufVxuXG4uY29udHJvbHMge1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDIwcHg7XG59XG5cbi5jaGFydC1jb250YWluZXIge1xuICB3aWR0aDogMTAwJTtcbiAgbWF4LXdpZHRoOiA4MDBweDtcbiAgbWFyZ2luOiAwIGF1dG87XG59XG4uc2VsZWN0LWNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsgLyogQWRqdXN0IHNwYWNpbmcgYmV0d2VlbiBlbGVtZW50cyAqL1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDBweDsgLyogU3BhY2UgYmV0d2VlbiBlYWNoIHNlbGVjdCBlbGVtZW50ICovXG59XG4uc2VsZWN0LWl0ZW0ge1xuICBkaXNwbGF5OiBmbGV4OyAvKiBEaXNwbGF5IGxhYmVsIGFuZCBzZWxlY3QgaW5saW5lICovXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IC8qIFZlcnRpY2FsbHkgY2VudGVyIHRoZSBsYWJlbCBhbmQgc2VsZWN0ICovXG4gIG1hcmdpbi1yaWdodDogMjBweDsgLyogU3BhY2UgYmV0d2VlbiBkcm9wZG93bnMgKi9cbn1cblxuLnNlbGVjdC1jb250YWluZXIgPiBkaXYge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4uc2VsZWN0LWNvbnRhaW5lciBsYWJlbCB7XG4gIG1hcmdpbi1yaWdodDogMTBweDsgLyogU3BhY2UgYmV0d2VlbiB0aGUgbGFiZWwgYW5kIHRoZSBkcm9wZG93biAqL1xufVxuXG4uc2VsZWN0LWNvbnRhaW5lciBzZWxlY3Qge1xuICBwYWRkaW5nOiA1cHg7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["i0","MonthlyStatusComponent","constructor","projectService","Date","getFullYear","getMonth","value","name","responsive","scales","xAxes","scaleLabel","display","labelString","yAxes","ticks","min","max","stepSize","callback","statuses","legend","position","labels","fontColor","tooltips","callbacks","label","tooltipItem","yLabel","ngOnInit","currentYear","years","Array","from","length","_","i","selectedYear","selectedMonth","getAllProjects","subscribe","projects","id","undefined","selectedProjectId","onProjectSelect","selectedProject","find","project","getMonthlyStatus","statusData","flattenedData","map","status","mapStatusToValue","lineChartLabels","createLabelsForStatusHistory","lineChartData","data","fill","borderColor","backgroundColor","console","error","dataLength","onYearChange","year","onMonthChange","month","onProjectChange","projectId","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/monthly-status/monthly-status.component.html","/home/decodersmdu/pocone/src/app/monthly-status/monthly-status.component.ts"],"sourcesContent":["<div class=\"dashboard-container\">\n  <div class=\"chart-container\">\n    \n    <!-- Wrap the select elements in a flexbox container -->\n    <div class=\"select-container\">\n      <div>\n        <label>Select Project:</label>\n        <select [(ngModel)]=\"selectedProjectId\" (change)=\"onProjectSelect()\">\n          <option *ngFor=\"let project of projects\" [value]=\"project.id\">{{ project.name }}</option>\n        </select>\n      \n\n      \n        <label>Select Month:</label>\n        <select [(ngModel)]=\"selectedMonth\" (change)=\"onProjectSelect()\">\n          <option *ngFor=\"let month of months\" [value]=\"month.value\">{{ month.name }}</option>\n        </select>\n      \n\n     \n        <label>Select Year:</label>\n        <select [(ngModel)]=\"selectedYear\" (change)=\"onProjectSelect()\">\n          <option *ngFor=\"let year of years\" [value]=\"year\">{{ year }}</option>\n        </select>\n      </div>\n    </div>\n\n    <br>\n\n    <div *ngIf=\"selectedProjectName\">\n      <p>Selected Project: {{ selectedProjectName }}</p>\n    </div>\n\n    <div style=\"display: block;\">\n      <canvas baseChart\n              [datasets]=\"lineChartData\"\n              [labels]=\"lineChartLabels\"\n              [options]=\"lineChartOptions\"\n              [legend]=\"true\"\n              [chartType]=\"lineChartType\">\n      </canvas>\n    </div>\n\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ProjectService } from '../Services/project.service';  // Update the path if necessary\nimport { Chart, ChartDataSets, ChartOptions, ChartType } from 'chart.js';\nimport { Color, Label } from 'ng2-charts';\nimport { Project } from '../Models/project.model';\n\n@Component({\n  selector: 'app-monthly-status',\n  templateUrl: './monthly-status.component.html',\n  styleUrls: ['./monthly-status.component.css']\n})\nexport class MonthlyStatusComponent implements OnInit {\n  public projects: Project[] = [];\n  public lineChartData: ChartDataSets[] = [];\n  public lineChartLabels: Label[] = [];\n  public selectedProjectId: number = 0;\n  public selectedYear: number = new Date().getFullYear();\n  public selectedMonth: number = new Date().getMonth() + 1;\n\n  public years: number[] = [];\n  public months = [\n    { value: 1, name: 'January' },\n    { value: 2, name: 'February' },\n    { value: 3, name: 'March' },\n    { value: 4, name: 'April' },\n    { value: 5, name: 'May' },\n    { value: 6, name: 'June' },\n    { value: 7, name: 'July' },\n    { value: 8, name: 'August' },\n    { value: 9, name: 'September' },\n    { value: 10, name: 'October' },\n    { value: 11, name: 'November' },\n    { value: 12, name: 'December' }\n  ];\n\n  public lineChartOptions: ChartOptions = {\n    responsive: true,\n    scales: {\n      xAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Events'\n        }\n      }],\n      yAxes: [{\n        ticks: {\n          min: 0,\n          max: 5,\n          stepSize: 1,\n          callback: (value: number) => {\n            const statuses = ['Undefined', 'Not Yet Started', 'Deep Risk', 'Risk', 'Slow', 'On Track'];\n            return statuses[value];\n          }\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Status'\n        }\n      }]\n    },\n    legend: {\n      display: true,\n      position: 'bottom',\n      labels: {\n        fontColor: 'black'\n      }\n    },\n    tooltips: {\n      callbacks: {\n        label: (tooltipItem) => {\n          const statuses = ['Undefined', 'Not Yet Started', 'Deep Risk', 'Risk', 'Slow', 'On Track'];\n          return statuses[tooltipItem.yLabel as number] || 'Unknown';\n        }\n      }\n    }\n  };\n\n  public lineChartType: ChartType = 'line';\n  \n  constructor(private projectService: ProjectService) { }\n\n  ngOnInit(): void {\n    const currentYear = new Date().getFullYear();\n    this.years = Array.from({ length: 10 }, (_, i) => currentYear - i);\n\n    this.selectedYear = currentYear;\n    this.selectedMonth = new Date().getMonth() + 1;\n\n    this.projectService.getAllProjects().subscribe((projects: Project[]) => {\n      this.projects = projects;\n      if (projects.length > 0 && projects[0].id !== undefined) {\n        this.selectedProjectId = projects[0].id!;\n        this.onProjectSelect();\n      }\n    });\n  }\n  selectedProjectName: string = '';\n  onProjectSelect(): void {\n    if (this.selectedProjectId && this.selectedYear && this.selectedMonth) {\n      // Retrieve the selected project each time the method is called\n      const selectedProject = this.projects.find(project => project.id === this.selectedProjectId);\n  \n      if (selectedProject) { // Ensure the project is found\n        this.projectService.getMonthlyStatus(this.selectedProjectId, this.selectedYear, this.selectedMonth)\n          .subscribe((statusData: string[]) => {\n            const flattenedData = statusData.map(status => this.mapStatusToValue(status));\n            this.lineChartLabels = this.createLabelsForStatusHistory(flattenedData.length);\n            this.lineChartData = [{\n              data: flattenedData,\n              // Dynamically update the label with the selected project's name\n              label: `${selectedProject.name} Status History (${this.selectedMonth}/${this.selectedYear})`,\n              fill: false,\n              borderColor: 'blue',\n              backgroundColor: 'rgba(0, 0, 255, 0.2)',\n            }];\n          });\n      } else {\n        console.error('Selected project not found');\n      }\n    }\n  }\n  private createLabelsForStatusHistory(dataLength: number): Label[] {\n    return Array.from({ length: dataLength }, (_, i) => `Event ${i + 1}`);\n  }\n\n  onYearChange(year: number): void {\n    this.selectedYear = year;\n    this.onProjectSelect();\n  }\n\n  onMonthChange(month: number): void {\n    this.selectedMonth = month;\n    this.onProjectSelect();\n  }\n\n  onProjectChange(projectId: number): void {\n    this.selectedProjectId = projectId;\n    this.onProjectSelect();\n  }\n\n  private mapStatusToValue(status: string): number {\n    switch (status) {\n      case 'On Track': return 5;\n      case 'Slow': return 4;\n      case 'Risk': return 3;\n      case 'Deep Risk': return 2;\n      case 'Not Yet Started': return 1;\n      default: return 0;\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}