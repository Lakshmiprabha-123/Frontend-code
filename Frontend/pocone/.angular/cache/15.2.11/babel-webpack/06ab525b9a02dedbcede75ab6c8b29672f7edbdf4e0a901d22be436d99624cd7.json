{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { StatusEnum } from '../enum';\nlet AddStatusComponent = class AddStatusComponent {\n  // constructor(private projectService: ProjectService) {}\n  // onSubmit() {\n  //   try {\n  //     // Check if the JSON string is not empty\n  //     if (this.teamCompositionString.trim()) {\n  //       this.status.teamComposition = JSON.parse(this.teamCompositionString);\n  //     } else {\n  //       throw new Error('Team composition JSON string is empty');\n  //     }\n  //     console.log('Status data:', this.status);\n  //     this.projectService.saveStatus(this.projectId, this.status).subscribe(response => {\n  //       console.log('Status added:', response);\n  //     });\n  //   } catch (e) {\n  //     console.error('Invalid JSON for team composition', e);\n  //   }\n  // } \n  constructor(projectService, router, route) {\n    this.projectService = projectService;\n    this.router = router;\n    this.route = route;\n    this.statusEnum = StatusEnum; // Enum reference for template binding\n    this.status = {\n      id: 0,\n      risksInDelivery: false,\n      teamComposition: {},\n      processFlows: StatusEnum.NOT_YET,\n      defectsReport: false,\n      numberOfDefects: 0,\n      dailyUpdates: StatusEnum.NOT_YET,\n      qaUpdates: StatusEnum.NOT_YET,\n      sonarqube: StatusEnum.NOT_YET,\n      weeklyReports: StatusEnum.NOT_YET,\n      closeClientCommunication: StatusEnum.NOT_YET,\n      gitReport: StatusEnum.NOT_YET,\n      escalation: StatusEnum.NOT_YET,\n      boardUpdates: StatusEnum.NOT_YET\n    };\n    this.projectId = 0;\n    this.teamCompositionString = '';\n    this.projects = [];\n    this.isFormVisible = false;\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      if (params['projectId']) {\n        this.projectId = +params['projectId'];\n        this.loadStatus();\n      }\n    });\n  }\n  onAddStatusClick() {\n    this.isFormVisible = true;\n  }\n  onSubmit() {\n    try {\n      // Check if the JSON string is not empty\n      if (this.teamCompositionString.trim()) {\n        this.status.teamComposition = JSON.parse(this.teamCompositionString);\n      } else {\n        throw new Error('Team composition JSON string is empty');\n      }\n      console.log('Status data:', this.status);\n      this.projectService.saveStatus(this.projectId, this.status).subscribe(response => {\n        console.log('Status added:', response);\n        // Navigate back to project list\n      });\n    } catch (e) {\n      console.error('Invalid JSON for team composition', e);\n    }\n  }\n  loadStatus() {\n    this.projectService.updateStatus(this.projectId, this.status).subscribe(response => {\n      if (response) {\n        this.status = response;\n        this.teamCompositionString = JSON.stringify(this.status.teamComposition, null, 2); // Pre-fill form if data exists\n        this.isFormVisible = true; // Show form if data exists\n      } else {\n        this.isFormVisible = false; // Keep form hidden if no data exists\n      }\n    });\n  }\n\n  goBack() {\n    this.router.navigate(['/all-projects']); // Adjust the route to your \"Project List\" page\n  }\n};\n\nAddStatusComponent = __decorate([Component({\n  selector: 'app-add-status',\n  templateUrl: './add-status.component.html',\n  styleUrls: ['./add-status.component.css']\n})], AddStatusComponent);\nexport { AddStatusComponent };\n// onSubmit() {\n//   try {\n//     // Check if the JSON string is not empty\n//     if (this.teamCompositionString.trim()) {\n//       this.status.teamComposition = JSON.parse(this.teamCompositionString);\n//     } else {\n//       throw new Error('Team composition JSON string is empty');\n//     }\n//     console.log('Status data:', this.status);\n//     this.projectService.saveStatus(this.projectId, this.status).subscribe(response => {\n//       console.log('Status added:', response);\n//     });\n//   } catch (e) {\n//     console.error('Invalid JSON for team composition', e);\n//   }","map":{"version":3,"mappings":"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","names":["Component","StatusEnum","AddStatusComponent","constructor","projectService","router","route","id","risksInDelivery","teamComposition","processFlows","NOT_YET","defectsReport","numberOfDefects","dailyUpdates","qaUpdates","sonarqube","weeklyReports","closeClientCommunication","gitReport","escalation","boardUpdates","ngOnInit","params","subscribe","projectId","loadStatus","onAddStatusClick","isFormVisible","onSubmit","teamCompositionString","trim","status","JSON","parse","Error","console","log","saveStatus","response","e","error","updateStatus","stringify","goBack","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/add-status/add-status.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { StatusEnum } from '../enum'\nimport { Status } from '../Models/status.model'\nimport { ProjectService } from '../Services/project.service'\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Project } from '../Models/project.model';\n\n@Component({\n  selector: 'app-add-status',\n  templateUrl: './add-status.component.html',\n  styleUrls: ['./add-status.component.css']\n})\nexport class AddStatusComponent implements OnInit {\n  statusEnum = StatusEnum;  // Enum reference for template binding\n\n  status: Status = {\n    id:0,\n    risksInDelivery: false,\n    teamComposition: {},\n    processFlows: StatusEnum.NOT_YET,\n    defectsReport: false,\n    numberOfDefects: 0,\n    dailyUpdates: StatusEnum.NOT_YET,\n    qaUpdates: StatusEnum.NOT_YET,\n    sonarqube: StatusEnum.NOT_YET,\n    weeklyReports: StatusEnum.NOT_YET,\n    closeClientCommunication: StatusEnum.NOT_YET,\n    gitReport: StatusEnum.NOT_YET,\n    escalation: StatusEnum.NOT_YET,\n    boardUpdates: StatusEnum.NOT_YET\n  };\n  projectId: number = 0;\n  teamCompositionString: string = '';\n  projects: Project[] =[];\n  isFormVisible: boolean = false;\n  \n  // constructor(private projectService: ProjectService) {}\n  // onSubmit() {\n  //   try {\n  //     // Check if the JSON string is not empty\n  //     if (this.teamCompositionString.trim()) {\n  //       this.status.teamComposition = JSON.parse(this.teamCompositionString);\n  //     } else {\n  //       throw new Error('Team composition JSON string is empty');\n  //     }\n  //     console.log('Status data:', this.status);\n  //     this.projectService.saveStatus(this.projectId, this.status).subscribe(response => {\n  //       console.log('Status added:', response);\n  //     });\n  //   } catch (e) {\n  //     console.error('Invalid JSON for team composition', e);\n  //   }\n  // } \n  constructor(private projectService: ProjectService, private router: Router, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.route.params.subscribe(params => {\n      if (params['projectId']) {\n        this.projectId = +params['projectId'];\n        this.loadStatus();\n      }\n    });\n}\nonAddStatusClick(): void {\n  this.isFormVisible = true;\n}\nonSubmit() {\n  try {\n    // Check if the JSON string is not empty\n    if (this.teamCompositionString.trim()) {\n      this.status.teamComposition = JSON.parse(this.teamCompositionString);\n    } else {\n      throw new Error('Team composition JSON string is empty');\n    }\n    console.log('Status data:', this.status);\n    this.projectService.saveStatus(this.projectId, this.status).subscribe(response => {\n      console.log('Status added:', response);\n       // Navigate back to project list\n    });\n  } catch (e) {\n    console.error('Invalid JSON for team composition', e);\n  }\n}\nloadStatus(): void {\n  this.projectService.updateStatus(this.projectId,this.status).subscribe(response => {\n    if (response) {\n      this.status = response;\n      this.teamCompositionString = JSON.stringify(this.status.teamComposition, null, 2); // Pre-fill form if data exists\n      this.isFormVisible = true; // Show form if data exists\n    } else {\n      this.isFormVisible = false; // Keep form hidden if no data exists\n    }\n  });\n}\ngoBack() {\n  this.router.navigate(['/all-projects']); // Adjust the route to your \"Project List\" page\n}\n}\n// onSubmit() {\n//   try {\n//     // Check if the JSON string is not empty\n//     if (this.teamCompositionString.trim()) {\n//       this.status.teamComposition = JSON.parse(this.teamCompositionString);\n//     } else {\n//       throw new Error('Team composition JSON string is empty');\n//     }\n//     console.log('Status data:', this.status);\n//     this.projectService.saveStatus(this.projectId, this.status).subscribe(response => {\n//       console.log('Status added:', response);\n//     });\n//   } catch (e) {\n//     console.error('Invalid JSON for team composition', e);\n//   }\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}