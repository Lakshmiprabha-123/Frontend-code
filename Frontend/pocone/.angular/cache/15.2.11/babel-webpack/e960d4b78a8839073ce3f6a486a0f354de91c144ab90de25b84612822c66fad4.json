{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/project.service\";\nimport * as i2 from \"ng2-charts\";\nexport class ProjectStatusChartComponent {\n  constructor(projectService) {\n    this.projectService = projectService;\n    this.projects = [];\n    this.barChartOptions = {\n      responsive: true,\n      scales: {\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Project name'\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            min: 0,\n            max: 5,\n            stepSize: 1,\n            callback: value => {\n              const statuses = ['Undefined', 'Not Yet Started', 'Deep Risk', 'Risk', 'Slow', 'On Track'];\n              return statuses[value];\n            }\n          },\n          scaleLabel: {\n            display: true,\n            labelString: 'Status'\n          }\n        }]\n      },\n      legend: {\n        display: true,\n        labels: {\n          fontColor: 'black',\n          generateLabels: function (chart) {\n            return [{\n              text: 'On Track',\n              fillStyle: 'rgb(129, 219, 129)',\n              strokeStyle: 'rgb(129, 219, 129)',\n              hidden: false\n            }, {\n              text: 'Slow',\n              fillStyle: '#FFCE56',\n              strokeStyle: '#FFCE56',\n              hidden: false\n            }, {\n              text: 'Risk',\n              fillStyle: ' #FF9F40',\n              strokeStyle: '#FF9F40',\n              hidden: false\n            }, {\n              text: 'Deep Risk',\n              fillStyle: 'rgb(240, 107, 107)',\n              strokeStyle: 'rgb(240, 107, 107)',\n              hidden: false\n            }, {\n              text: 'Not yet started',\n              fillStyle: 'grey',\n              strokeStyle: 'grey',\n              hidden: false\n            }];\n          }\n        }\n      },\n      tooltips: {\n        callbacks: {\n          label: (tooltipItem, data) => {\n            const datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';\n            const value = tooltipItem.yLabel;\n            const status = this.getStatusFromValue(value);\n            return `${datasetLabel}: ${status}`;\n          }\n        }\n      },\n      hover: {\n        onHover: (event, chartElement) => {\n          if (event && event.target) {\n            event.target.style.cursor = chartElement.length ? 'pointer' : 'default';\n          }\n        }\n      }\n    };\n    this.barChartLabels = [];\n    this.barChartType = 'bar';\n    this.barChartLegend = true;\n    this.barChartPlugins = [];\n    this.barChartData = [{\n      data: [],\n      label: 'Project Status',\n      backgroundColor: []\n    }];\n  }\n  ngOnInit() {\n    this.projectService.getAllProjects().subscribe(projects => {\n      this.projects = projects;\n      this.fetchProjectStatuses();\n    });\n  }\n  fetchProjectStatuses() {\n    const statusRequests = this.projects.filter(project => project.id !== undefined).map(project => this.projectService.getCurrentStatus(project.id).toPromise().then(status => status?.status || 'Unknown'));\n    Promise.all(statusRequests).then(statusResponses => {\n      this.updateChart(statusResponses);\n    }).catch(error => {\n      console.error('Error fetching project statuses:', error);\n    });\n  }\n  updateChart(statusResponses) {\n    const projectNames = this.projects.map(project => project.name);\n    const projectStatuses = statusResponses.map(status => {\n      switch (status) {\n        case 'On Track':\n          return 5;\n        case 'Slow':\n          return 4;\n        case 'Risk':\n          return 3;\n        case 'Deep Risk':\n          return 2;\n        case 'Not Yet Started':\n          return 1;\n        default:\n          return 0;\n      }\n    });\n    const backgroundColors = statusResponses.map(status => {\n      switch (status) {\n        case 'On Track':\n          return 'rgb(129, 219, 129)';\n        // Green\n        case 'Slow':\n          return '#FFCE56';\n        // Orange\n        case 'Risk':\n          return ' #FF9F40';\n        // Yellow\n        case 'Deep Risk':\n          return 'rgb(240, 107, 107)';\n        // Red\n        default:\n          return 'rgb(128, 128, 128)';\n        // Gray\n      }\n    });\n\n    this.barChartLabels = projectNames;\n    this.barChartData = [{\n      data: projectStatuses,\n      label: 'Project Status',\n      backgroundColor: backgroundColors\n    }];\n  }\n  getStatusFromValue(value) {\n    switch (value) {\n      case 5:\n        return 'On Track';\n      case 4:\n        return 'Slow';\n      case 3:\n        return 'Risk';\n      case 2:\n        return 'Deep Risk';\n      case 1:\n        return 'Not Yet Started';\n      default:\n        return 'Unknown';\n    }\n  }\n  static #_ = this.ɵfac = function ProjectStatusChartComponent_Factory(t) {\n    return new (t || ProjectStatusChartComponent)(i0.ɵɵdirectiveInject(i1.ProjectService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProjectStatusChartComponent,\n    selectors: [[\"app-project-status-chart\"]],\n    decls: 22,\n    vars: 6,\n    consts: [[1, \"dashboard-container\"], [1, \"chart-container\"], [1, \"legend-box\"], [1, \"legend-color\", 2, \"background-color\", \"rgb(129, 219, 129)\"], [1, \"legend-color\", 2, \"background-color\", \"#FFCE56\"], [1, \"legend-color\", 2, \"background-color\", \"#FF9F40\"], [1, \"legend-color\", 2, \"background-color\", \"rgb(240, 107, 107)\"], [1, \"legend-color\", 2, \"background-color\", \"grey\"], [2, \"display\", \"flex\"], [\"baseChart\", \"\", 3, \"datasets\", \"labels\", \"options\", \"legend\", \"plugins\", \"chartType\"]],\n    template: function ProjectStatusChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 1)(3, \"div\", 2)(4, \"ul\")(5, \"li\");\n        i0.ɵɵelement(6, \"span\", 3);\n        i0.ɵɵtext(7, \"On Track \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"li\");\n        i0.ɵɵelement(9, \"span\", 4);\n        i0.ɵɵtext(10, \"Slow \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"li\");\n        i0.ɵɵelement(12, \"span\", 5);\n        i0.ɵɵtext(13, \"Risk \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"li\");\n        i0.ɵɵelement(15, \"span\", 6);\n        i0.ɵɵtext(16, \"Deep Risk \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"li\");\n        i0.ɵɵelement(18, \"span\", 7);\n        i0.ɵɵtext(19, \"Not Yet Started \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(20, \"div\", 8);\n        i0.ɵɵelement(21, \"canvas\", 9);\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(21);\n        i0.ɵɵproperty(\"datasets\", ctx.barChartData)(\"labels\", ctx.barChartLabels)(\"options\", ctx.barChartOptions)(\"legend\", ctx.barChartLegend)(\"plugins\", ctx.barChartPlugins)(\"chartType\", ctx.barChartType);\n      }\n    },\n    dependencies: [i2.BaseChartDirective],\n    styles: [\".dashboard-container[_ngcontent-%COMP%] {\\n    display: flex;\\n    gap: 20px; \\n  }\\n  \\n  .chart-container[_ngcontent-%COMP%] {\\n    flex: 1; \\n  }\\n  .legend-box[_ngcontent-%COMP%] {\\n    width: 150px; \\n    margin-right: 20px; \\n  }\\n  \\n  .legend-box[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%] {\\n    list-style-type: none;\\n    padding: 0;\\n  }\\n  \\n  .legend-box[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\\n    display: flex;\\n    align-items: center;\\n    margin-bottom: 10px;\\n  }\\n  \\n  .legend-color[_ngcontent-%COMP%] {\\n    width: 20px;\\n    height: 20px;\\n    margin-right: 10px;\\n    display: inline-block;\\n    border-radius: 5px;\\n  }\\n  \\n  .chart-box[_ngcontent-%COMP%] {\\n    flex-grow: 1; \\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcHJvamVjdC1zdGF0dXMtY2hhcnQvcHJvamVjdC1zdGF0dXMtY2hhcnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGFBQWE7SUFDYixTQUFTLEVBQUUsaUNBQWlDO0VBQzlDOztFQUVBO0lBQ0UsT0FBTyxFQUFFLHFDQUFxQztFQUNoRDtFQUNBO0lBQ0UsWUFBWSxFQUFFLHVDQUF1QztJQUNyRCxrQkFBa0IsRUFBRSxtQ0FBbUM7RUFDekQ7O0VBRUE7SUFDRSxxQkFBcUI7SUFDckIsVUFBVTtFQUNaOztFQUVBO0lBQ0UsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixtQkFBbUI7RUFDckI7O0VBRUE7SUFDRSxXQUFXO0lBQ1gsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixxQkFBcUI7SUFDckIsa0JBQWtCO0VBQ3BCOztFQUVBO0lBQ0UsWUFBWSxFQUFFLCtDQUErQztFQUMvRCIsInNvdXJjZXNDb250ZW50IjpbIi5kYXNoYm9hcmQtY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGdhcDogMjBweDsgLyogU3BhY2UgYmV0d2VlbiB0aGUgY29tcG9uZW50cyAqL1xuICB9XG4gIFxuICAuY2hhcnQtY29udGFpbmVyIHtcbiAgICBmbGV4OiAxOyAvKiBBbGxvdyBjb21wb25lbnRzIHRvIGdyb3cgZXF1YWxseSAqL1xuICB9XG4gIC5sZWdlbmQtYm94IHtcbiAgICB3aWR0aDogMTUwcHg7IC8qIEFkanVzdCB0aGUgd2lkdGggb2YgdGhlIGxlZ2VuZCBib3ggKi9cbiAgICBtYXJnaW4tcmlnaHQ6IDIwcHg7IC8qIFNwYWNlIGJldHdlZW4gbGVnZW5kIGFuZCBjaGFydCAqL1xuICB9XG4gIFxuICAubGVnZW5kLWJveCB1bCB7XG4gICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xuICAgIHBhZGRpbmc6IDA7XG4gIH1cbiAgXG4gIC5sZWdlbmQtYm94IGxpIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgfVxuICBcbiAgLmxlZ2VuZC1jb2xvciB7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICB9XG4gIFxuICAuY2hhcnQtYm94IHtcbiAgICBmbGV4LWdyb3c6IDE7IC8qIEVuc3VyZSB0aGUgY2hhcnQgdGFrZXMgdGhlIHJlbWFpbmluZyBzcGFjZSAqL1xuICB9Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["ProjectStatusChartComponent","constructor","projectService","responsive","scales","xAxes","scaleLabel","display","labelString","yAxes","ticks","min","max","stepSize","callback","value","statuses","legend","labels","fontColor","generateLabels","chart","text","fillStyle","strokeStyle","hidden","tooltips","callbacks","label","tooltipItem","data","datasetLabel","datasets","datasetIndex","yLabel","status","getStatusFromValue","hover","onHover","event","chartElement","target","style","cursor","length","backgroundColor","ngOnInit","getAllProjects","subscribe","projects","fetchProjectStatuses","statusRequests","filter","project","id","undefined","map","getCurrentStatus","toPromise","then","Promise","all","statusResponses","updateChart","catch","error","console","projectNames","name","projectStatuses","backgroundColors","barChartLabels","barChartData","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/project-status-chart/project-status-chart.component.ts","/home/decodersmdu/pocone/src/app/project-status-chart/project-status-chart.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { ProjectService } from '../Services/project.service';\nimport { Project } from '../Models/project.model';\n\n@Component({\n  selector: 'app-project-status-chart',\n  templateUrl: './project-status-chart.component.html',\n  styleUrls: ['./project-status-chart.component.css']\n})\nexport class ProjectStatusChartComponent implements OnInit {\n  projects: Project[] = [];\n  public barChartOptions: ChartOptions = {\n    responsive: true,\n    scales: {\n      xAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Project name'\n        },\n        \n      }],\n      yAxes: [{\n        ticks: {\n          min: 0,\n          max: 5,\n          stepSize: 1,\n          callback: (value: number) => {\n            const statuses = ['Undefined', 'Not Yet Started', 'Deep Risk', 'Risk', 'Slow', 'On Track'];\n            return statuses[value];\n          }\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Status'\n        }\n        \n      }]\n    },\n    legend: {\n      display: true,\n      labels: {\n        fontColor: 'black',\n        generateLabels: function(chart) {\n          return [\n            {\n              text: 'On Track',\n              fillStyle: 'rgb(129, 219, 129)',\n              strokeStyle: 'rgb(129, 219, 129)',\n              hidden: false,\n            },\n            {\n              text: 'Slow',\n              fillStyle: '#FFCE56',\n              strokeStyle: '#FFCE56',\n              hidden: false,\n            },\n            {\n              text: 'Risk',\n              fillStyle: ' #FF9F40',\n              strokeStyle: '#FF9F40',\n              hidden: false,\n            },\n            {\n              text: 'Deep Risk',\n              fillStyle: 'rgb(240, 107, 107)',\n              strokeStyle: 'rgb(240, 107, 107)',\n              hidden: false,\n            },\n            {\n              text: 'Not yet started',\n              fillStyle: 'grey',\n              strokeStyle: 'grey',\n              hidden: false,\n            }\n          ];\n        }\n      }\n    },\n    tooltips: {\n      callbacks: {\n        label: (tooltipItem: any, data: any) => {\n          const datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';\n          const value = tooltipItem.yLabel;\n          const status = this.getStatusFromValue(value);\n          return `${datasetLabel}: ${status}`;\n        }\n      }\n    },\n    hover: {\n      \n      onHover: (event, chartElement) => {\n        \n        if (event && event.target) {\n          (event.target as HTMLElement).style.cursor = chartElement.length ? 'pointer' : 'default';\n        }\n      }\n    }\n  };\n  public barChartLabels: Label[] = [];\n  public barChartType: ChartType = 'bar';\n  public barChartLegend = true;\n  public barChartPlugins = [];\n\n  public barChartData: ChartDataSets[] = [\n    { data: [], label: 'Project Status', backgroundColor: [] }\n  ];\n\n  constructor(private projectService: ProjectService) { }\n\n  ngOnInit(): void {\n    this.projectService.getAllProjects().subscribe((projects: Project[]) => {\n      this.projects = projects;\n      this.fetchProjectStatuses();\n    });\n  }\n\n  fetchProjectStatuses() {\n    const statusRequests = this.projects\n      .filter(project => project.id !== undefined)\n      .map(project =>\n        this.projectService.getCurrentStatus(project.id!)\n          .toPromise()\n          .then(status => status?.status || 'Unknown')\n      );\n\n    Promise.all(statusRequests).then(statusResponses => {\n      this.updateChart(statusResponses);\n    }).catch(error => {\n      console.error('Error fetching project statuses:', error);\n    });\n  }\n\n  updateChart(statusResponses: string[]) {\n    const projectNames = this.projects.map(project => project.name);\n    const projectStatuses = statusResponses.map(status => {\n      switch (status) {\n        case 'On Track':\n          return 5;\n        case 'Slow':\n          return 4;\n        case 'Risk':\n          return 3;\n        case 'Deep Risk':\n          return 2;\n        case 'Not Yet Started':\n          return 1;\n        default:\n          return 0;\n      }\n    });\n\n    const backgroundColors: string[] = statusResponses.map(status => {\n      switch (status) {\n        case 'On Track':\n          return 'rgb(129, 219, 129)';  // Green\n        case 'Slow':\n          return '#FFCE56';  // Orange\n        case 'Risk':\n          return ' #FF9F40';  // Yellow\n        case 'Deep Risk':\n          return 'rgb(240, 107, 107)';  // Red\n        default:\n          return 'rgb(128, 128, 128)';  // Gray\n      }\n    });\n    \n\n    \n    this.barChartLabels = projectNames;\n    this.barChartData = [\n      { data: projectStatuses, label: 'Project Status', backgroundColor: backgroundColors }\n    ];\n  }\n\n  getStatusFromValue(value: number): string {\n    switch (value) {\n      case 5:\n        return 'On Track';\n      case 4:\n        return 'Slow';\n      case 3:\n        return 'Risk';\n      case 2:\n        return 'Deep Risk';\n      case 1:\n        return 'Not Yet Started';\n      default:\n        return 'Unknown';\n    }\n  }\n}\n","<div class=\"dashboard-container\">\n    <div class=\"chart-container\">\n      <div class=\"chart-container\">\n        <div class=\"legend-box\">\n          <ul>\n            <li>\n              <span class=\"legend-color\" style=\"background-color: rgb(129, 219, 129);\"></span>On Track\n            </li>\n            <li>\n              <span class=\"legend-color\" style=\"background-color: #FFCE56;\"></span>Slow\n            </li>\n            <li>\n              <span class=\"legend-color\" style=\"background-color: #FF9F40;\"></span>Risk\n            </li>\n            <li>\n              <span class=\"legend-color\" style=\"background-color: rgb(240, 107, 107);\"></span>Deep Risk\n            </li>\n            <li>\n              <span class=\"legend-color\" style=\"background-color: grey;\"></span>Not Yet Started\n            </li>\n          </ul>\n        </div>\n    \n    <div style=\"display: flex;\">\n      <canvas baseChart\n              [datasets]=\"barChartData\"\n              [labels]=\"barChartLabels\"\n              [options]=\"barChartOptions\"\n              [legend]=\"barChartLegend\"\n              [plugins]=\"barChartPlugins\"              \n              [chartType]=\"barChartType\">\n      </canvas>\n    </div>\n  </div>\n  </div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}