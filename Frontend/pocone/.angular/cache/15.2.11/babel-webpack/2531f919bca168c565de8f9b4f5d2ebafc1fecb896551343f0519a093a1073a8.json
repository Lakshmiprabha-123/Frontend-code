{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/project.service\";\nexport class ProjectStatusChartComponent {\n  constructor(projectService) {\n    this.projectService = projectService;\n    this.chartLabels = [];\n    this.chartData = {\n      labels: this.chartLabels,\n      datasets: [{\n        label: 'Project Status',\n        data: [],\n        backgroundColor: [] // Colors will be assigned in ngOnInit\n      }]\n    };\n\n    this.chartOptions = {\n      responsive: true,\n      scales: {\n        x: {\n          beginAtZero: true\n        }\n      }\n    };\n  }\n  ngOnInit() {\n    this.projectService.getAllProjects().subscribe(projects => {\n      this.chartLabels = projects.map(project => project.name);\n      this.chartData.datasets[0].data = projects.map(project => this.getStatusValue(project.currentStatus));\n      this.chartData.datasets[0].backgroundColor = projects.map(project => this.getStatusColor(project.currentStatus));\n    });\n  }\n  getStatusValue(status) {\n    switch (status) {\n      case 'On Track':\n        return 1;\n      case 'Slow':\n        return 2;\n      case 'Risk':\n        return 3;\n      case 'Deep Risk':\n        return 4;\n      default:\n        return 0;\n      // Default or undefined status\n    }\n  }\n\n  getStatusColor(status) {\n    switch (status) {\n      case 'On Track':\n        return 'green';\n      case 'Slow':\n        return 'yellow';\n      case 'Risk':\n        return 'brown';\n      case 'Deep Risk':\n        return 'red';\n      default:\n        return 'grey';\n    }\n  }\n  static #_ = this.ɵfac = function ProjectStatusChartComponent_Factory(t) {\n    return new (t || ProjectStatusChartComponent)(i0.ɵɵdirectiveInject(i1.ProjectService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProjectStatusChartComponent,\n    selectors: [[\"app-project-status-chart\"]],\n    decls: 2,\n    vars: 3,\n    consts: [[2, \"display\", \"block\"], [\"baseChart\", \"\", 3, \"data\", \"options\", \"type\"]],\n    template: function ProjectStatusChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"canvas\", 1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"data\", ctx.chartData)(\"options\", ctx.chartOptions)(\"type\", \"bar\");\n      }\n    },\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":";;AAUA,OAAM,MAAOA,2BAA2B;EAsBtCC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;IArBlC,gBAAW,GAAa,EAAE;IAC1B,cAAS,GAAqB;MAC5BC,MAAM,EAAE,IAAI,CAACC,WAAW;MACxBC,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,gBAAgB;QACvBC,IAAI,EAAE,EAAE;QACRC,eAAe,EAAE,EAAE,CAAE;OACtB;KAEJ;;IAED,iBAAY,GAAwB;MAClCC,UAAU,EAAE,IAAI;MAChBC,MAAM,EAAE;QACNC,CAAC,EAAE;UACDC,WAAW,EAAE;;;KAGlB;EAEoD;EAErDC,QAAQ;IACN,IAAI,CAACX,cAAc,CAACY,cAAc,EAAE,CAACC,SAAS,CAACC,QAAQ,IAAG;MACxD,IAAI,CAACZ,WAAW,GAAGY,QAAQ,CAACC,GAAG,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,CAAC;MACxD,IAAI,CAACC,SAAS,CAACf,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,GAAGS,QAAQ,CAACC,GAAG,CAACC,OAAO,IAAI,IAAI,CAACG,cAAc,CAACH,OAAO,CAACI,aAAa,CAAC,CAAC;MACrG,IAAI,CAACF,SAAS,CAACf,QAAQ,CAAC,CAAC,CAAC,CAACG,eAAe,GAAGQ,QAAQ,CAACC,GAAG,CAACC,OAAO,IAAI,IAAI,CAACK,cAAc,CAACL,OAAO,CAACI,aAAa,CAAC,CAAC;IAClH,CAAC,CAAC;EACJ;EAEAD,cAAc,CAACG,MAA0B;IACvC,QAAQA,MAAM;MACZ,KAAK,UAAU;QACb,OAAO,CAAC;MACV,KAAK,MAAM;QACT,OAAO,CAAC;MACV,KAAK,MAAM;QACT,OAAO,CAAC;MACV,KAAK,WAAW;QACd,OAAO,CAAC;MACV;QACE,OAAO,CAAC;MAAE;IAAA;EAEhB;;EAEAD,cAAc,CAACC,MAA0B;IACvC,QAAQA,MAAM;MACZ,KAAK,UAAU;QACb,OAAO,OAAO;MAChB,KAAK,MAAM;QACT,OAAO,QAAQ;MACjB,KAAK,MAAM;QACT,OAAO,OAAO;MAChB,KAAK,WAAW;QACd,OAAO,KAAK;MACd;QACE,OAAO,MAAM;IAAC;EAEpB;EAAC;qBA5DUxB,2BAA2B;EAAA;EAAA;UAA3BA,2BAA2B;IAAAyB;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCVxCC,8BAA6B;QACzBA,4BAIS;QACXA,iBAAM;;;QAJIA,eAAkB;QAAlBA,oCAAkB","names":["ProjectStatusChartComponent","constructor","projectService","labels","chartLabels","datasets","label","data","backgroundColor","responsive","scales","x","beginAtZero","ngOnInit","getAllProjects","subscribe","projects","map","project","name","chartData","getStatusValue","currentStatus","getStatusColor","status","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/project-status-chart/project-status-chart.component.ts","/home/decodersmdu/pocone/src/app/project-status-chart/project-status-chart.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ProjectService } from '../Services/project.service';\nimport { ChartData, ChartOptions } from 'chart.js';\nimport { ChartType } from 'chart.js';\n\n@Component({\n  selector: 'app-project-status-chart',\n  templateUrl: './project-status-chart.component.html',\n  styleUrls: ['./project-status-chart.component.css']\n})\nexport class ProjectStatusChartComponent implements OnInit {\n  chartLabels: string[] = [];\n  chartData: ChartData<'bar'> = {\n    labels: this.chartLabels,\n    datasets: [\n      {\n        label: 'Project Status',\n        data: [], // Data will be assigned in ngOnInit\n        backgroundColor: [], // Colors will be assigned in ngOnInit\n      }\n    ]\n  };\n\n  chartOptions: ChartOptions<'bar'> = {\n    responsive: true,\n    scales: {\n      x: {\n        beginAtZero: true\n      }\n    }\n  };\n\n  constructor(private projectService: ProjectService) {}\n\n  ngOnInit(): void {\n    this.projectService.getAllProjects().subscribe(projects => {\n      this.chartLabels = projects.map(project => project.name);\n      this.chartData.datasets[0].data = projects.map(project => this.getStatusValue(project.currentStatus));\n      this.chartData.datasets[0].backgroundColor = projects.map(project => this.getStatusColor(project.currentStatus));\n    });\n  }\n\n  getStatusValue(status: string | undefined): number {\n    switch (status) {\n      case 'On Track':\n        return 1;\n      case 'Slow':\n        return 2;\n      case 'Risk':\n        return 3;\n      case 'Deep Risk':\n        return 4;\n      default:\n        return 0; // Default or undefined status\n    }\n  }\n\n  getStatusColor(status: string | undefined): string {\n    switch (status) {\n      case 'On Track':\n        return 'green';\n      case 'Slow':\n        return 'yellow';\n      case 'Risk':\n        return 'brown';\n      case 'Deep Risk':\n        return 'red';\n      default:\n        return 'grey';\n    }\n  }\n}\n","<div style=\"display: block;\">\n    <canvas baseChart\n            [data]=\"chartData\"\n            [options]=\"chartOptions\"\n            [type]=\"'bar'\">\n    </canvas>\n  </div>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}