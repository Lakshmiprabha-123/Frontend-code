{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/project.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"ng2-charts\";\nfunction MonthlyStatusComponent_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const project_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", project_r2.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(project_r2.name);\n  }\n}\nfunction MonthlyStatusComponent_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const month_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", month_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(month_r3);\n  }\n}\nexport class MonthlyStatusComponent {\n  constructor(projectService) {\n    this.projectService = projectService;\n    this.projects = [];\n    this.selectedProjectId = null;\n    this.selectedMonth = '';\n    this.months = ['2024-01', '2024-02', '2024-03', '2024-04', '2024-05', '2024-06', '2024-07', '2024-08', '2024-09', '2024-10', '2024-11', '2024-12'];\n    this.lineChartData = [];\n    this.lineChartLabels = [];\n    this.lineChartOptions = {\n      responsive: true,\n      scales: {\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Date'\n          },\n          ticks: {\n            autoSkip: true,\n            maxRotation: 45\n          }\n        }],\n        yAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Status'\n          }\n        }]\n      }\n    };\n    this.lineChartLegend = true;\n    this.lineChartType = 'line';\n    this.lineChartColors = [{\n      borderColor: '#42A5F5',\n      backgroundColor: 'rgba(66, 165, 245, 0.3)'\n    }];\n  }\n  ngOnInit() {\n    this.projectService.getAllProjects().subscribe(projects => {\n      this.projects = projects;\n    });\n  }\n  onProjectSelect(event) {\n    this.selectedProjectId = event.target.value;\n    this.fetchStatusHistory();\n  }\n  onMonthSelect(event) {\n    this.selectedMonth = event.target.value;\n    this.fetchStatusHistory();\n  }\n  fetchStatusHistory() {\n    if (this.selectedProjectId && this.selectedMonth) {\n      this.projectService.getStatusHistory(this.selectedProjectId, this.selectedMonth).subscribe(statusHistory => {\n        this.updateChart(statusHistory);\n      });\n    }\n  }\n  updateChart(statusHistory) {\n    this.lineChartLabels = statusHistory.map(status => status.date);\n    this.lineChartData = [{\n      data: statusHistory.map(status => status.currentStatus),\n      label: 'Current Status'\n    }];\n  }\n  static #_ = this.ɵfac = function MonthlyStatusComponent_Factory(t) {\n    return new (t || MonthlyStatusComponent)(i0.ɵɵdirectiveInject(i1.ProjectService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MonthlyStatusComponent,\n    selectors: [[\"app-monthly-status\"]],\n    decls: 8,\n    vars: 8,\n    consts: [[1, \"dashboard-container\"], [1, \"chart-container\"], [2, \"margin-bottom\", \"20px\"], [2, \"width\", \"200px\", 3, \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [2, \"width\", \"200px\", \"margin-left\", \"10px\", 3, \"change\"], [\"baseChart\", \"\", 3, \"datasets\", \"labels\", \"options\", \"legend\", \"chartType\", \"colors\"], [3, \"value\"]],\n    template: function MonthlyStatusComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"select\", 3);\n        i0.ɵɵlistener(\"change\", function MonthlyStatusComponent_Template_select_change_3_listener($event) {\n          return ctx.onProjectSelect($event);\n        });\n        i0.ɵɵtemplate(4, MonthlyStatusComponent_option_4_Template, 2, 2, \"option\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"select\", 5);\n        i0.ɵɵlistener(\"change\", function MonthlyStatusComponent_Template_select_change_5_listener($event) {\n          return ctx.onMonthSelect($event);\n        });\n        i0.ɵɵtemplate(6, MonthlyStatusComponent_option_6_Template, 2, 2, \"option\", 4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(7, \"canvas\", 6);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.projects);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.months);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"datasets\", ctx.lineChartData)(\"labels\", ctx.lineChartLabels)(\"options\", ctx.lineChartOptions)(\"legend\", ctx.lineChartLegend)(\"chartType\", ctx.lineChartType)(\"colors\", ctx.lineChartColors);\n      }\n    },\n    dependencies: [i2.NgForOf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i4.BaseChartDirective],\n    styles: [\"div[_ngcontent-%COMP%] {\\n    margin: 20px;\\n  }\\n  \\n  canvas[_ngcontent-%COMP%] {\\n    max-width: 100%;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbW9udGhseS1zdGF0dXMvbW9udGhseS1zdGF0dXMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQ0FBaUM7QUFDakM7SUFDSSxZQUFZO0VBQ2Q7O0VBRUE7SUFDRSxlQUFlO0VBQ2pCIiwic291cmNlc0NvbnRlbnQiOlsiLyogbW9udGhseS1zdGF0dXMuY29tcG9uZW50LmNzcyAqL1xuZGl2IHtcbiAgICBtYXJnaW46IDIwcHg7XG4gIH1cbiAgXG4gIGNhbnZhcyB7XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICB9XG4gICJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["i0","MonthlyStatusComponent","constructor","projectService","responsive","scales","xAxes","scaleLabel","display","labelString","ticks","autoSkip","maxRotation","yAxes","borderColor","backgroundColor","ngOnInit","getAllProjects","subscribe","projects","onProjectSelect","event","selectedProjectId","target","value","fetchStatusHistory","onMonthSelect","selectedMonth","getStatusHistory","statusHistory","updateChart","lineChartLabels","map","status","date","lineChartData","data","currentStatus","label","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/monthly-status/monthly-status.component.html","/home/decodersmdu/pocone/src/app/monthly-status/monthly-status.component.ts"],"sourcesContent":["<div class=\"dashboard-container\">\n    <div class=\"chart-container\">\n      <div style=\"margin-bottom: 20px;\">\n        <select (change)=\"onProjectSelect($event)\" style=\"width: 200px;\">\n          <option *ngFor=\"let project of projects\" [value]=\"project.id\">{{ project.name }}</option>\n        </select>\n        <select (change)=\"onMonthSelect($event)\" style=\"width: 200px; margin-left: 10px;\">\n          <option *ngFor=\"let month of months\" [value]=\"month\">{{ month }}</option>\n        </select>\n      </div>\n      <canvas baseChart\n              [datasets]=\"lineChartData\"\n              [labels]=\"lineChartLabels\"\n              [options]=\"lineChartOptions\"\n              [legend]=\"lineChartLegend\"\n              [chartType]=\"lineChartType\"\n              [colors]=\"lineChartColors\">\n      </canvas>\n    </div>\n  </div>\n  ","// import { Component, OnInit } from '@angular/core';\n// import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n// import { Color, Label } from 'ng2-charts';\n// import { ProjectService } from '../Services/project.service';// Adjust the import path as needed\n\n// @Component({\n//   selector: 'app-monthly-status',\n//   templateUrl: './monthly-status.component.html',\n//   styleUrls: ['./monthly-status.component.css']\n// })\n// export class MonthlyStatusComponent implements OnInit {\n//   projects: any[] = [];\n//   months: string[] = ['2024-01', '2024-02', '2024-03', '2024-04', '2024-05','2024-06','2024-07','2024-08']; // Example months, adjust as needed\n//   selectedProjectId: number | null = null;\n//   selectedMonth: string | null = null;\n\n//   lineChartData: ChartDataSets[] = [];\n//   lineChartLabels: Label[] = [];\n//   lineChartOptions: ChartOptions = {\n//     responsive: true,\n//   };\n//   lineChartLegend = true;\n//   lineChartType: ChartType = 'line';\n//   lineChartPlugins = [];\n\n//   constructor(private projectService: ProjectService) {}\n\n//   ngOnInit() {\n//     this.projectService.getAllProjects().subscribe(projects => {\n//       this.projects = projects;\n//     });\n//   }\n\n//   onProjectSelect(event: any) {\n//     this.selectedProjectId = event.target.value;\n//     this.fetchStatusHistory();\n//   }\n\n//   onMonthSelect(event: any) {\n//     this.selectedMonth = event.target.value;\n//     this.fetchStatusHistory();\n//   }\n\n//   fetchStatusHistory() {\n//     if (this.selectedProjectId && this.selectedMonth) {\n//       this.projectService.getStatusHistory(this.selectedProjectId, this.selectedMonth).subscribe(statusHistory => {\n//         this.updateChartData(statusHistory);\n//       });\n//     }\n//   }\n\n//   updateChartData(statusHistory: any[]) {\n//     this.lineChartLabels = statusHistory.map(status => status.date); // Assuming 'date' is a field in your status data\n//     this.lineChartData = [\n//       { data: statusHistory.map(status => status.value), label: 'Status' } // Assuming 'value' is the field for status value\n//     ];\n//   }\n// }\nimport { Component, OnInit } from '@angular/core';\nimport { ProjectService } from '../Services/project.service'; // Update the path if necessary\nimport { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\nimport { Color, Label } from 'ng2-charts';\n\n@Component({\n  selector: 'app-monthly-status',\n  templateUrl: './monthly-status.component.html',\n  styleUrls: ['./monthly-status.component.css']\n})\nexport class MonthlyStatusComponent implements OnInit {\n  projects: any[] = [];\n  selectedProjectId: number | null = null;\n  selectedMonth: string = '';\n  months: string[] = [\n    '2024-01', '2024-02', '2024-03', '2024-04', '2024-05', \n    '2024-06', '2024-07', '2024-08', '2024-09', '2024-10', \n    '2024-11', '2024-12'\n  ];\n  \n  lineChartData: ChartDataSets[] = [];\n  lineChartLabels: Label[] = [];\n  lineChartOptions: ChartOptions = {\n    responsive: true,\n    scales: {\n      xAxes: [{ \n        scaleLabel: { display: true, labelString: 'Date' },\n        ticks: { autoSkip: true, maxRotation: 45 }\n      }],\n      yAxes: [{ \n        scaleLabel: { display: true, labelString: 'Status' }\n      }]\n    }\n  };\n  lineChartLegend = true;\n  lineChartType: ChartType = 'line';\n  lineChartColors: Color[] = [\n    { borderColor: '#42A5F5', backgroundColor: 'rgba(66, 165, 245, 0.3)' }\n  ];\n\n  constructor(private projectService: ProjectService) { }\n\n  ngOnInit() {\n        this.projectService.getAllProjects().subscribe(projects => {\n          this.projects = projects;\n       });\n      }\n\n  onProjectSelect(event: any): void {\n    this.selectedProjectId = event.target.value;\n    this.fetchStatusHistory();\n  }\n\n  onMonthSelect(event: any): void {\n    this.selectedMonth = event.target.value;\n    this.fetchStatusHistory();\n  }\n\n  fetchStatusHistory(): void {\n    if (this.selectedProjectId && this.selectedMonth) {\n      this.projectService.getStatusHistory(this.selectedProjectId, this.selectedMonth).subscribe(statusHistory => {\n        this.updateChart(statusHistory);\n      });\n    }\n  }\n\n  updateChart(statusHistory: any[]): void {\n    this.lineChartLabels = statusHistory.map(status => status.date);\n    this.lineChartData = [\n      {\n        data: statusHistory.map(status => status.currentStatus),\n        label: 'Current Status'\n      }\n    ];\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}