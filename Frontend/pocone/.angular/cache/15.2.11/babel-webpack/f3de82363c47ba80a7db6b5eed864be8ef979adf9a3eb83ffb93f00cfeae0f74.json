{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Chart } from 'chart.js';\nlet StatusLineChartComponent = class StatusLineChartComponent {\n  constructor(projectService) {\n    this.projectService = projectService;\n    this.projects = [];\n  }\n  ngOnInit() {\n    this.loadProjects();\n  }\n  loadProjects() {\n    this.projectService.getProjects().subscribe(projects => {\n      this.projects = projects;\n    });\n  }\n  onProjectSelect(event) {\n    this.selectedProject = +event.target.value;\n    this.loadStatusHistory();\n  }\n  onMonthChange(event) {\n    this.selectedMonth = event.target.value;\n    this.loadStatusHistory();\n  }\n  loadStatusHistory() {\n    if (this.selectedProject && this.selectedMonth) {\n      this.projectService.getStatusHistory(this.selectedProject, this.selectedMonth).subscribe(data => {\n        this.updateChart(data);\n      });\n    }\n  }\n  updateChart(data) {\n    const labels = data.map(entry => new Date(entry[5]).toLocaleDateString()); // Adjust index based on data structure\n    const statusData = data.map(entry => entry[6]); // Adjust index based on data structure\n    if (this.chart) {\n      this.chart.destroy();\n    }\n    this.chart = new Chart('lineChart', {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Current Status',\n          data: statusData,\n          fill: false,\n          borderColor: 'blue',\n          tension: 0.1\n        }]\n      },\n      options: {\n        responsive: true,\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Status'\n            },\n            suggestedMin: 0,\n            suggestedMax: 5\n          }\n        }\n      }\n    });\n  }\n};\nStatusLineChartComponent = __decorate([Component({\n  selector: 'app-status-line-chart',\n  templateUrl: './status-line-chart.component.html',\n  styleUrls: ['./status-line-chart.component.css']\n})], StatusLineChartComponent);\nexport { StatusLineChartComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAASC,KAAK,QAAuB,UAAU;AAOxC,IAAMC,wBAAwB,GAA9B,MAAMA,wBAAwB;EAMnCC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;IALlC,aAAQ,GAAG,EAAE;EAKwC;EAErDC,QAAQ;IACN,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAA,YAAY;IACV,IAAI,CAACF,cAAc,CAACG,WAAW,EAAE,CAACC,SAAS,CAAEC,QAAe,IAAI;MAC9D,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IAC1B,CAAC,CAAC;EACJ;EAEAC,eAAe,CAACC,KAAY;IAC1B,IAAI,CAACC,eAAe,GAAG,CAAED,KAAK,CAACE,MAA4B,CAACC,KAAK;IACjE,IAAI,CAACC,iBAAiB,EAAE;EAC1B;EAEAC,aAAa,CAACL,KAAY;IACxB,IAAI,CAACM,aAAa,GAAIN,KAAK,CAACE,MAA2B,CAACC,KAAK;IAC7D,IAAI,CAACC,iBAAiB,EAAE;EAC1B;EAEAA,iBAAiB;IACf,IAAI,IAAI,CAACH,eAAe,IAAI,IAAI,CAACK,aAAa,EAAE;MAC9C,IAAI,CAACb,cAAc,CAACc,gBAAgB,CAAC,IAAI,CAACN,eAAe,EAAE,IAAI,CAACK,aAAa,CAAC,CAACT,SAAS,CAACW,IAAI,IAAG;QAC9F,IAAI,CAACC,WAAW,CAACD,IAAI,CAAC;MACxB,CAAC,CAAC;;EAEN;EAEAC,WAAW,CAACD,IAAW;IACrB,MAAME,MAAM,GAAGF,IAAI,CAACG,GAAG,CAACC,KAAK,IAAI,IAAIC,IAAI,CAACD,KAAK,CAAC,CAAC,CAAC,CAAC,CAACE,kBAAkB,EAAE,CAAC,CAAC,CAAC;IAC3E,MAAMC,UAAU,GAAGP,IAAI,CAACG,GAAG,CAACC,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAEhD,IAAI,IAAI,CAACI,KAAK,EAAE;MACd,IAAI,CAACA,KAAK,CAACC,OAAO,EAAE;;IAGtB,IAAI,CAACD,KAAK,GAAG,IAAI1B,KAAK,CAAC,WAAW,EAAE;MAClC4B,IAAI,EAAE,MAAM;MACZV,IAAI,EAAE;QACJE,MAAM,EAAEA,MAAM;QACdS,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,gBAAgB;UACvBZ,IAAI,EAAEO,UAAU;UAChBM,IAAI,EAAE,KAAK;UACXC,WAAW,EAAE,MAAM;UACnBC,OAAO,EAAE;SACV;OAEJ;MACDC,OAAO,EAAE;QACPC,UAAU,EAAE,IAAI;QAChBC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,KAAK,EAAE;cACLC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE;;WAET;UACDC,CAAC,EAAE;YACDH,KAAK,EAAE;cACLC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE;aACP;YACDE,YAAY,EAAE,CAAC;YACfC,YAAY,EAAE;;;;KAIrB,CAAC;EACJ;CACD;AA/EY1C,wBAAwB,eALpCF,SAAS,CAAC;EACT6C,QAAQ,EAAE,uBAAuB;EACjCC,WAAW,EAAE,oCAAoC;EACjDC,SAAS,EAAE,CAAC,mCAAmC;CAChD,CAAC,GACW7C,wBAAwB,CA+EpC;SA/EYA,wBAAwB","names":["Component","Chart","StatusLineChartComponent","constructor","projectService","ngOnInit","loadProjects","getProjects","subscribe","projects","onProjectSelect","event","selectedProject","target","value","loadStatusHistory","onMonthChange","selectedMonth","getStatusHistory","data","updateChart","labels","map","entry","Date","toLocaleDateString","statusData","chart","destroy","type","datasets","label","fill","borderColor","tension","options","responsive","scales","x","title","display","text","y","suggestedMin","suggestedMax","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/monthly-status/monthly-status.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ProjectService } from '../project.service';\nimport { Chart, registerables } from 'chart.js';\n\n@Component({\n  selector: 'app-status-line-chart',\n  templateUrl: './status-line-chart.component.html',\n  styleUrls: ['./status-line-chart.component.css']\n})\nexport class StatusLineChartComponent implements OnInit {\n  projects = [];\n  selectedProject: number;\n  selectedMonth: string;\n  chart: Chart | undefined;\n\n  constructor(private projectService: ProjectService) {}\n\n  ngOnInit(): void {\n    this.loadProjects();\n  }\n\n  loadProjects(): void {\n    this.projectService.getProjects().subscribe((projects: any[]) => {\n      this.projects = projects;\n    });\n  }\n\n  onProjectSelect(event: Event): void {\n    this.selectedProject = +(event.target as HTMLSelectElement).value;\n    this.loadStatusHistory();\n  }\n\n  onMonthChange(event: Event): void {\n    this.selectedMonth = (event.target as HTMLInputElement).value;\n    this.loadStatusHistory();\n  }\n\n  loadStatusHistory(): void {\n    if (this.selectedProject && this.selectedMonth) {\n      this.projectService.getStatusHistory(this.selectedProject, this.selectedMonth).subscribe(data => {\n        this.updateChart(data);\n      });\n    }\n  }\n\n  updateChart(data: any[]): void {\n    const labels = data.map(entry => new Date(entry[5]).toLocaleDateString()); // Adjust index based on data structure\n    const statusData = data.map(entry => entry[6]); // Adjust index based on data structure\n\n    if (this.chart) {\n      this.chart.destroy();\n    }\n\n    this.chart = new Chart('lineChart', {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: 'Current Status',\n            data: statusData,\n            fill: false,\n            borderColor: 'blue',\n            tension: 0.1\n          }\n        ]\n      },\n      options: {\n        responsive: true,\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Status'\n            },\n            suggestedMin: 0,\n            suggestedMax: 5\n          }\n        }\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}