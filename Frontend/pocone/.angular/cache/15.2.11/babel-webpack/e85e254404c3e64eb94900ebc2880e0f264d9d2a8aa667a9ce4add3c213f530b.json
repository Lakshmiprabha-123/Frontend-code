{"ast":null,"code":"// import { Component, OnInit } from '@angular/core';\n// import { ProjectService } from '../Services/project.service';\n// import { Project } from '../Models/project.model';\n// import { Label, Color, SingleDataSet } from 'ng2-charts';\n// import { Chart, ChartOptions, ChartType } from 'chart.js';\nimport { __decorate } from \"tslib\";\n// @Component({\n//   selector: 'app-team-composition-chart',\n//   templateUrl: './team-composition-chart.component.html',\n//   styleUrls: ['./team-composition-chart.component.css']\n// })\n// export class TeamCompositionChartComponent implements OnInit {\n//   projects: Project[] = [];\n//   selectedProject: Project | null = null;\n//   pieChartLabels: Label[] = [];\n//   pieChartData: SingleDataSet = [];\n//   pieChartType: ChartType = 'pie';\n//   pieChartOptions: ChartOptions = {\n//     responsive: true,\n//     plugins: {\n//       legend: {\n//         display: true,\n//         position: 'right',\n//         align: 'left',  \n//         labels: {\n//           boxWidth: 20, \n//           padding: 10,  \n//         }\n//       }\n//     }\n//   };\n//   pieChartOptions: ChartOptions = {\n//   responsive: true,\n//   plugins: {\n//     legend: {\n//       display: true,\n//       position: 'right',  // Legends on the right side\n//       labels: {\n//         boxWidth: 20,     // Size of the color box next to the label\n//         padding: 15,      // Space between the labels\n//         font: {\n//           size: 14        // Legend font size\n//         },\n//         generateLabels: (chart: Chart) => {\n//           const data = chart.data;\n//           if (data.labels && data.datasets && data.datasets[0] && data.datasets[0].data) {\n//             return data.labels.map((label: string | number | string[] | number[] | Date, index: number) => {\n//               const value = data.datasets![0].data![index];  // Get the value from the pie chart data\n//               // Convert the label to a string, handling arrays and complex types\n//               let labelString = '';\n//               if (typeof label === 'string' || typeof label === 'number') {\n//                 labelString = label.toString();  // Direct conversion for strings and numbers\n//               } else if (Array.isArray(label)) {\n//                 labelString = label.join(', ');  // Convert arrays to a comma-separated string\n//               } else if (label instanceof Date) {\n//                 labelString = label.toDateString();  // Convert Date objects to a readable string\n//               }\n//               // Check if backgroundColor is an array before accessing it\n//               const backgroundColor = data.datasets![0].backgroundColor;\n//               let fillStyle = '#000';  // Default to black if color is not found\n//               if (Array.isArray(backgroundColor)) {\n//                 fillStyle = (backgroundColor[index] as string) || '#000';  // Access the color safely\n//               }\n//               return {\n//                 text: `${labelString}: ${value}`,  // Combine the label and value for the legend\n//                 fillStyle: fillStyle,  // Set the color for the legend\n//                 strokeStyle: '#fff',  // White stroke for the legend box\n//                 lineWidth: 2,\n//                 hidden: isNaN(value as number) || value === null,  // Hide if value is NaN or null\n//                 index: index\n//               };\n//             });\n//           }\n//           return [];\n//         }\n//       }\n//     }\n//   },\n//   layout: {\n//     padding: {\n//       right: 20,  // Add extra padding on the right for the legend\n//     }\n//   }\n// };\n//   pieChartColors: Color[] = [\n//     {\n//       backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#E6E6FA', '#F08080', '#90EE90', '#FFA07A' ]\n//     }\n//   ];\n//   constructor(private projectService: ProjectService) {}\n//   ngOnInit(): void {\n//     this.projectService.getAllProjects().subscribe((projects: Project[]) => {\n//       this.projects = projects;\n//       if (this.projects.length > 0) {\n//         this.onProjectSelect({ target: { value: this.projects[0].id } });\n//       }\n//     });\n//   }\n//   onProjectSelect(event: any): void {\n//     const selectedProjectId = +event.target.value;\n//     const selectedProject = this.projects.find(project => project.id === selectedProjectId);\n//     if (selectedProject && selectedProject.status) {\n//       const teamComposition = selectedProject.status.teamComposition;\n//       this.pieChartLabels = Object.keys(teamComposition);\n//       this.pieChartData = Object.values(teamComposition);\n//       this.selectedProject = selectedProject;\n//     } else {\n//       this.pieChartLabels = [];\n//       this.pieChartData = [];\n//       this.selectedProject = null;\n//     }\n//   }\n// }\nimport { Component } from '@angular/core';\nlet TeamCompositionChartComponent = class TeamCompositionChartComponent {\n  constructor(projectService) {\n    this.projectService = projectService;\n    this.projects = [];\n    this.selectedProject = null;\n    this.pieChartLabels = [];\n    this.pieChartData = [];\n    this.pieChartType = 'pie'; // Use ChartType for chart type\n    this.pieChartOptions = {\n      responsive: true,\n      plugins: {\n        legend: {\n          display: true,\n          position: 'right',\n          align: 'left',\n          labels: {\n            generateLabels: chart => {\n              const data = chart.data;\n              if (data.labels && data.datasets && data.datasets[0] && data.datasets[0].data) {\n                return data.labels.map((label, index) => {\n                  const value = data.datasets[0].data[index];\n                  const labelText = typeof label === 'string' || typeof label === 'number' ? label.toString() : '';\n                  // Log the label and value to the console\n                  console.log(`Legend Item - Label: ${labelText}, Value: ${value} members`);\n                  // Ensure backgroundColor is an array and safely access it\n                  const backgroundColor = data.datasets[0].backgroundColor;\n                  const fillStyle = Array.isArray(backgroundColor) ? backgroundColor[index] : '#000';\n                  return {\n                    text: `${label}: ${value} members`,\n                    fillStyle: fillStyle,\n                    strokeStyle: '#fff',\n                    lineWidth: 2,\n                    hidden: false,\n                    index: index\n                  };\n                });\n              }\n              return [];\n            }\n          }\n        }\n      }\n    };\n    this.pieChartColors = [{\n      backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#E6E6FA', '#F08080', '#90EE90', '#FFA07A']\n    }];\n  }\n  ngOnInit() {\n    console.log('Component initialized');\n    this.projectService.getAllProjects().subscribe(projects => {\n      this.projects = projects;\n      if (this.projects.length > 0) {\n        this.onProjectSelect({\n          target: {\n            value: this.projects[0].id\n          }\n        });\n      }\n    });\n  }\n  onProjectSelect(event) {\n    const selectedProjectId = +event.target.value;\n    const selectedProject = this.projects.find(project => project.id === selectedProjectId);\n    if (selectedProject && selectedProject.status) {\n      const teamComposition = selectedProject.status.teamComposition;\n      // Log the team composition object to the console\n      console.log('Team Composition:', teamComposition);\n      this.pieChartLabels = Object.keys(teamComposition);\n      this.pieChartData = Object.values(teamComposition);\n      // Log the labels and data for the chart\n      console.log('Pie Chart Labels:', this.pieChartLabels);\n      console.log('Pie Chart Data (Number of Members):', this.pieChartData);\n      this.selectedProject = selectedProject;\n    } else {\n      this.pieChartLabels = [];\n      this.pieChartData = [];\n      this.selectedProject = null;\n    }\n  }\n};\nTeamCompositionChartComponent = __decorate([Component({\n  selector: 'app-team-composition-chart',\n  templateUrl: './team-composition-chart.component.html',\n  styleUrls: ['./team-composition-chart.component.css']\n})], TeamCompositionChartComponent);\nexport { TeamCompositionChartComponent };","map":{"version":3,"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","names":["Component","TeamCompositionChartComponent","constructor","projectService","responsive","plugins","legend","display","position","align","labels","generateLabels","chart","data","datasets","map","label","index","value","labelText","toString","console","log","backgroundColor","fillStyle","Array","isArray","text","strokeStyle","lineWidth","hidden","ngOnInit","getAllProjects","subscribe","projects","length","onProjectSelect","target","id","event","selectedProjectId","selectedProject","find","project","status","teamComposition","pieChartLabels","Object","keys","pieChartData","values","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/team-composition-chart/team-composition-chart.component.ts"],"sourcesContent":["// import { Component, OnInit } from '@angular/core';\n// import { ProjectService } from '../Services/project.service';\n// import { Project } from '../Models/project.model';\n// import { Label, Color, SingleDataSet } from 'ng2-charts';\n// import { Chart, ChartOptions, ChartType } from 'chart.js';\n\n// @Component({\n//   selector: 'app-team-composition-chart',\n//   templateUrl: './team-composition-chart.component.html',\n//   styleUrls: ['./team-composition-chart.component.css']\n// })\n// export class TeamCompositionChartComponent implements OnInit {\n//   projects: Project[] = [];\n//   selectedProject: Project | null = null;\n//   pieChartLabels: Label[] = [];\n//   pieChartData: SingleDataSet = [];\n//   pieChartType: ChartType = 'pie';\n//   pieChartOptions: ChartOptions = {\n//     responsive: true,\n//     plugins: {\n//       legend: {\n//         display: true,\n//         position: 'right',\n//         align: 'left',  \n//         labels: {\n//           boxWidth: 20, \n//           padding: 10,  \n//         }\n//       }\n//     }\n//   };\n//   pieChartOptions: ChartOptions = {\n//   responsive: true,\n//   plugins: {\n//     legend: {\n//       display: true,\n//       position: 'right',  // Legends on the right side\n//       labels: {\n//         boxWidth: 20,     // Size of the color box next to the label\n//         padding: 15,      // Space between the labels\n//         font: {\n//           size: 14        // Legend font size\n//         },\n//         generateLabels: (chart: Chart) => {\n//           const data = chart.data;\n        \n//           if (data.labels && data.datasets && data.datasets[0] && data.datasets[0].data) {\n//             return data.labels.map((label: string | number | string[] | number[] | Date, index: number) => {\n              \n//               const value = data.datasets![0].data![index];  // Get the value from the pie chart data\n        \n//               // Convert the label to a string, handling arrays and complex types\n//               let labelString = '';\n        \n//               if (typeof label === 'string' || typeof label === 'number') {\n//                 labelString = label.toString();  // Direct conversion for strings and numbers\n//               } else if (Array.isArray(label)) {\n//                 labelString = label.join(', ');  // Convert arrays to a comma-separated string\n//               } else if (label instanceof Date) {\n//                 labelString = label.toDateString();  // Convert Date objects to a readable string\n//               }\n        \n//               // Check if backgroundColor is an array before accessing it\n//               const backgroundColor = data.datasets![0].backgroundColor;\n//               let fillStyle = '#000';  // Default to black if color is not found\n        \n//               if (Array.isArray(backgroundColor)) {\n//                 fillStyle = (backgroundColor[index] as string) || '#000';  // Access the color safely\n//               }\n        \n//               return {\n//                 text: `${labelString}: ${value}`,  // Combine the label and value for the legend\n//                 fillStyle: fillStyle,  // Set the color for the legend\n//                 strokeStyle: '#fff',  // White stroke for the legend box\n//                 lineWidth: 2,\n//                 hidden: isNaN(value as number) || value === null,  // Hide if value is NaN or null\n//                 index: index\n//               };\n//             });\n//           }\n        \n//           return [];\n//         }\n               \n        \n        \n//       }\n//     }\n//   },\n//   layout: {\n//     padding: {\n//       right: 20,  // Add extra padding on the right for the legend\n//     }\n//   }\n// };\n\n//   pieChartColors: Color[] = [\n//     {\n//       backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#E6E6FA', '#F08080', '#90EE90', '#FFA07A' ]\n//     }\n//   ];\n\n//   constructor(private projectService: ProjectService) {}\n\n//   ngOnInit(): void {\n//     this.projectService.getAllProjects().subscribe((projects: Project[]) => {\n//       this.projects = projects;\n//       if (this.projects.length > 0) {\n//         this.onProjectSelect({ target: { value: this.projects[0].id } });\n//       }\n//     });\n//   }\n\n//   onProjectSelect(event: any): void {\n//     const selectedProjectId = +event.target.value;\n//     const selectedProject = this.projects.find(project => project.id === selectedProjectId);\n\n//     if (selectedProject && selectedProject.status) {\n//       const teamComposition = selectedProject.status.teamComposition;\n//       this.pieChartLabels = Object.keys(teamComposition);\n//       this.pieChartData = Object.values(teamComposition);\n//       this.selectedProject = selectedProject;\n//     } else {\n//       this.pieChartLabels = [];\n//       this.pieChartData = [];\n//       this.selectedProject = null;\n//     }\n//   }\n// }\nimport { Component, OnInit } from '@angular/core';\nimport { ProjectService } from '../Services/project.service';\nimport { Project } from '../Models/project.model';\nimport { Label, Color, SingleDataSet } from 'ng2-charts';\nimport { ChartOptions, Chart, ChartData, ChartType } from 'chart.js';\n\n@Component({\n  selector: 'app-team-composition-chart',\n  templateUrl: './team-composition-chart.component.html',\n  styleUrls: ['./team-composition-chart.component.css']\n})\nexport class TeamCompositionChartComponent implements OnInit {\n  projects: Project[] = [];\n  selectedProject: Project | null = null;\n  pieChartLabels: Label[] = [];\n  pieChartData: SingleDataSet = [];\n  pieChartType: ChartType = 'pie'; // Use ChartType for chart type\n  pieChartOptions: ChartOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: true,\n        position: 'right',\n        align: 'left',\n        labels: {\n          generateLabels: (chart: any) => {\n            const data = chart.data;\n            if (data.labels && data.datasets && data.datasets[0] && data.datasets[0].data) {\n              return data.labels.map((label: string | number, index: number) => {\n                const value = data.datasets[0].data[index] as number;\n                const labelText = typeof label === 'string' || typeof label === 'number' ? label.toString() : '';\n      \n                // Log the label and value to the console\n                console.log(`Legend Item - Label: ${labelText}, Value: ${value} members`);\n      \n                // Ensure backgroundColor is an array and safely access it\n                const backgroundColor = data.datasets[0].backgroundColor as string[];\n                const fillStyle = Array.isArray(backgroundColor) ? backgroundColor[index] : '#000';\n      \n                return {\n                  text: `${label}: ${value} members`,\n                  fillStyle: fillStyle,\n                  strokeStyle: '#fff',\n                  lineWidth: 2,\n                  hidden: false,\n                  index: index\n                };\n              });\n            }\n            return [];\n          }\n        }\n      }\n      \n      \n      \n    }\n  };\n  pieChartColors: Color[] = [\n    {\n      backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#E6E6FA', '#F08080', '#90EE90', '#FFA07A']\n    }\n  ];\n\n  constructor(private projectService: ProjectService) {}\n\n  ngOnInit(): void {\n    console.log('Component initialized');\n    this.projectService.getAllProjects().subscribe((projects: Project[]) => {\n      this.projects = projects;\n      if (this.projects.length > 0) {\n        this.onProjectSelect({ target: { value: this.projects[0].id } });\n      }\n    });\n  }\n\n  onProjectSelect(event: any): void {\n    const selectedProjectId = +event.target.value;\n    const selectedProject = this.projects.find(project => project.id === selectedProjectId);\n  \n    if (selectedProject && selectedProject.status) {\n      const teamComposition = selectedProject.status.teamComposition;\n  \n      // Log the team composition object to the console\n      console.log('Team Composition:', teamComposition);\n  \n      this.pieChartLabels = Object.keys(teamComposition);\n      this.pieChartData = Object.values(teamComposition);\n  \n      // Log the labels and data for the chart\n      console.log('Pie Chart Labels:', this.pieChartLabels);\n      console.log('Pie Chart Data (Number of Members):', this.pieChartData);\n  \n      this.selectedProject = selectedProject;\n    } else {\n      this.pieChartLabels = [];\n      this.pieChartData = [];\n      this.selectedProject = null;\n    }\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}