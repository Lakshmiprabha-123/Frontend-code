{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/project.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction MonthlyStatusComponent_option_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const project_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", project_r1.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(project_r1.name);\n  }\n}\nexport class MonthlyStatusComponent {\n  constructor(projectService) {\n    this.projectService = projectService;\n    this.projects = [];\n    // Register Chart.js components\n    Chart.register(...registerables);\n  }\n  ngOnInit() {\n    this.loadProjects();\n  }\n  loadProjects() {\n    this.projectService.getAllProjects().subscribe(projects => {\n      this.projects = projects;\n    });\n  }\n  onProjectSelect(event) {\n    this.selectedProject = +event.target.value;\n    this.loadStatusHistory();\n  }\n  onMonthChange(event) {\n    this.selectedMonth = event.target.value;\n    this.loadStatusHistory();\n  }\n  loadStatusHistory() {\n    if (this.selectedProject && this.selectedMonth) {\n      this.projectService.getStatusHistory(this.selectedProject, this.selectedMonth).subscribe(data => {\n        this.updateChart(data);\n      });\n    }\n  }\n  updateChart(data) {\n    const labels = data.map(entry => new Date(entry[5]).toLocaleDateString()); // Date field\n    const statusData = data.map(entry => entry[6]); // Status field\n    if (this.chart) {\n      this.chart.destroy();\n    }\n    this.chart = new Chart('lineChart', {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Current Status',\n          data: statusData,\n          fill: false,\n          borderColor: 'blue',\n          tension: 0.1\n        }]\n      },\n      options: {\n        responsive: true,\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Status'\n            },\n            suggestedMin: 0,\n            suggestedMax: 5\n          }\n        }\n      }\n    });\n  }\n  static #_ = this.ɵfac = function MonthlyStatusComponent_Factory(t) {\n    return new (t || MonthlyStatusComponent)(i0.ɵɵdirectiveInject(i1.ProjectService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MonthlyStatusComponent,\n    selectors: [[\"app-monthly-status\"]],\n    decls: 10,\n    vars: 1,\n    consts: [[1, \"dashboard-container\"], [1, \"chart-container\"], [\"for\", \"project\"], [\"id\", \"project\", 2, \"width\", \"200px\", 3, \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"month\"], [\"id\", \"month\", \"type\", \"month\", 2, \"width\", \"200px\", 3, \"change\"], [\"id\", \"lineChart\"], [3, \"value\"]],\n    template: function MonthlyStatusComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"label\", 2);\n        i0.ɵɵtext(3, \"Select Project:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"select\", 3);\n        i0.ɵɵlistener(\"change\", function MonthlyStatusComponent_Template_select_change_4_listener($event) {\n          return ctx.onProjectSelect($event);\n        });\n        i0.ɵɵtemplate(5, MonthlyStatusComponent_option_5_Template, 2, 2, \"option\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"label\", 5);\n        i0.ɵɵtext(7, \"Select Month:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"input\", 6);\n        i0.ɵɵlistener(\"change\", function MonthlyStatusComponent_Template_input_change_8_listener($event) {\n          return ctx.onMonthChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"canvas\", 7);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.projects);\n      }\n    },\n    dependencies: [i2.NgForOf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption],\n    styles: [\".dashboard-container[_ngcontent-%COMP%] {\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 100vh;\\n  }\\n  \\n  .chart-container[_ngcontent-%COMP%] {\\n    width: 80%;\\n    max-width: 1200px;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbW9udGhseS1zdGF0dXMvbW9udGhseS1zdGF0dXMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0lBQ25CLGFBQWE7RUFDZjs7RUFFQTtJQUNFLFVBQVU7SUFDVixpQkFBaUI7RUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyIuZGFzaGJvYXJkLWNvbnRhaW5lciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGhlaWdodDogMTAwdmg7XG4gIH1cbiAgXG4gIC5jaGFydC1jb250YWluZXIge1xuICAgIHdpZHRoOiA4MCU7XG4gICAgbWF4LXdpZHRoOiAxMjAwcHg7XG4gIH1cbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["i0","MonthlyStatusComponent","constructor","projectService","Chart","register","registerables","ngOnInit","loadProjects","getAllProjects","subscribe","projects","onProjectSelect","event","selectedProject","target","value","loadStatusHistory","onMonthChange","selectedMonth","getStatusHistory","data","updateChart","labels","map","entry","Date","toLocaleDateString","statusData","chart","destroy","type","datasets","label","fill","borderColor","tension","options","responsive","scales","x","title","display","text","y","suggestedMin","suggestedMax","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/monthly-status/monthly-status.component.html","/home/decodersmdu/pocone/src/app/monthly-status/monthly-status.component.ts"],"sourcesContent":["<div class=\"dashboard-container\">\n  <div class=\"chart-container\">\n    <label for=\"project\">Select Project:</label>\n    <select id=\"project\" (change)=\"onProjectSelect($event)\" style=\"width: 200px;\">\n      <option *ngFor=\"let project of projects\" [value]=\"project.id\">{{ project.name }}</option>\n    </select>\n\n    <label for=\"month\">Select Month:</label>\n    <input id=\"month\" type=\"month\" (change)=\"onMonthChange($event)\" style=\"width: 200px;\">\n\n    <canvas id=\"lineChart\"></canvas>\n  </div>\n</div>\n","// // import { Component, OnInit } from '@angular/core';\n// // import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n// // import { Color, Label } from 'ng2-charts';\n// // import { ProjectService } from '../Services/project.service';// Adjust the import path as needed\n\n// // @Component({\n// //   selector: 'app-monthly-status',\n// //   templateUrl: './monthly-status.component.html',\n// //   styleUrls: ['./monthly-status.component.css']\n// // })\n// // export class MonthlyStatusComponent implements OnInit {\n// //   projects: any[] = [];\n// //   months: string[] = ['2024-01', '2024-02', '2024-03', '2024-04', '2024-05','2024-06','2024-07','2024-08']; // Example months, adjust as needed\n// //   selectedProjectId: number | null = null;\n// //   selectedMonth: string | null = null;\n\n// //   lineChartData: ChartDataSets[] = [];\n// //   lineChartLabels: Label[] = [];\n// //   lineChartOptions: ChartOptions = {\n// //     responsive: true,\n// //   };\n// //   lineChartLegend = true;\n// //   lineChartType: ChartType = 'line';\n// //   lineChartPlugins = [];\n\n// //   constructor(private projectService: ProjectService) {}\n\n// //   ngOnInit() {\n// //     this.projectService.getAllProjects().subscribe(projects => {\n// //       this.projects = projects;\n// //     });\n// //   }\n\n// //   onProjectSelect(event: any) {\n// //     this.selectedProjectId = event.target.value;\n// //     this.fetchStatusHistory();\n// //   }\n\n// //   onMonthSelect(event: any) {\n// //     this.selectedMonth = event.target.value;\n// //     this.fetchStatusHistory();\n// //   }\n\n// //   fetchStatusHistory() {\n// //     if (this.selectedProjectId && this.selectedMonth) {\n// //       this.projectService.getStatusHistory(this.selectedProjectId, this.selectedMonth).subscribe(statusHistory => {\n// //         this.updateChartData(statusHistory);\n// //       });\n// //     }\n// //   }\n\n// //   updateChartData(statusHistory: any[]) {\n// //     this.lineChartLabels = statusHistory.map(status => status.date); // Assuming 'date' is a field in your status data\n// //     this.lineChartData = [\n// //       { data: statusHistory.map(status => status.value), label: 'Status' } // Assuming 'value' is the field for status value\n// //     ];\n// //   }\n// // }\n// import { Component, OnInit } from '@angular/core';\n// import { ProjectService } from '../Services/project.service'; // Update the path if necessary\n// import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n// import { Color, Label } from 'ng2-charts';\n\n// @Component({\n//   selector: 'app-monthly-status',\n//   templateUrl: './monthly-status.component.html',\n//   styleUrls: ['./monthly-status.component.css']\n// })\n// export class MonthlyStatusComponent implements OnInit {\n//   projects: any[] = [];\n//   selectedProjectId: number | null = null;\n//   selectedMonth: string = '';\n//   months: string[] = [\n//     '2024-01', '2024-02', '2024-03', '2024-04', '2024-05', \n//     '2024-06', '2024-07', '2024-08', '2024-09', '2024-10', \n//     '2024-11', '2024-12'\n//   ];\n  \n//   lineChartData: ChartDataSets[] = [];\n//   lineChartLabels: Label[] = [];\n//   lineChartOptions: ChartOptions = {\n//     responsive: true,\n//     scales: {\n//       xAxes: [{ \n//         scaleLabel: { display: true, labelString: 'Date' },\n//         ticks: { autoSkip: true, maxRotation: 45 }\n//       }],\n//       yAxes: [{ \n//         scaleLabel: { display: true, labelString: 'Status' }\n//       }]\n//     }\n//   };\n//   lineChartLegend = true;\n//   lineChartType: ChartType = 'line';\n//   lineChartColors: Color[] = [\n//     { borderColor: '#42A5F5', backgroundColor: 'rgba(66, 165, 245, 0.3)' }\n//   ];\n\n//   constructor(private projectService: ProjectService) { }\n\n//   ngOnInit() {\n//         this.projectService.getAllProjects().subscribe(projects => {\n//           this.projects = projects;\n//        });\n//       }\n\n//   onProjectSelect(event: any): void {\n//     this.selectedProjectId = event.target.value;\n//     this.fetchStatusHistory();\n//   }\n\n//   onMonthSelect(event: any): void {\n//     this.selectedMonth = event.target.value;\n//     this.fetchStatusHistory();\n//   }\n\n//   fetchStatusHistory(): void {\n//     if (this.selectedProjectId && this.selectedMonth) {\n//       this.projectService.getStatusHistory(this.selectedProjectId, this.selectedMonth).subscribe(statusHistory => {\n//         this.updateChart(statusHistory);\n//       });\n//     }\n//   }\n\n//   updateChart(statusHistory: any[]): void {\n//     this.lineChartLabels = statusHistory.map(status => status.date);\n//     this.lineChartData = [\n//       {\n//         data: statusHistory.map(status => status.currentStatus),\n//         label: 'Current Status'\n//       }\n//     ];\n//   }\n// }\nimport { Component, OnInit } from '@angular/core';\n import { ProjectService } from '../Services/project.service'; // Update the path if necessary\n import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n import { Color, Label } from 'ng2-charts';\n\n@Component({\n  selector: 'app-monthly-status',\n  templateUrl: './monthly-status.component.html',\n  styleUrls: ['./monthly-status.component.css']\n})\nexport class MonthlyStatusComponent implements OnInit {\n  projects = [];\n  selectedProject: number;\n  selectedMonth: string;\n  chart: Chart | undefined;\n\n  constructor(private projectService: ProjectService) {\n    // Register Chart.js components\n    Chart.register(...registerables);\n  }\n\n  ngOnInit(): void {\n    this.loadProjects();\n  }\n\n  loadProjects(): void {\n    this.projectService.getAllProjects().subscribe((projects: any[]) => {\n      this.projects = projects;\n    });\n  }\n\n  onProjectSelect(event: Event): void {\n    this.selectedProject = +(event.target as HTMLSelectElement).value;\n    this.loadStatusHistory();\n  }\n\n  onMonthChange(event: Event): void {\n    this.selectedMonth = (event.target as HTMLInputElement).value;\n    this.loadStatusHistory();\n  }\n\n  loadStatusHistory(): void {\n    if (this.selectedProject && this.selectedMonth) {\n      this.projectService.getStatusHistory(this.selectedProject, this.selectedMonth).subscribe(data => {\n        this.updateChart(data);\n      });\n    }\n  }\n\n  updateChart(data: any[]): void {\n    const labels = data.map(entry => new Date(entry[5]).toLocaleDateString()); // Date field\n    const statusData = data.map(entry => entry[6]); // Status field\n\n    if (this.chart) {\n      this.chart.destroy();\n    }\n\n    this.chart = new Chart('lineChart', {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: 'Current Status',\n            data: statusData,\n            fill: false,\n            borderColor: 'blue',\n            tension: 0.1\n          }\n        ]\n      },\n      options: {\n        responsive: true,\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Status'\n            },\n            suggestedMin: 0,\n            suggestedMax: 5\n          }\n        }\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}