{"ast":null,"code":"\"use strict\";\n\n// import { Component, OnInit } from '@angular/core';\n// import { ProjectService } from '../Services/project.service';\n// import { Project } from '../Models/project.model';\n// import { Label, Color, SingleDataSet } from 'ng2-charts';\n// import { Chart, ChartOptions, ChartType } from 'chart.js';\n// @Component({\n//   selector: 'app-team-composition-chart',\n//   templateUrl: './team-composition-chart.component.html',\n//   styleUrls: ['./team-composition-chart.component.css']\n// })\n// export class TeamCompositionChartComponent implements OnInit {\n//   projects: Project[] = [];\n//   selectedProject: Project | null = null;\n//   pieChartLabels: Label[] = [];\n//   pieChartData: SingleDataSet = [];\n//   pieChartType: ChartType = 'pie';\n//   pieChartOptions: ChartOptions = {\n//     responsive: true,\n//     plugins: {\n//       legend: {\n//         display: true,\n//         position: 'right',\n//         align: 'left',  \n//         labels: {\n//           boxWidth: 20, \n//           padding: 10,  \n//         }\n//       }\n//     }\n//   };\n//   pieChartOptions: ChartOptions = {\n//   responsive: true,\n//   plugins: {\n//     legend: {\n//       display: true,\n//       position: 'right',  // Legends on the right side\n//       labels: {\n//         boxWidth: 20,     // Size of the color box next to the label\n//         padding: 15,      // Space between the labels\n//         font: {\n//           size: 14        // Legend font size\n//         },\n//         generateLabels: (chart: Chart) => {\n//           const data = chart.data;\n//           if (data.labels && data.datasets && data.datasets[0] && data.datasets[0].data) {\n//             return data.labels.map((label: string | number | string[] | number[] | Date, index: number) => {\n//               const value = data.datasets![0].data![index];  // Get the value from the pie chart data\n//               // Convert the label to a string, handling arrays and complex types\n//               let labelString = '';\n//               if (typeof label === 'string' || typeof label === 'number') {\n//                 labelString = label.toString();  // Direct conversion for strings and numbers\n//               } else if (Array.isArray(label)) {\n//                 labelString = label.join(', ');  // Convert arrays to a comma-separated string\n//               } else if (label instanceof Date) {\n//                 labelString = label.toDateString();  // Convert Date objects to a readable string\n//               }\n//               // Check if backgroundColor is an array before accessing it\n//               const backgroundColor = data.datasets![0].backgroundColor;\n//               let fillStyle = '#000';  // Default to black if color is not found\n//               if (Array.isArray(backgroundColor)) {\n//                 fillStyle = (backgroundColor[index] as string) || '#000';  // Access the color safely\n//               }\n//               return {\n//                 text: `${labelString}: ${value}`,  // Combine the label and value for the legend\n//                 fillStyle: fillStyle,  // Set the color for the legend\n//                 strokeStyle: '#fff',  // White stroke for the legend box\n//                 lineWidth: 2,\n//                 hidden: isNaN(value as number) || value === null,  // Hide if value is NaN or null\n//                 index: index\n//               };\n//             });\n//           }\n//           return [];\n//         }\n//       }\n//     }\n//   },\n//   layout: {\n//     padding: {\n//       right: 20,  // Add extra padding on the right for the legend\n//     }\n//   }\n// };\n//   pieChartColors: Color[] = [\n//     {\n//       backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#E6E6FA', '#F08080', '#90EE90', '#FFA07A' ]\n//     }\n//   ];\n//   constructor(private projectService: ProjectService) {}\n//   ngOnInit(): void {\n//     this.projectService.getAllProjects().subscribe((projects: Project[]) => {\n//       this.projects = projects;\n//       if (this.projects.length > 0) {\n//         this.onProjectSelect({ target: { value: this.projects[0].id } });\n//       }\n//     });\n//   }\n//   onProjectSelect(event: any): void {\n//     const selectedProjectId = +event.target.value;\n//     const selectedProject = this.projects.find(project => project.id === selectedProjectId);\n//     if (selectedProject && selectedProject.status) {\n//       const teamComposition = selectedProject.status.teamComposition;\n//       this.pieChartLabels = Object.keys(teamComposition);\n//       this.pieChartData = Object.values(teamComposition);\n//       this.selectedProject = selectedProject;\n//     } else {\n//       this.pieChartLabels = [];\n//       this.pieChartData = [];\n//       this.selectedProject = null;\n//     }\n//   }\n// }","map":{"version":3,"mappings":";;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","names":[],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/team-composition-chart/team-composition-chart.component.ts"],"sourcesContent":["// import { Component, OnInit } from '@angular/core';\n// import { ProjectService } from '../Services/project.service';\n// import { Project } from '../Models/project.model';\n// import { Label, Color, SingleDataSet } from 'ng2-charts';\n// import { Chart, ChartOptions, ChartType } from 'chart.js';\n\n// @Component({\n//   selector: 'app-team-composition-chart',\n//   templateUrl: './team-composition-chart.component.html',\n//   styleUrls: ['./team-composition-chart.component.css']\n// })\n// export class TeamCompositionChartComponent implements OnInit {\n//   projects: Project[] = [];\n//   selectedProject: Project | null = null;\n//   pieChartLabels: Label[] = [];\n//   pieChartData: SingleDataSet = [];\n//   pieChartType: ChartType = 'pie';\n//   pieChartOptions: ChartOptions = {\n//     responsive: true,\n//     plugins: {\n//       legend: {\n//         display: true,\n//         position: 'right',\n//         align: 'left',  \n//         labels: {\n//           boxWidth: 20, \n//           padding: 10,  \n//         }\n//       }\n//     }\n//   };\n//   pieChartOptions: ChartOptions = {\n//   responsive: true,\n//   plugins: {\n//     legend: {\n//       display: true,\n//       position: 'right',  // Legends on the right side\n//       labels: {\n//         boxWidth: 20,     // Size of the color box next to the label\n//         padding: 15,      // Space between the labels\n//         font: {\n//           size: 14        // Legend font size\n//         },\n//         generateLabels: (chart: Chart) => {\n//           const data = chart.data;\n        \n//           if (data.labels && data.datasets && data.datasets[0] && data.datasets[0].data) {\n//             return data.labels.map((label: string | number | string[] | number[] | Date, index: number) => {\n              \n//               const value = data.datasets![0].data![index];  // Get the value from the pie chart data\n        \n//               // Convert the label to a string, handling arrays and complex types\n//               let labelString = '';\n        \n//               if (typeof label === 'string' || typeof label === 'number') {\n//                 labelString = label.toString();  // Direct conversion for strings and numbers\n//               } else if (Array.isArray(label)) {\n//                 labelString = label.join(', ');  // Convert arrays to a comma-separated string\n//               } else if (label instanceof Date) {\n//                 labelString = label.toDateString();  // Convert Date objects to a readable string\n//               }\n        \n//               // Check if backgroundColor is an array before accessing it\n//               const backgroundColor = data.datasets![0].backgroundColor;\n//               let fillStyle = '#000';  // Default to black if color is not found\n        \n//               if (Array.isArray(backgroundColor)) {\n//                 fillStyle = (backgroundColor[index] as string) || '#000';  // Access the color safely\n//               }\n        \n//               return {\n//                 text: `${labelString}: ${value}`,  // Combine the label and value for the legend\n//                 fillStyle: fillStyle,  // Set the color for the legend\n//                 strokeStyle: '#fff',  // White stroke for the legend box\n//                 lineWidth: 2,\n//                 hidden: isNaN(value as number) || value === null,  // Hide if value is NaN or null\n//                 index: index\n//               };\n//             });\n//           }\n        \n//           return [];\n//         }\n               \n        \n        \n//       }\n//     }\n//   },\n//   layout: {\n//     padding: {\n//       right: 20,  // Add extra padding on the right for the legend\n//     }\n//   }\n// };\n\n//   pieChartColors: Color[] = [\n//     {\n//       backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#E6E6FA', '#F08080', '#90EE90', '#FFA07A' ]\n//     }\n//   ];\n\n//   constructor(private projectService: ProjectService) {}\n\n//   ngOnInit(): void {\n//     this.projectService.getAllProjects().subscribe((projects: Project[]) => {\n//       this.projects = projects;\n//       if (this.projects.length > 0) {\n//         this.onProjectSelect({ target: { value: this.projects[0].id } });\n//       }\n//     });\n//   }\n\n//   onProjectSelect(event: any): void {\n//     const selectedProjectId = +event.target.value;\n//     const selectedProject = this.projects.find(project => project.id === selectedProjectId);\n\n//     if (selectedProject && selectedProject.status) {\n//       const teamComposition = selectedProject.status.teamComposition;\n//       this.pieChartLabels = Object.keys(teamComposition);\n//       this.pieChartData = Object.values(teamComposition);\n//       this.selectedProject = selectedProject;\n//     } else {\n//       this.pieChartLabels = [];\n//       this.pieChartData = [];\n//       this.selectedProject = null;\n//     }\n//   }\n// }"]},"metadata":{},"sourceType":"script","externalDependencies":[]}