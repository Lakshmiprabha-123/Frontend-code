{"ast":null,"code":"import { StatusEnum } from '../enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/project.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class AddStatusComponent {\n  constructor(projectService, router, route) {\n    this.projectService = projectService;\n    this.router = router;\n    this.route = route;\n    this.teamCompositionLabels = [\"QA Engineers\", \"Frontend Developers\", \"Scrum Master\", \"Backend Developers\", \"Technical Lead\", \"Marketing and Sales\", \"Stakeholders\", \"UI/UX Designers\", \"DevOps Engineers\", \"BA\"];\n    this.statusEnum = StatusEnum; // Enum reference for template binding\n    this.status = {\n      id: 0,\n      risksInDelivery: false,\n      teamComposition: {},\n      processFlows: StatusEnum.NOT_YET,\n      defectsReport: false,\n      numberOfDefects: 0,\n      dailyUpdates: StatusEnum.NOT_YET,\n      qaUpdates: StatusEnum.NOT_YET,\n      sonarqube: StatusEnum.NOT_YET,\n      weeklyReports: StatusEnum.NOT_YET,\n      closeClientCommunication: StatusEnum.NOT_YET,\n      gitReport: StatusEnum.NOT_YET,\n      escalation: StatusEnum.NOT_YET,\n      boardUpdates: StatusEnum.NOT_YET\n    };\n    this.projectId = 0;\n    this.teamCompositionString = '';\n    this.projects = [];\n    this.isUpdateMode = false;\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      if (params['projectId']) {\n        this.projectId = +params['projectId'];\n        this.checkCurrentStatus();\n      }\n    });\n    this.route.url.subscribe(url => {\n      if (url.some(segment => segment.path === 'update-status')) {\n        this.isUpdateMode = true;\n        this.loadStatus();\n      }\n    });\n  }\n  checkCurrentStatus() {\n    this.projectService.getCurrentStatus(this.projectId).subscribe(response => {\n      if (response.status === 'Not Yet Started') {\n        this.isUpdateMode = false;\n        this.resetForm(); // Reset the form for a fresh status\n      } else {\n        this.isUpdateMode = true;\n        this.loadStatus(); // Load the existing status for update\n      }\n    });\n  }\n\n  loadStatus() {\n    this.projectService.getStatus(this.projectId).subscribe(fullStatus => {\n      this.status = fullStatus;\n      this.teamCompositionString = JSON.stringify(this.status.teamComposition); // Convert the team composition back to JSON string for display\n    });\n  }\n\n  onTeamCompositionChange(label, event) {\n    const inputElement = event.target;\n    this.status.teamComposition[label] = Number(inputElement.value);\n    this.teamCompositionString = JSON.stringify(this.status.teamComposition);\n  }\n  onSubmit() {\n    try {\n      // Check if the JSON string is not empty\n      if (this.teamCompositionString.trim()) {\n        this.status.teamComposition = JSON.parse(this.teamCompositionString);\n      } else {\n        throw new Error('Team composition JSON string is empty');\n      }\n      if (this.isUpdateMode) {\n        this.projectService.updateStatus(this.projectId, this.status).subscribe(response => {\n          console.log('Status updated:', response);\n        });\n      } else {\n        this.projectService.saveStatus(this.projectId, this.status).subscribe(response => {\n          console.log('Status added:', response);\n        });\n      }\n    } catch (e) {\n      console.error('Invalid JSON for team composition', e);\n    }\n  }\n  resetForm() {\n    this.status = {\n      id: 0,\n      risksInDelivery: false,\n      teamComposition: {},\n      processFlows: StatusEnum.NOT_YET,\n      defectsReport: false,\n      numberOfDefects: 0,\n      dailyUpdates: StatusEnum.NOT_YET,\n      qaUpdates: StatusEnum.NOT_YET,\n      sonarqube: StatusEnum.NOT_YET,\n      weeklyReports: StatusEnum.NOT_YET,\n      closeClientCommunication: StatusEnum.NOT_YET,\n      gitReport: StatusEnum.NOT_YET,\n      escalation: StatusEnum.NOT_YET,\n      boardUpdates: StatusEnum.NOT_YET\n    };\n    this.teamCompositionString = '';\n  }\n  goBack() {\n    this.router.navigate(['/all-projects']); // Adjust the route to your \"Project List\" page\n  }\n  static #_ = this.ɵfac = function AddStatusComponent_Factory(t) {\n    return new (t || AddStatusComponent)(i0.ɵɵdirectiveInject(i1.ProjectService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddStatusComponent,\n    selectors: [[\"app-add-status\"]],\n    decls: 10,\n    vars: 1,\n    consts: [[1, \"container\", \"mt-4\"], [1, \"text-center\", \"title\"], [1, \"form-container\"], [3, \"ngSubmit\"], [\"type\", \"submit\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"]],\n    template: function AddStatusComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n        i0.ɵɵtext(2, \"Add status\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function AddStatusComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(5, \"button\", 4);\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"br\");\n        i0.ɵɵelementStart(8, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function AddStatusComponent_Template_button_click_8_listener() {\n          return ctx.goBack();\n        });\n        i0.ɵɵtext(9, \"Back\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(ctx.isUpdateMode ? \"Update Status\" : \"Add Status\");\n      }\n    },\n    dependencies: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.NgForm],\n    styles: [\".form-container[_ngcontent-%COMP%] {\\n    width: 1100px;\\n    padding: 20px;\\n    border: 30px solid lightskyblue;\\n    background-color: #e0f7fa;\\n    border-radius: 20px;\\n    background-color: whitesmoke;\\n    background-image: url('/assets/backgroundimg.jpg'); \\n    background-size: cover; \\n    background-repeat: no-repeat; \\n    background-position: center; \\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n    }\\n    .team-composition-container[_ngcontent-%COMP%] {\\n      display: flex;\\n      justify-content: space-between;\\n  }\\n  \\n  .team-composition-left[_ngcontent-%COMP%], .team-composition-right[_ngcontent-%COMP%] {\\n      flex: 1;\\n      margin-right: 10px; \\n  }\\n  \\n  .team-composition-left[_ngcontent-%COMP%] {\\n      margin-right: 120px; \\n  }\\n  \\n  .team-composition-right[_ngcontent-%COMP%] {\\n      margin-left: 80px; \\n  }\\n  \\n  .team-composition-item[_ngcontent-%COMP%] {\\n      display: flex;\\n      align-items: center;\\n      margin-bottom: 30px; \\n  }\\n  \\n  .team-composition-row[_ngcontent-%COMP%] {\\n      display: flex;\\n      align-items: center;\\n      width: 120%;\\n  }\\n  \\n  .small-input[_ngcontent-%COMP%] {\\n      margin-left: 20px; \\n      width: 140px; \\n  }\\n  .two-column-container[_ngcontent-%COMP%] {\\n    display: flex;\\n    justify-content: space-between;\\n}\\n\\n.column[_ngcontent-%COMP%] {\\n    flex: 1;\\n    margin-right: 10px; \\n}\\n\\n.radio-group[_ngcontent-%COMP%] {\\n    display: flex;\\n    align-items: center;\\n}\\n\\n.radio-group[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\n    margin-right: 5px; \\n}\\n\\n.radio-group[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\n    margin-right: 20px; \\n}\\n\\n  \\n  \\n    \\n    \\n   \\n    .title[_ngcontent-%COMP%] {\\n      color: blue; \\n      font-size: 30px;\\n      \\n    }\\n    .container[_ngcontent-%COMP%] {\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n    }\\n    \\n    .form-group[_ngcontent-%COMP%] {\\n      display: flex;\\n      justify-content: space-between;\\n      align-items: center;\\n      margin-bottom: 15px;\\n    }\\n    \\n    label[_ngcontent-%COMP%] {\\n      font-size: 20px;\\n      width: 40%;\\n      text-align: left;\\n      padding-right: 10px;\\n      color: blue; \\n    font-weight: bold; \\n    }\\n    \\n    input[_ngcontent-%COMP%], select[_ngcontent-%COMP%] {\\n      width: 55%;\\n    }\\n    \\n    \\n    button[_ngcontent-%COMP%] {\\n      height: 38px;\\n      border-radius: 10px;\\n      color: white;\\n      background-color: blue;\\n      display: block;\\n      margin: 0 auto;\\n    }\\n    \\n    \\n    [_nghost-%COMP%] {\\n      display: block;\\n      background-image: url('/assets/your-backgroundimg.jpg');\\n      \\n      background-size: cover;\\n      background-position: center;\\n      background-repeat: no-repeat;\\n      height: 100vh; \\n      padding: 10px;\\n    }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYWRkLXN0YXR1cy9hZGQtc3RhdHVzLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxhQUFhO0lBQ2IsYUFBYTtJQUNiLCtCQUErQjtJQUMvQix5QkFBeUI7SUFDekIsbUJBQW1CO0lBQ25CLDRCQUE0QjtJQUM1QixrREFBa0Q7SUFDbEQsc0JBQXNCO0lBQ3RCLDRCQUE0QjtJQUM1QiwyQkFBMkI7SUFDM0Isd0NBQXdDO0lBQ3hDO0lBQ0E7TUFDRSxhQUFhO01BQ2IsOEJBQThCO0VBQ2xDOztFQUVBOztNQUVJLE9BQU87TUFDUCxrQkFBa0IsRUFBRSxtQ0FBbUM7RUFDM0Q7O0VBRUE7TUFDSSxtQkFBbUIsRUFBRSx3Q0FBd0M7RUFDakU7O0VBRUE7TUFDSSxpQkFBaUIsRUFBRSx3Q0FBd0M7RUFDL0Q7O0VBRUE7TUFDSSxhQUFhO01BQ2IsbUJBQW1CO01BQ25CLG1CQUFtQixFQUFFLGlDQUFpQztFQUMxRDs7RUFFQTtNQUNJLGFBQWE7TUFDYixtQkFBbUI7TUFDbkIsV0FBVztFQUNmOztFQUVBO01BQ0ksaUJBQWlCLEVBQUUsMkNBQTJDO01BQzlELFlBQVksRUFBRSwyQkFBMkI7RUFDN0M7RUFDQTtJQUNFLGFBQWE7SUFDYiw4QkFBOEI7QUFDbEM7O0FBRUE7SUFDSSxPQUFPO0lBQ1Asa0JBQWtCLEVBQUUsbUNBQW1DO0FBQzNEOztBQUVBO0lBQ0ksYUFBYTtJQUNiLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLGlCQUFpQixFQUFFLHlDQUF5QztBQUNoRTs7QUFFQTtJQUNJLGtCQUFrQixFQUFFLCtDQUErQztBQUN2RTs7OztJQUlJOzs7OztPQUtHOzs7SUFHSDtNQUNFLFdBQVc7TUFDWCxlQUFlOztJQUVqQjtJQUNBO01BQ0UsYUFBYTtNQUNiLHNCQUFzQjtNQUN0QixtQkFBbUI7SUFDckI7O0lBRUE7TUFDRSxhQUFhO01BQ2IsOEJBQThCO01BQzlCLG1CQUFtQjtNQUNuQixtQkFBbUI7SUFDckI7O0lBRUE7TUFDRSxlQUFlO01BQ2YsVUFBVTtNQUNWLGdCQUFnQjtNQUNoQixtQkFBbUI7TUFDbkIsV0FBVztJQUNiLGlCQUFpQjtJQUNqQjs7SUFFQTtNQUNFLFVBQVU7SUFDWjs7O0lBR0E7TUFDRSxZQUFZO01BQ1osbUJBQW1CO01BQ25CLFlBQVk7TUFDWixzQkFBc0I7TUFDdEIsY0FBYztNQUNkLGNBQWM7SUFDaEI7SUFDQTs7Ozs7O09BTUc7O0lBRUg7TUFDRSxjQUFjO01BQ2QsdURBQXVEO01BQ3ZELGdEQUFnRDtNQUNoRCxzQkFBc0I7TUFDdEIsMkJBQTJCO01BQzNCLDRCQUE0QjtNQUM1QixhQUFhO01BQ2IsYUFBYTtJQUNmIiwic291cmNlc0NvbnRlbnQiOlsiLmZvcm0tY29udGFpbmVyIHtcbiAgICB3aWR0aDogMTEwMHB4O1xuICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgYm9yZGVyOiAzMHB4IHNvbGlkIGxpZ2h0c2t5Ymx1ZTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTBmN2ZhO1xuICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGVzbW9rZTtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy9hc3NldHMvYmFja2dyb3VuZGltZy5qcGcnKTsgXG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjsgXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDsgXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyOyBcbiAgICBib3gtc2hhZG93OiAwIDJweCA0cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICAgIH1cbiAgICAudGVhbS1jb21wb3NpdGlvbi1jb250YWluZXIge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgfVxuICBcbiAgLnRlYW0tY29tcG9zaXRpb24tbGVmdCxcbiAgLnRlYW0tY29tcG9zaXRpb24tcmlnaHQge1xuICAgICAgZmxleDogMTtcbiAgICAgIG1hcmdpbi1yaWdodDogMTBweDsgLyogQWRqdXN0IHNwYWNpbmcgYmV0d2VlbiBjb2x1bW5zICovXG4gIH1cbiAgXG4gIC50ZWFtLWNvbXBvc2l0aW9uLWxlZnQge1xuICAgICAgbWFyZ2luLXJpZ2h0OiAxMjBweDsgLyogQWRqdXN0IHJpZ2h0IG1hcmdpbiBmb3IgbGVmdCBjb2x1bW4gKi9cbiAgfVxuICBcbiAgLnRlYW0tY29tcG9zaXRpb24tcmlnaHQge1xuICAgICAgbWFyZ2luLWxlZnQ6IDgwcHg7IC8qIEFkanVzdCBsZWZ0IG1hcmdpbiBmb3IgcmlnaHQgY29sdW1uICovXG4gIH1cbiAgXG4gIC50ZWFtLWNvbXBvc2l0aW9uLWl0ZW0ge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBtYXJnaW4tYm90dG9tOiAzMHB4OyAvKiBBZGp1c3Qgc3BhY2luZyBiZXR3ZWVuIGl0ZW1zICovXG4gIH1cbiAgXG4gIC50ZWFtLWNvbXBvc2l0aW9uLXJvdyB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIHdpZHRoOiAxMjAlO1xuICB9XG4gIFxuICAuc21hbGwtaW5wdXQge1xuICAgICAgbWFyZ2luLWxlZnQ6IDIwcHg7IC8qIEFkanVzdCBzcGFjaW5nIGJldHdlZW4gbGFiZWwgYW5kIGlucHV0ICovXG4gICAgICB3aWR0aDogMTQwcHg7IC8qIEFkanVzdCB3aWR0aCBhcyBuZWVkZWQgKi9cbiAgfVxuICAudHdvLWNvbHVtbi1jb250YWluZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xufVxuXG4uY29sdW1uIHtcbiAgICBmbGV4OiAxO1xuICAgIG1hcmdpbi1yaWdodDogMTBweDsgLyogQWRqdXN0IHNwYWNpbmcgYmV0d2VlbiBjb2x1bW5zICovXG59XG5cbi5yYWRpby1ncm91cCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4ucmFkaW8tZ3JvdXAgaW5wdXQge1xuICAgIG1hcmdpbi1yaWdodDogNXB4OyAvKiBBZGp1c3Qgc3BhY2luZyBiZXR3ZWVuIHJhZGlvIGJ1dHRvbnMgKi9cbn1cblxuLnJhZGlvLWdyb3VwIGxhYmVsIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDIwcHg7IC8qIEFkanVzdCBzcGFjaW5nIGJldHdlZW4gcmFkaW8gYnV0dG9uIGxhYmVscyAqL1xufVxuXG4gIFxuICBcbiAgICAvKiAuc21hbGwtaW5wdXQge1xuICAgICAgd2lkdGg6IDUwcHg7IFxuICAgICAgaGVpZ2h0OiAyNXB4OyBcbiAgICAgIHBhZGRpbmc6IDVweDsgXG4gICAgICBmb250LXNpemU6IDE0cHg7IFxuICAgIH0gKi9cbiAgICBcbiAgIFxuICAgIC50aXRsZSB7XG4gICAgICBjb2xvcjogYmx1ZTsgXG4gICAgICBmb250LXNpemU6IDMwcHg7XG4gICAgICBcbiAgICB9XG4gICAgLmNvbnRhaW5lciB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuICAgIFxuICAgIC5mb3JtLWdyb3VwIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTVweDtcbiAgICB9XG4gICAgXG4gICAgbGFiZWwge1xuICAgICAgZm9udC1zaXplOiAyMHB4O1xuICAgICAgd2lkdGg6IDQwJTtcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xuICAgICAgY29sb3I6IGJsdWU7IFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkOyBcbiAgICB9XG4gICAgXG4gICAgaW5wdXQsIHNlbGVjdCB7XG4gICAgICB3aWR0aDogNTUlO1xuICAgIH1cbiAgICBcbiAgICBcbiAgICBidXR0b24ge1xuICAgICAgaGVpZ2h0OiAzOHB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IGJsdWU7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIG1hcmdpbjogMCBhdXRvO1xuICAgIH1cbiAgICAvKiAudGVhbS1jb21wb3NpdGlvbi1pdGVtIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDE1cHg7IFxuICAgIH1cbiAgICBcbiAgICAudGVhbS1jb21wb3NpdGlvbi1pdGVtIGxhYmVsIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDVweDsgXG4gICAgfSAqL1xuICAgIFxuICAgIDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCcvYXNzZXRzL3lvdXItYmFja2dyb3VuZGltZy5qcGcnKTtcbiAgICAgIC8qIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTczLCAyMTYsIDIzMCwgMC44KTsgKi9cbiAgICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XG4gICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICAgICAgaGVpZ2h0OiAxMDB2aDsgXG4gICAgICBwYWRkaW5nOiAxMHB4O1xuICAgIH0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["StatusEnum","AddStatusComponent","constructor","projectService","router","route","id","risksInDelivery","teamComposition","processFlows","NOT_YET","defectsReport","numberOfDefects","dailyUpdates","qaUpdates","sonarqube","weeklyReports","closeClientCommunication","gitReport","escalation","boardUpdates","ngOnInit","params","subscribe","projectId","checkCurrentStatus","url","some","segment","path","isUpdateMode","loadStatus","getCurrentStatus","response","status","resetForm","getStatus","fullStatus","teamCompositionString","JSON","stringify","onTeamCompositionChange","label","event","inputElement","target","Number","value","onSubmit","trim","parse","Error","updateStatus","console","log","saveStatus","e","error","goBack","navigate","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/add-status/add-status.component.ts","/home/decodersmdu/pocone/src/app/add-status/add-status.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { StatusEnum } from '../enum'\nimport { Status } from '../Models/status.model'\nimport { ProjectService } from '../Services/project.service'\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Project } from '../Models/project.model';\n\n@Component({\n  selector: 'app-add-status',\n  templateUrl: './add-status.component.html',\n  styleUrls: ['./add-status.component.css']\n})\nexport class AddStatusComponent implements OnInit {\n  teamCompositionLabels = [\n    \"QA Engineers\", \n    \"Frontend Developers\", \n    \"Scrum Master\", \n    \"Backend Developers\", \n    \"Technical Lead\", \n    \"Marketing and Sales\", \n    \"Stakeholders\", \n    \"UI/UX Designers\", \n    \"DevOps Engineers\", \n    \"BA\"\n  ];\n  statusEnum = StatusEnum;  // Enum reference for template binding\n\n  status: Status = {\n    id:0,\n    risksInDelivery: false,\n    teamComposition: {},\n    processFlows: StatusEnum.NOT_YET,\n    defectsReport: false,\n    numberOfDefects: 0,\n    dailyUpdates: StatusEnum.NOT_YET,\n    qaUpdates: StatusEnum.NOT_YET,\n    sonarqube: StatusEnum.NOT_YET,\n    weeklyReports: StatusEnum.NOT_YET,\n    closeClientCommunication: StatusEnum.NOT_YET,\n    gitReport: StatusEnum.NOT_YET,\n    escalation: StatusEnum.NOT_YET,\n    boardUpdates: StatusEnum.NOT_YET\n  };\n  projectId: number = 0;\n  teamCompositionString: string = '';\n  projects: Project[] =[];\n  isUpdateMode: boolean = false;\n  \n \n  constructor(private projectService: ProjectService, private router: Router, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.route.params.subscribe(params => {\n      if (params['projectId']) {\n        this.projectId = +params['projectId'];\n        this.checkCurrentStatus();\n      }\n    });\n  \n    this.route.url.subscribe(url => {\n      if (url.some(segment => segment.path === 'update-status')) {\n        this.isUpdateMode = true;\n        this.loadStatus();\n      }\n    });\n  }\n  checkCurrentStatus(): void {\n    this.projectService.getCurrentStatus(this.projectId).subscribe(response => {\n      if (response.status === 'Not Yet Started') {\n        this.isUpdateMode = false;\n        this.resetForm(); // Reset the form for a fresh status\n      } else {\n        this.isUpdateMode = true;\n        this.loadStatus(); // Load the existing status for update\n      }\n    });\n  }\n  loadStatus(): void {\n    this.projectService.getStatus(this.projectId).subscribe(fullStatus => {\n      this.status = fullStatus;\n      this.teamCompositionString = JSON.stringify(this.status.teamComposition); // Convert the team composition back to JSON string for display\n    });\n  }\n  onTeamCompositionChange(label: string, event: Event): void{\n    const inputElement = event.target as HTMLInputElement;\n    this.status.teamComposition[label] = Number(inputElement.value);\n    this.teamCompositionString = JSON.stringify(this.status.teamComposition); \n  }\n  \n  \n\nonSubmit() {\n  try {\n    // Check if the JSON string is not empty\n    if (this.teamCompositionString.trim()) {\n      this.status.teamComposition = JSON.parse(this.teamCompositionString);\n    } else {\n      throw new Error('Team composition JSON string is empty');\n    }\n\n    if (this.isUpdateMode) {\n      this.projectService.updateStatus(this.projectId, this.status).subscribe(response => {\n        console.log('Status updated:', response);\n        \n      });\n    } else {\n      this.projectService.saveStatus(this.projectId, this.status).subscribe(response => {\n        console.log('Status added:', response);\n        \n      });\n    }\n  } catch (e) {\n    console.error('Invalid JSON for team composition', e);\n  }\n}\n \nresetForm(): void {\n  this.status = {\n    id: 0,\n    risksInDelivery: false,\n    teamComposition: {},\n    processFlows: StatusEnum.NOT_YET,\n    defectsReport: false,\n    numberOfDefects: 0,\n    dailyUpdates: StatusEnum.NOT_YET,\n    qaUpdates: StatusEnum.NOT_YET,\n    sonarqube: StatusEnum.NOT_YET,\n    weeklyReports: StatusEnum.NOT_YET,\n    closeClientCommunication: StatusEnum.NOT_YET,\n    gitReport: StatusEnum.NOT_YET,\n    escalation: StatusEnum.NOT_YET,\n    boardUpdates: StatusEnum.NOT_YET\n  };\n  this.teamCompositionString = '';\n}\ngoBack() {\n  this.router.navigate(['/all-projects']); // Adjust the route to your \"Project List\" page\n}\n}\n","<div class=\"container mt-4\">\n    <h2 class=\"text-center title\">Add status</h2>\n    <div class=\"form-container\">\n      \n      <form (ngSubmit)=\"onSubmit()\">\n        <!-- <div class=\"form-group\">\n            <label for=\"teamComposition\">Team Composition</label><br>\n            <div class=\"team-composition-container\">\n                <div class=\"team-composition-left\">\n                    <div *ngFor=\"let label of teamCompositionLabels.slice(0, 5)\" class=\"team-composition-item\">\n                        <div class=\"team-composition-row\">\n                            <label>{{ label }}:</label>\n                            <input type=\"number\" [value]=\"status.teamComposition[label] || 0\" \n                                   (input)=\"onTeamCompositionChange(label, $event)\" class=\"small-input\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"team-composition-right\">\n                    <div *ngFor=\"let label of teamCompositionLabels.slice(5, 10)\" class=\"team-composition-item\">\n                        <div class=\"team-composition-row\">\n                            <label>{{ label }}:</label>\n                            <input type=\"number\" [value]=\"status.teamComposition[label] || 0\" \n                                   (input)=\"onTeamCompositionChange(label, $event)\" class=\"small-input\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"form-group\" style=\"display: flex; flex-direction: column; align-items: flex-start;\">\n          <div class=\"two-column-container\">\n              <div class=\"column\">\n                <div class=\"form-group\">\n                  <label for=\"risksInDelivery\" >Risks in Delivery</label>\n                  <div class=\"radio-group\">\n                          <input type=\"radio\" id=\"risksInDeliveryYes\" name=\"risksInDelivery\" [(ngModel)]=\"status.risksInDelivery\" [value]=\"true\">\n                          <label for=\"risksInDeliveryYes\" style=\"margin-left: 5px;\">Yes</label>                   \n                          <input type=\"radio\" id=\"risksInDeliveryNo\" name=\"risksInDelivery\" [(ngModel)]=\"status.risksInDelivery\" [value]=\"false\">\n                          <label for=\"risksInDeliveryNo\" style=\"margin-left: 5px;\">No</label>\n                      </div>\n                  </div>\n  \n    \n    <div class=\"form-group\">\n      <label for=\"processFlows\">Process Flows</label>\n      <select id=\"processFlows\" [(ngModel)]=\"status.processFlows\" name=\"processFlows\" required>\n          <option *ngFor=\"let status of statusEnum | keyvalue\" [ngValue]=\"status.value\">{{status.key}}</option>\n      </select>\n  </div>\n  \n \n              <div class=\"form-group\">\n                  <label for=\"numberOfDefects\">Number of Defects</label>\n                  <input id=\"numberOfDefects\" type=\"number\" [(ngModel)]=\"status.numberOfDefects\" name=\"numberOfDefects\">\n              </div>\n\n              <div class=\"form-group\">\n                  <label for=\"dailyUpdates\">Daily Updates</label>\n                  <select id=\"dailyUpdates\" [(ngModel)]=\"status.dailyUpdates\" name=\"dailyUpdates\" required>\n                      <option *ngFor=\"let status of statusEnum | keyvalue\" [ngValue]=\"status.value\">{{status.key}}</option>\n                  </select>\n              </div>\n\n              <div class=\"form-group\">\n                  <label for=\"qaUpdates\">QA Updates</label>\n                  <select id=\"qaUpdates\" [(ngModel)]=\"status.qaUpdates\" name=\"qaUpdates\" required>\n                      <option *ngFor=\"let status of statusEnum | keyvalue\" [ngValue]=\"status.value\">{{status.key}}</option>\n                  </select>\n              </div>\n            \n\n              <div class=\"form-group\">\n                  <label for=\"sonarqube\">Sonarqube</label>\n                  <select id=\"sonarqube\" [(ngModel)]=\"status.sonarqube\" name=\"sonarqube\" required>\n                      <option *ngFor=\"let status of statusEnum | keyvalue\" [ngValue]=\"status.value\">{{status.key}}</option>\n                  </select>\n              </div>\n          </div>\n          \n          <div class=\"column\">\n            <div class=\"form-group\">\n              <label for=\"defectsReport\">Defects Report</label>\n              <div class=\"radio-group\">\n                  <input type=\"radio\" id=\"defectsReportYes\" name=\"defectsReport\" [(ngModel)]=\"status.defectsReport\" [value]=\"true\">\n                  <label for=\"defectsReportYes\">Yes</label>\n                  <input type=\"radio\" id=\"defectsReportNo\" name=\"defectsReport\" [(ngModel)]=\"status.defectsReport\" [value]=\"false\">\n                  <label for=\"defectsReportNo\">No</label>\n              </div>\n          </div>\n              <div class=\"form-group\">\n                  <label for=\"weeklyReports\">Weekly Reports</label>\n                  <select id=\"weeklyReports\" [(ngModel)]=\"status.weeklyReports\" name=\"weeklyReports\" required>\n                      <option *ngFor=\"let status of statusEnum | keyvalue\" [ngValue]=\"status.value\">{{status.key}}</option>\n                  </select>\n              </div>\n\n              <div class=\"form-group\">\n                  <label for=\"closeClientCommunication\">Close Client Communication</label>\n                  <select id=\"closeClientCommunication\" [(ngModel)]=\"status.closeClientCommunication\" name=\"closeClientCommunication\" required>\n                      <option *ngFor=\"let status of statusEnum | keyvalue\" [ngValue]=\"status.value\">{{status.key}}</option>\n                  </select>\n              </div>\n\n              <div class=\"form-group\">\n                  <label for=\"gitReport\">Git Report:</label>\n                  <select id=\"gitReport\" [(ngModel)]=\"status.gitReport\" name=\"gitReport\" required>\n                      <option *ngFor=\"let status of statusEnum | keyvalue\" [ngValue]=\"status.value\">{{status.key}}</option>\n                  </select>\n              </div>\n\n              <div class=\"form-group\">\n                  <label for=\"escalation\">Escalation:</label>\n                  <select id=\"escalation\" [(ngModel)]=\"status.escalation\" name=\"escalation\" required>\n                      <option *ngFor=\"let status of statusEnum | keyvalue\" [ngValue]=\"status.value\">{{status.key}}</option>\n                  </select>\n              </div>\n\n              <div class=\"form-group\">\n                  <label for=\"boardUpdates\">Board Updates:</label>\n                  <select id=\"boardUpdates\" [(ngModel)]=\"status.boardUpdates\" name=\"boardUpdates\" required>\n                      <option *ngFor=\"let status of statusEnum | keyvalue\" [ngValue]=\"status.value\">{{status.key}}</option>\n                  </select>\n              </div>\n          </div>\n      </div>\n  </div> -->\n  \n    <button type=\"submit\">{{ isUpdateMode ? 'Update Status' : 'Add Status' }}</button>\n    <br>\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"goBack()\">Back</button>\n    </form>\n    </div>\n    </div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}