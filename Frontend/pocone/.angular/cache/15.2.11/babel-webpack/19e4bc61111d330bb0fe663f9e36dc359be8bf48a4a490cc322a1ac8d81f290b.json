{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/project.service\";\nimport * as i2 from \"ng2-charts\";\nexport class ProjectStatusChartComponent {\n  constructor(projectService) {\n    this.projectService = projectService;\n    this.projects = [];\n    this.barChartOptions = {\n      responsive: true\n    };\n    this.barChartLabels = [];\n    this.barChartType = 'bar';\n    this.barChartLegend = true;\n    this.barChartPlugins = [];\n    this.barChartData = [{\n      data: [],\n      label: 'Project Status'\n    }];\n  }\n  ngOnInit() {\n    this.projectService.getAllProjects().subscribe(projects => {\n      this.projects = projects;\n      this.fetchProjectStatuses();\n    });\n  }\n  fetchProjectStatuses() {\n    // Ensure that project.id is defined and is a number\n    const statusRequests = this.projects.filter(project => project.id !== undefined) // Filter out projects with undefined ids\n    .map(project => this.projectService.getCurrentStatus(project.id).toPromise().then(status => status?.status || 'Unknown') // Handle undefined status\n    );\n\n    Promise.all(statusRequests).then(statusResponses => {\n      // Filter out 'Unknown' values if needed\n      this.updateChart(statusResponses);\n    }).catch(error => {\n      console.error('Error fetching project statuses:', error);\n    });\n  }\n  updateChart(statusResponses) {\n    const projectNames = this.projects.map(project => project.name);\n    const projectStatuses = statusResponses.map(status => {\n      switch (status) {\n        case 'On Track':\n          return 5;\n        case 'Slow':\n          return 4;\n        case 'Risk':\n          return 3;\n        case 'Deep Risk':\n          return 2;\n        case 'Not Yet Started':\n          return 1;\n        default:\n          return 0;\n      }\n    });\n    // Define colors for each status\n    const backgroundColors = statusResponses.map(status => {\n      switch (status) {\n        case 'On Track':\n          return 'green';\n        case 'Slow':\n          return 'orange';\n        case 'Risk':\n          return 'yellow';\n        case 'Deep Risk':\n          return 'red';\n        default:\n          return 'gray';\n      }\n    });\n    this.barChartLabels = projectNames;\n    this.barChartData = [{\n      data: projectStatuses,\n      label: 'Project Status',\n      backgroundColor: backgroundColors\n    }];\n  }\n  static #_ = this.ɵfac = function ProjectStatusChartComponent_Factory(t) {\n    return new (t || ProjectStatusChartComponent)(i0.ɵɵdirectiveInject(i1.ProjectService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProjectStatusChartComponent,\n    selectors: [[\"app-project-status-chart\"]],\n    decls: 5,\n    vars: 6,\n    consts: [[2, \"display\", \"block\"], [\"baseChart\", \"\", 3, \"datasets\", \"labels\", \"options\", \"legend\", \"plugins\", \"chartType\"]],\n    template: function ProjectStatusChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n        i0.ɵɵtext(2, \"Project Status Chart\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 0);\n        i0.ɵɵelement(4, \"canvas\", 1);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"datasets\", ctx.barChartData)(\"labels\", ctx.barChartLabels)(\"options\", ctx.barChartOptions)(\"legend\", ctx.barChartLegend)(\"plugins\", ctx.barChartPlugins)(\"chartType\", ctx.barChartType);\n      }\n    },\n    dependencies: [i2.BaseChartDirective],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":";;;AAWA,OAAM,MAAOA,2BAA2B;EActCC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;IAblC,aAAQ,GAAc,EAAE;IACjB,oBAAe,GAAiB;MACrCC,UAAU,EAAE;KACb;IACM,mBAAc,GAAY,EAAE;IAC5B,iBAAY,GAAc,KAAK;IAC/B,mBAAc,GAAG,IAAI;IACrB,oBAAe,GAAG,EAAE;IAEpB,iBAAY,GAAoB,CACrC;MAAEC,IAAI,EAAE,EAAE;MAAEC,KAAK,EAAE;IAAgB,CAAE,CACtC;EAEqD;EAEtDC,QAAQ;IACN,IAAI,CAACJ,cAAc,CAACK,cAAc,EAAE,CAACC,SAAS,CAAEC,QAAmB,IAAI;MACrE,IAAI,CAACA,QAAQ,GAAGA,QAAQ;MACxB,IAAI,CAACC,oBAAoB,EAAE;IAC7B,CAAC,CAAC;EACJ;EAEAA,oBAAoB;IAClB;IACA,MAAMC,cAAc,GAAG,IAAI,CAACF,QAAQ,CACjCG,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKC,SAAS,CAAC,CAAC;IAAA,CAC5CC,GAAG,CAACH,OAAO,IACV,IAAI,CAACX,cAAc,CAACe,gBAAgB,CAACJ,OAAO,CAACC,EAAG,CAAC,CAC9CI,SAAS,EAAE,CACXC,IAAI,CAACC,MAAM,IAAIA,MAAM,EAAEA,MAAM,IAAI,SAAS,CAAC,CAAC;IAAA,CAChD;;IAEHC,OAAO,CAACC,GAAG,CAACX,cAAc,CAAC,CAACQ,IAAI,CAACI,eAAe,IAAG;MACjD;MACA,IAAI,CAACC,WAAW,CAACD,eAAe,CAAC;IACnC,CAAC,CAAC,CAACE,KAAK,CAACC,KAAK,IAAG;MACfC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D,CAAC,CAAC;EACJ;EAEAF,WAAW,CAACD,eAAyB;IACnC,MAAMK,YAAY,GAAG,IAAI,CAACnB,QAAQ,CAACO,GAAG,CAACH,OAAO,IAAIA,OAAO,CAACgB,IAAI,CAAC;IAC/D,MAAMC,eAAe,GAAGP,eAAe,CAACP,GAAG,CAACI,MAAM,IAAG;MACnD,QAAQA,MAAM;QACZ,KAAK,UAAU;UACb,OAAO,CAAC;QACV,KAAK,MAAM;UACT,OAAO,CAAC;QACV,KAAK,MAAM;UACT,OAAO,CAAC;QACV,KAAK,WAAW;UACd,OAAO,CAAC;QACV,KAAK,iBAAiB;UACpB,OAAO,CAAC;QACV;UACE,OAAO,CAAC;MAAC;IAEf,CAAC,CAAC;IAED;IACH,MAAMW,gBAAgB,GAAGR,eAAe,CAACP,GAAG,CAACI,MAAM,IAAG;MACpD,QAAQA,MAAM;QACZ,KAAK,UAAU;UACb,OAAO,OAAO;QAChB,KAAK,MAAM;UACT,OAAO,QAAQ;QACjB,KAAK,MAAM;UACT,OAAO,QAAQ;QACjB,KAAK,WAAW;UACd,OAAO,KAAK;QACd;UACE,OAAO,MAAM;MAAC;IAEpB,CAAC,CAAC;IAEA,IAAI,CAACY,cAAc,GAAGJ,YAAY;IAClC,IAAI,CAACK,YAAY,GAAG,CAClB;MAAE7B,IAAI,EAAE0B,eAAe;MAAEzB,KAAK,EAAE,gBAAgB;MAAE6B,eAAe,EAAEH;IAAgB,CAAE,CACtF;EACH;EAAC;qBAhFU/B,2BAA2B;EAAA;EAAA;UAA3BA,2BAA2B;IAAAmC;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCXxCC,2BAAK;QACGA,oCAAoB;QAAAA,iBAAK;QAC7BA,8BAA6B;QAC3BA,4BAOS;QACXA,iBAAM;;;QAPIA,eAAyB;QAAzBA,2CAAyB","names":["ProjectStatusChartComponent","constructor","projectService","responsive","data","label","ngOnInit","getAllProjects","subscribe","projects","fetchProjectStatuses","statusRequests","filter","project","id","undefined","map","getCurrentStatus","toPromise","then","status","Promise","all","statusResponses","updateChart","catch","error","console","projectNames","name","projectStatuses","backgroundColors","barChartLabels","barChartData","backgroundColor","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/project-status-chart/project-status-chart.component.ts","/home/decodersmdu/pocone/src/app/project-status-chart/project-status-chart.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { ProjectService } from '../Services/project.service';\nimport { Project } from '../Models/project.model';\n\n@Component({\n  selector: 'app-project-status-chart',\n  templateUrl: './project-status-chart.component.html',\n  styleUrls: ['./project-status-chart.component.css']\n})\nexport class ProjectStatusChartComponent implements OnInit {\n  projects: Project[] = [];\n  public barChartOptions: ChartOptions = {\n    responsive: true,\n  };\n  public barChartLabels: Label[] = [];\n  public barChartType: ChartType = 'bar';\n  public barChartLegend = true;\n  public barChartPlugins = [];\n\n  public barChartData: ChartDataSets[] = [\n    { data: [], label: 'Project Status' }\n  ];\n\n  constructor(private projectService: ProjectService) { }\n\n  ngOnInit(): void {\n    this.projectService.getAllProjects().subscribe((projects: Project[]) => {\n      this.projects = projects;\n      this.fetchProjectStatuses();\n    });\n  }\n\n  fetchProjectStatuses() {\n    // Ensure that project.id is defined and is a number\n    const statusRequests = this.projects\n      .filter(project => project.id !== undefined) // Filter out projects with undefined ids\n      .map(project =>\n        this.projectService.getCurrentStatus(project.id!)\n          .toPromise()\n          .then(status => status?.status || 'Unknown') // Handle undefined status\n      );\n\n    Promise.all(statusRequests).then(statusResponses => {\n      // Filter out 'Unknown' values if needed\n      this.updateChart(statusResponses);\n    }).catch(error => {\n      console.error('Error fetching project statuses:', error);\n    });\n  }\n\n  updateChart(statusResponses: string[]) {\n    const projectNames = this.projects.map(project => project.name);\n    const projectStatuses = statusResponses.map(status => {\n      switch (status) {\n        case 'On Track':\n          return 5;\n        case 'Slow':\n          return 4;\n        case 'Risk':\n          return 3;\n        case 'Deep Risk':\n          return 2;\n        case 'Not Yet Started':\n          return 1;\n        default:\n          return 0;\n      }\n    });\n\n     // Define colors for each status\n  const backgroundColors = statusResponses.map(status => {\n    switch (status) {\n      case 'On Track':\n        return 'green';\n      case 'Slow':\n        return 'orange';\n      case 'Risk':\n        return 'yellow';\n      case 'Deep Risk':\n        return 'red';\n      default:\n        return 'gray';\n    }\n  });\n\n    this.barChartLabels = projectNames;\n    this.barChartData = [\n      { data: projectStatuses, label: 'Project Status', backgroundColor: backgroundColors }\n    ];\n  }\n}\n\n","<div>\n    <h3>Project Status Chart</h3>\n    <div style=\"display: block;\">\n      <canvas baseChart\n              [datasets]=\"barChartData\"\n              [labels]=\"barChartLabels\"\n              [options]=\"barChartOptions\"\n              [legend]=\"barChartLegend\"\n              [plugins]=\"barChartPlugins\"              \n              [chartType]=\"barChartType\">\n      </canvas>\n    </div>\n  </div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}