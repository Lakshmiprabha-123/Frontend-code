{"ast":null,"code":"import { __decorate } from \"tslib\";\n// monthly-status.component.ts\nimport { Component } from '@angular/core';\nimport { Chart } from 'chart.js/auto';\nlet MonthlyStatusComponent = class MonthlyStatusComponent {\n  constructor(statusService) {\n    this.statusService = statusService;\n    this.projects = [{\n      id: 1,\n      name: 'Project 1'\n    }, {\n      id: 2,\n      name: 'Project 2'\n    }\n    // Add more projects as needed\n    ];\n  }\n\n  ngOnInit() {}\n  onProjectChange() {\n    this.fetchStatusHistory();\n  }\n  onMonthChange() {\n    this.fetchStatusHistory();\n  }\n  fetchStatusHistory() {\n    if (this.selectedProjectId && this.selectedMonth) {\n      this.statusService.getStatusHistory(this.selectedProjectId, this.selectedMonth).subscribe(data => {\n        this.updateChart(data);\n      });\n    }\n  }\n  updateChart(data) {\n    if (this.chart) {\n      this.chart.destroy();\n    }\n    const labels = data.map(status => status.createdDate); // Adjust according to actual response\n    const statuses = data.map(status => status.currentStatus);\n    this.chart = new Chart('statusChart', {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Status History',\n          data: statuses,\n          fill: false,\n          borderColor: 'blue',\n          tension: 0.1\n        }]\n      },\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            display: true\n          },\n          tooltip: {\n            callbacks: {\n              label: function (context) {\n                return context.raw; // Customize tooltip label if needed\n              }\n            }\n          }\n        },\n\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'day'\n            },\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Status'\n            }\n          }\n        }\n      }\n    });\n  }\n};\nMonthlyStatusComponent = __decorate([Component({\n  selector: 'app-monthly-status',\n  templateUrl: './monthly-status.component.html',\n  styleUrls: ['./monthly-status.component.css']\n})], MonthlyStatusComponent);\nexport { MonthlyStatusComponent };","map":{"version":3,"mappings":";AAAA;AACA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAASC,KAAK,QAAQ,eAAe;AAO9B,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAUjCC,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;IATjC,aAAQ,GAAG,CACT;MAAEC,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAW,CAAE,EAC5B;MAAED,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAW;IAC1B;IAAA,CACD;EAKkD;;EAEnDC,QAAQ,IAAU;EAElBC,eAAe;IACb,IAAI,CAACC,kBAAkB,EAAE;EAC3B;EAEAC,aAAa;IACX,IAAI,CAACD,kBAAkB,EAAE;EAC3B;EAEAA,kBAAkB;IAChB,IAAI,IAAI,CAACE,iBAAiB,IAAI,IAAI,CAACC,aAAa,EAAE;MAChD,IAAI,CAACR,aAAa,CACfS,gBAAgB,CAAC,IAAI,CAACF,iBAAiB,EAAE,IAAI,CAACC,aAAa,CAAC,CAC5DE,SAAS,CAAEC,IAAI,IAAI;QAClB,IAAI,CAACC,WAAW,CAACD,IAAI,CAAC;MACxB,CAAC,CAAC;;EAER;EAEAC,WAAW,CAACD,IAAS;IACnB,IAAI,IAAI,CAACE,KAAK,EAAE;MACd,IAAI,CAACA,KAAK,CAACC,OAAO,EAAE;;IAGtB,MAAMC,MAAM,GAAGJ,IAAI,CAACK,GAAG,CAAEC,MAAW,IAAKA,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC;IAC9D,MAAMC,QAAQ,GAAGR,IAAI,CAACK,GAAG,CAAEC,MAAW,IAAKA,MAAM,CAACG,aAAa,CAAC;IAEhE,IAAI,CAACP,KAAK,GAAG,IAAIhB,KAAK,CAAC,aAAa,EAAE;MACpCwB,IAAI,EAAE,MAAM;MACZV,IAAI,EAAE;QACJI,MAAM,EAAEA,MAAM;QACdO,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,gBAAgB;UACvBZ,IAAI,EAAEQ,QAAQ;UACdK,IAAI,EAAE,KAAK;UACXC,WAAW,EAAE,MAAM;UACnBC,OAAO,EAAE;SACV;OAEJ;MACDC,OAAO,EAAE;QACPC,UAAU,EAAE,IAAI;QAChBC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,OAAO,EAAE;WACV;UACDC,OAAO,EAAE;YACPC,SAAS,EAAE;cACTV,KAAK,EAAE,UAAUW,OAAO;gBACtB,OAAOA,OAAO,CAACC,GAAG,CAAC,CAAC;cACtB;;;SAGL;;QACDC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDhB,IAAI,EAAE,MAAM;YACZiB,IAAI,EAAE;cACJC,IAAI,EAAE;aACP;YACDC,KAAK,EAAE;cACLT,OAAO,EAAE,IAAI;cACbU,IAAI,EAAE;;WAET;UACDC,CAAC,EAAE;YACDF,KAAK,EAAE;cACLT,OAAO,EAAE,IAAI;cACbU,IAAI,EAAE;;;;;KAKf,CAAC;EACJ;CACD;AAzFY3C,sBAAsB,eALlCF,SAAS,CAAC;EACT+C,QAAQ,EAAE,oBAAoB;EAC9BC,WAAW,EAAE,iCAAiC;EAC9CC,SAAS,EAAE,CAAC,gCAAgC;CAC7C,CAAC,GACW/C,sBAAsB,CAyFlC;SAzFYA,sBAAsB","names":["Component","Chart","MonthlyStatusComponent","constructor","statusService","id","name","ngOnInit","onProjectChange","fetchStatusHistory","onMonthChange","selectedProjectId","selectedMonth","getStatusHistory","subscribe","data","updateChart","chart","destroy","labels","map","status","createdDate","statuses","currentStatus","type","datasets","label","fill","borderColor","tension","options","responsive","plugins","legend","display","tooltip","callbacks","context","raw","scales","x","time","unit","title","text","y","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/monthly-status/monthly-status.component.ts"],"sourcesContent":["// monthly-status.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { StatusService } from './status.service';\nimport { Chart } from 'chart.js/auto';\n\n@Component({\n  selector: 'app-monthly-status',\n  templateUrl: './monthly-status.component.html',\n  styleUrls: ['./monthly-status.component.css'],\n})\nexport class MonthlyStatusComponent implements OnInit {\n  projects = [\n    { id: 1, name: 'Project 1' },\n    { id: 2, name: 'Project 2' },\n    // Add more projects as needed\n  ];\n  selectedProjectId: number;\n  selectedMonth: string;\n  chart: any;\n\n  constructor(private statusService: StatusService) {}\n\n  ngOnInit(): void {}\n\n  onProjectChange(): void {\n    this.fetchStatusHistory();\n  }\n\n  onMonthChange(): void {\n    this.fetchStatusHistory();\n  }\n\n  fetchStatusHistory(): void {\n    if (this.selectedProjectId && this.selectedMonth) {\n      this.statusService\n        .getStatusHistory(this.selectedProjectId, this.selectedMonth)\n        .subscribe((data) => {\n          this.updateChart(data);\n        });\n    }\n  }\n\n  updateChart(data: any): void {\n    if (this.chart) {\n      this.chart.destroy();\n    }\n\n    const labels = data.map((status: any) => status.createdDate); // Adjust according to actual response\n    const statuses = data.map((status: any) => status.currentStatus);\n\n    this.chart = new Chart('statusChart', {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: 'Status History',\n            data: statuses,\n            fill: false,\n            borderColor: 'blue',\n            tension: 0.1,\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            display: true,\n          },\n          tooltip: {\n            callbacks: {\n              label: function (context) {\n                return context.raw; // Customize tooltip label if needed\n              },\n            },\n          },\n        },\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'day',\n            },\n            title: {\n              display: true,\n              text: 'Date',\n            },\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Status',\n            },\n          },\n        },\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}