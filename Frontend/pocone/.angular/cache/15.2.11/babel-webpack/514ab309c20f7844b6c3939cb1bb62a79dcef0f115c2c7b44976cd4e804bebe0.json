{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/project.service\";\nimport * as i2 from \"ng2-charts\";\nexport class ProjectStatusChartComponent {\n  constructor(projectService) {\n    this.projectService = projectService;\n    this.projects = [];\n    this.barChartOptions = {\n      responsive: true,\n      scales: {\n        xAxes: [{\n          stacked: true\n        }],\n        yAxes: [{\n          stacked: true\n        }]\n      },\n      legend: {\n        display: true,\n        labels: {\n          fontColor: 'black'\n        }\n      },\n      tooltips: {\n        callbacks: {\n          label: (tooltipItem, data) => {\n            const datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';\n            const value = tooltipItem.yLabel;\n            const status = this.getStatusFromValue(value);\n            return `${datasetLabel}: ${status}`;\n          }\n        }\n      }\n    };\n    this.barChartLabels = [];\n    this.barChartType = 'bar';\n    this.barChartLegend = true;\n    this.barChartPlugins = [];\n    this.barChartData = [{\n      data: [],\n      label: 'Project Status',\n      backgroundColor: []\n    }];\n  }\n  ngOnInit() {\n    this.projectService.getProjectList().subscribe(projects => {\n      this.projects = projects;\n      this.fetchProjectStatuses();\n    });\n  }\n  fetchProjectStatuses() {\n    const statusRequests = this.projects.filter(project => project.id !== undefined).map(project => this.projectService.getCurrentStatus(project.id).toPromise().then(status => status?.status || 'Unknown'));\n    Promise.all(statusRequests).then(statusResponses => {\n      this.updateChart(statusResponses);\n    }).catch(error => {\n      console.error('Error fetching project statuses:', error);\n    });\n  }\n  updateChart(statusResponses) {\n    const projectNames = this.projects.map(project => project.name);\n    const projectStatuses = statusResponses.map(status => {\n      switch (status) {\n        case 'On Track':\n          return 5;\n        case 'Slow':\n          return 4;\n        case 'Risk':\n          return 3;\n        case 'Deep Risk':\n          return 2;\n        case 'Not Yet Started':\n          return 1;\n        default:\n          return 0;\n      }\n    });\n    const backgroundColors = statusResponses.map(status => {\n      switch (status) {\n        case 'On Track':\n          return 'green';\n        case 'Slow':\n          return 'orange';\n        case 'Risk':\n          return 'yellow';\n        case 'Deep Risk':\n          return 'red';\n        default:\n          return 'gray';\n      }\n    });\n    // Legend should automatically reflect the labels and colors defined in the dataset\n    this.barChartLabels = projectNames;\n    this.barChartData = [{\n      data: projectStatuses,\n      label: 'Project Status',\n      backgroundColor: backgroundColors\n    }];\n  }\n  getStatusFromValue(value) {\n    switch (value) {\n      case 5:\n        return 'On Track';\n      case 4:\n        return 'Slow';\n      case 3:\n        return 'Risk';\n      case 2:\n        return 'Deep Risk';\n      case 1:\n        return 'Not Yet Started';\n      default:\n        return 'Unknown';\n    }\n  }\n  static #_ = this.ɵfac = function ProjectStatusChartComponent_Factory(t) {\n    return new (t || ProjectStatusChartComponent)(i0.ɵɵdirectiveInject(i1.ProjectService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProjectStatusChartComponent,\n    selectors: [[\"app-project-status-chart\"]],\n    decls: 4,\n    vars: 6,\n    consts: [[1, \"dashboard-container\"], [1, \"chart-container\"], [2, \"display\", \"flex\"], [\"baseChart\", \"\", 3, \"datasets\", \"labels\", \"options\", \"legend\", \"plugins\", \"chartType\"]],\n    template: function ProjectStatusChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"canvas\", 3);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"datasets\", ctx.barChartData)(\"labels\", ctx.barChartLabels)(\"options\", ctx.barChartOptions)(\"legend\", ctx.barChartLegend)(\"plugins\", ctx.barChartPlugins)(\"chartType\", ctx.barChartType);\n      }\n    },\n    dependencies: [i2.BaseChartDirective],\n    styles: [\".dashboard-container[_ngcontent-%COMP%] {\\n    display: flex;\\n    gap: 20px; \\n  }\\n  \\n  .chart-container[_ngcontent-%COMP%] {\\n    flex: 1; \\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcHJvamVjdC1zdGF0dXMtY2hhcnQvcHJvamVjdC1zdGF0dXMtY2hhcnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGFBQWE7SUFDYixTQUFTLEVBQUUsaUNBQWlDO0VBQzlDOztFQUVBO0lBQ0UsT0FBTyxFQUFFLHFDQUFxQztFQUNoRCIsInNvdXJjZXNDb250ZW50IjpbIi5kYXNoYm9hcmQtY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGdhcDogMjBweDsgLyogU3BhY2UgYmV0d2VlbiB0aGUgY29tcG9uZW50cyAqL1xuICB9XG4gIFxuICAuY2hhcnQtY29udGFpbmVyIHtcbiAgICBmbGV4OiAxOyAvKiBBbGxvdyBjb21wb25lbnRzIHRvIGdyb3cgZXF1YWxseSAqL1xuICB9Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["ProjectStatusChartComponent","constructor","projectService","responsive","scales","xAxes","stacked","yAxes","legend","display","labels","fontColor","tooltips","callbacks","label","tooltipItem","data","datasetLabel","datasets","datasetIndex","value","yLabel","status","getStatusFromValue","backgroundColor","ngOnInit","getProjectList","subscribe","projects","fetchProjectStatuses","statusRequests","filter","project","id","undefined","map","getCurrentStatus","toPromise","then","Promise","all","statusResponses","updateChart","catch","error","console","projectNames","name","projectStatuses","backgroundColors","barChartLabels","barChartData","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/project-status-chart/project-status-chart.component.ts","/home/decodersmdu/pocone/src/app/project-status-chart/project-status-chart.component.html"],"sourcesContent":["// import { Component, OnInit } from '@angular/core';\n// import { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\n// import { Label } from 'ng2-charts';\n// import { ProjectService } from '../Services/project.service';\n// import { Project } from '../Models/project.model';\n\n// @Component({\n//   selector: 'app-project-status-chart',\n//   templateUrl: './project-status-chart.component.html',\n//   styleUrls: ['./project-status-chart.component.css']\n// })\n// export class ProjectStatusChartComponent implements OnInit {\n//   projects: Project[] = [];\n//   public barChartOptions: ChartOptions = {\n//     responsive: true,\n//   };\n//   public barChartLabels: Label[] = [];\n//   public barChartType: ChartType = 'bar';\n//   public barChartLegend = true;\n//   public barChartPlugins = [];\n\n//   public barChartData: ChartDataSets[] = [\n//     { data: [], label: 'Project Status' }\n//   ];\n\n//   constructor(private projectService: ProjectService) { }\n\n//   ngOnInit(): void {\n//     this.projectService.getAllProjects().subscribe((projects: Project[]) => {\n//       this.projects = projects;\n//       this.fetchProjectStatuses();\n//     });\n//   }\n\n//   fetchProjectStatuses() {\n//     // Ensure that project.id is defined and is a number\n//     const statusRequests = this.projects\n//       .filter(project => project.id !== undefined) // Filter out projects with undefined ids\n//       .map(project =>\n//         this.projectService.getCurrentStatus(project.id!)\n//           .toPromise()\n//           .then(status => status?.status || 'Unknown') // Handle undefined status\n//       );\n\n//     Promise.all(statusRequests).then(statusResponses => {\n//       // Filter out 'Unknown' values if needed\n//       this.updateChart(statusResponses);\n//     }).catch(error => {\n//       console.error('Error fetching project statuses:', error);\n//     });\n//   }\n\n//   updateChart(statusResponses: string[]) {\n//     const projectNames = this.projects.map(project => project.name);\n//     const projectStatuses = statusResponses.map(status => {\n//       switch (status) {\n//         case 'On Track':\n//           return 5;\n//         case 'Slow':\n//           return 4;\n//         case 'Risk':\n//           return 3;\n//         case 'Deep Risk':\n//           return 2;\n//         case 'Not Yet Started':\n//           return 1;\n//         default:\n//           return 0;\n//       }\n//     });\n\n//      // Define colors for each status\n//   const backgroundColors = statusResponses.map(status => {\n//     switch (status) {\n//       case 'On Track':\n//         return 'green';\n//       case 'Slow':\n//         return 'orange';\n//       case 'Risk':\n//         return 'yellow';\n//       case 'Deep Risk':\n//         return 'red';\n//       default:\n//         return 'gray';\n//     }\n//   });\n\n//     this.barChartLabels = projectNames;\n//     this.barChartData = [\n//       { data: projectStatuses, label: 'Project Status', backgroundColor: backgroundColors }\n//     ];\n//   }\n// }\n\n\n\nimport { Component, OnInit } from '@angular/core';\nimport { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\nimport { Label } from 'ng2-charts';\nimport { ProjectService } from '../Services/project.service';\nimport { Project } from '../Models/project.model';\n\n@Component({\n  selector: 'app-project-status-chart',\n  templateUrl: './project-status-chart.component.html',\n  styleUrls: ['./project-status-chart.component.css']\n})\nexport class ProjectStatusChartComponent implements OnInit {\n  projects: Project[] = [];\n  public barChartOptions: ChartOptions = {\n    responsive: true,\n    scales: {\n      xAxes: [{\n        stacked: true\n      }],\n      yAxes: [{\n        stacked: true\n      }]\n    },\n    legend: {\n      display: true,\n      labels: {\n        fontColor: 'black'\n      }\n    },\n    tooltips: {\n      callbacks: {\n        label: (tooltipItem: any, data: any) => {\n          const datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';\n          const value = tooltipItem.yLabel;\n          const status = this.getStatusFromValue(value);\n          return `${datasetLabel}: ${status}`;\n        }\n      }\n    }\n  };\n  public barChartLabels: Label[] = [];\n  public barChartType: ChartType = 'bar';\n  public barChartLegend = true;\n  public barChartPlugins = [];\n\n  public barChartData: ChartDataSets[] = [\n    { data: [], label: 'Project Status', backgroundColor: [] }\n  ];\n\n  constructor(private projectService: ProjectService) { }\n\n  ngOnInit(): void {\n    this.projectService.getProjectList().subscribe((projects: Project[]) => {\n      this.projects = projects;\n      this.fetchProjectStatuses();\n    });\n  }\n\n  fetchProjectStatuses() {\n    const statusRequests = this.projects\n      .filter(project => project.id !== undefined)\n      .map(project =>\n        this.projectService.getCurrentStatus(project.id!)\n          .toPromise()\n          .then(status => status?.status || 'Unknown')\n      );\n\n    Promise.all(statusRequests).then(statusResponses => {\n      this.updateChart(statusResponses);\n    }).catch(error => {\n      console.error('Error fetching project statuses:', error);\n    });\n  }\n\n  updateChart(statusResponses: string[]) {\n    const projectNames = this.projects.map(project => project.name);\n    const projectStatuses = statusResponses.map(status => {\n      switch (status) {\n        case 'On Track':\n          return 5;\n        case 'Slow':\n          return 4;\n        case 'Risk':\n          return 3;\n        case 'Deep Risk':\n          return 2;\n        case 'Not Yet Started':\n          return 1;\n        default:\n          return 0;\n      }\n    });\n\n    const backgroundColors: string[] = statusResponses.map(status => {\n      switch (status) {\n        case 'On Track':\n          return 'green';\n        case 'Slow':\n          return 'orange';\n        case 'Risk':\n          return 'yellow';\n        case 'Deep Risk':\n          return 'red';\n        default:\n          return 'gray';\n      }\n    });\n\n    // Legend should automatically reflect the labels and colors defined in the dataset\n    this.barChartLabels = projectNames;\n    this.barChartData = [\n      { data: projectStatuses, label: 'Project Status', backgroundColor: backgroundColors }\n    ];\n  }\n\n  getStatusFromValue(value: number): string {\n    switch (value) {\n      case 5:\n        return 'On Track';\n      case 4:\n        return 'Slow';\n      case 3:\n        return 'Risk';\n      case 2:\n        return 'Deep Risk';\n      case 1:\n        return 'Not Yet Started';\n      default:\n        return 'Unknown';\n    }\n  }\n}\n","<div class=\"dashboard-container\">\n    <div class=\"chart-container\">\n    \n    <div style=\"display: flex;\">\n      <canvas baseChart\n              [datasets]=\"barChartData\"\n              [labels]=\"barChartLabels\"\n              [options]=\"barChartOptions\"\n              [legend]=\"barChartLegend\"\n              [plugins]=\"barChartPlugins\"              \n              [chartType]=\"barChartType\">\n      </canvas>\n    </div>\n  </div>\n  </div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}