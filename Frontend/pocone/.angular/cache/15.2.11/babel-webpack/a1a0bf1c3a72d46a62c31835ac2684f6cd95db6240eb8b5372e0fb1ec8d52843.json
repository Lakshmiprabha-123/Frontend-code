{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet DashboardComponent = class DashboardComponent {\n  constructor(http) {\n    this.http = http;\n    this.barChartOptions = {\n      responsive: true\n    };\n    this.barChartLabels = ['Project A', 'Project B', 'Project C'];\n    this.barChartType = 'bar';\n    this.barChartLegend = true;\n    this.barChartData = [{\n      data: [65, 59, 80],\n      label: 'On Track'\n    }, {\n      data: [28, 48, 40],\n      label: 'Slow'\n    }, {\n      data: [35, 29, 55],\n      label: 'Risk'\n    }, {\n      data: [18, 48, 77],\n      label: 'Deep Risk'\n    }];\n  }\n  ngOnInit() {\n    this.fetchProjectData();\n  }\n  fetchProjectData() {\n    // Replace with your API endpoint\n    this.http.get('http://localhost:8080/projects').subscribe(data => {\n      this.updateCharts(data);\n    });\n  }\n  updateCharts(data) {\n    this.barChartLabels = data.map(project => project.name);\n    this.pieChartLabels = this.barChartLabels;\n    const statuses = ['On Track', 'Slow', 'Risk', 'Deep Risk'];\n    const statusColors = {\n      'On Track': 'green',\n      'Slow': 'yellow',\n      'Risk': 'brown',\n      'Deep Risk': 'red'\n    };\n    const barData = statuses.map(status => ({\n      data: data.filter(project => project.status === status).map(project => project.name),\n      label: status,\n      backgroundColor: statusColors[status]\n    }));\n    const pieData = statuses.map(status => ({\n      data: data.filter(project => project.status === status).length,\n      label: status,\n      backgroundColor: statusColors[status]\n    }));\n    this.barChartData = [{\n      data: data.map(project => statuses.indexOf(project.status)),\n      label: 'Project Status'\n    }];\n    this.pieChartData = pieData;\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);\nexport { DashboardComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAS1C,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAgB7BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAdjB,oBAAe,GAAiB;MACrCC,UAAU,EAAE;KACb;IACM,mBAAc,GAAY,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC;IACjE,iBAAY,GAAc,KAAK;IAC/B,mBAAc,GAAG,IAAI;IAErB,iBAAY,GAAG,CACpB;MAAEC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAU,CAAE,EACzC;MAAED,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAM,CAAE,EACrC;MAAED,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAM,CAAE,EACrC;MAAED,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAW,CAAE,CAC3C;EAEsC;EAEvCC,QAAQ;IACN,IAAI,CAACC,gBAAgB,EAAE;EACzB;EAEAA,gBAAgB;IACd;IACA,IAAI,CAACL,IAAI,CAACM,GAAG,CAAQ,gCAAgC,CAAC,CAACC,SAAS,CAACL,IAAI,IAAG;MACtE,IAAI,CAACM,YAAY,CAACN,IAAI,CAAC;IACzB,CAAC,CAAC;EACJ;EAEAM,YAAY,CAACN,IAAW;IACtB,IAAI,CAACO,cAAc,GAAGP,IAAI,CAACQ,GAAG,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,CAAC;IACvD,IAAI,CAACC,cAAc,GAAG,IAAI,CAACJ,cAAc;IAEzC,MAAMK,QAAQ,GAAG,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC;IAC1D,MAAMC,YAAY,GAAG;MACnB,UAAU,EAAE,OAAO;MACnB,MAAM,EAAE,QAAQ;MAChB,MAAM,EAAE,OAAO;MACf,WAAW,EAAE;KACd;IAED,MAAMC,OAAO,GAAGF,QAAQ,CAACJ,GAAG,CAACO,MAAM,KAAK;MACtCf,IAAI,EAAEA,IAAI,CAACgB,MAAM,CAACP,OAAO,IAAIA,OAAO,CAACM,MAAM,KAAKA,MAAM,CAAC,CAACP,GAAG,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,CAAC;MACpFT,KAAK,EAAEc,MAAM;MACbE,eAAe,EAAEJ,YAAY,CAACE,MAAM;KACrC,CAAC,CAAC;IAEH,MAAMG,OAAO,GAAGN,QAAQ,CAACJ,GAAG,CAACO,MAAM,KAAK;MACtCf,IAAI,EAAEA,IAAI,CAACgB,MAAM,CAACP,OAAO,IAAIA,OAAO,CAACM,MAAM,KAAKA,MAAM,CAAC,CAACI,MAAM;MAC9DlB,KAAK,EAAEc,MAAM;MACbE,eAAe,EAAEJ,YAAY,CAACE,MAAM;KACrC,CAAC,CAAC;IAEH,IAAI,CAACK,YAAY,GAAG,CAAC;MAAEpB,IAAI,EAAEA,IAAI,CAACQ,GAAG,CAACC,OAAO,IAAIG,QAAQ,CAACS,OAAO,CAACZ,OAAO,CAACM,MAAM,CAAC,CAAC;MAAEd,KAAK,EAAE;IAAgB,CAAE,CAAC;IAC9G,IAAI,CAACqB,YAAY,GAAGJ,OAAO;EAC7B;CACD;AAxDYtB,kBAAkB,eAL9BD,SAAS,CAAC;EACT4B,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,GACW7B,kBAAkB,CAwD9B;SAxDYA,kBAAkB","names":["Component","DashboardComponent","constructor","http","responsive","data","label","ngOnInit","fetchProjectData","get","subscribe","updateCharts","barChartLabels","map","project","name","pieChartLabels","statuses","statusColors","barData","status","filter","backgroundColor","pieData","length","barChartData","indexOf","pieChartData","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/decodersmdu/pocone/src/app/dashboard/dashboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ChartOptions, ChartType } from 'chart.js';\nimport { Label } from 'ng2-charts';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  public barChartOptions: ChartOptions = {\n    responsive: true,\n  };\n  public barChartLabels: Label[] = ['Project A', 'Project B', 'Project C'];\n  public barChartType: ChartType = 'bar';\n  public barChartLegend = true;\n\n  public barChartData = [\n    { data: [65, 59, 80], label: 'On Track' },\n    { data: [28, 48, 40], label: 'Slow' },\n    { data: [35, 29, 55], label: 'Risk' },\n    { data: [18, 48, 77], label: 'Deep Risk' }\n  ];\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit(): void {\n    this.fetchProjectData();\n  }\n\n  fetchProjectData(): void {\n    // Replace with your API endpoint\n    this.http.get<any[]>('http://localhost:8080/projects').subscribe(data => {\n      this.updateCharts(data);\n    });\n  }\n\n  updateCharts(data: any[]): void {\n    this.barChartLabels = data.map(project => project.name);\n    this.pieChartLabels = this.barChartLabels;\n\n    const statuses = ['On Track', 'Slow', 'Risk', 'Deep Risk'];\n    const statusColors = {\n      'On Track': 'green',\n      'Slow': 'yellow',\n      'Risk': 'brown',\n      'Deep Risk': 'red'\n    };\n\n    const barData = statuses.map(status => ({\n      data: data.filter(project => project.status === status).map(project => project.name),\n      label: status,\n      backgroundColor: statusColors[status]\n    }));\n\n    const pieData = statuses.map(status => ({\n      data: data.filter(project => project.status === status).length,\n      label: status,\n      backgroundColor: statusColors[status]\n    }));\n\n    this.barChartData = [{ data: data.map(project => statuses.indexOf(project.status)), label: 'Project Status' }];\n    this.pieChartData = pieData;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}